;;-*-Lisp-*-
    (in-package goal)

    ;; name: checkpoint-randomizer.gc
    ;; name in dgo: checkpoint-randomizer
    ;; dgos: TODO


    (defun act1-1-randomize ()
        (let (
        (level-pick (rand-vu-int-range 1 8))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! roll-shopitems #t)
        (set! enemy-drop-weapon-once #f)
        (when (= level-pick act-before1)
            (set! level-pick (rand-vu-int-range 1 8))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (set! print-stage 1)
          (when (and (= level-pick 1)(!= act-before1 1))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-tower) 'debug #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before1 2))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-start"))
            (play-task (game-task atoll-water) 'debug #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before1 3))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-krew-delivery) 'debug #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before1 5))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-rescue) 'debug #f)
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before1 6))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-battle"))
            (play-task (game-task atoll-battle) 'debug #f)
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before1 7))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-krew-collection) 'debug #f)
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node palace-boss-resolution))
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before1 8))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-keira-delivery) 'debug #f)
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node drill-eggs-resolution))
            (set! waitenter #t)
            
          )
          (set! wait-extra-for-ingame #t)
          (set! act-act 1)
        )
    )
    (defun act1-randomize ()
        (let (
        (level-pick (rand-vu-int-range 1 12))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! print-stage 2)
        (when (= level-pick act-before1)
            (set! level-pick (rand-vu-int-range 1 12))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (= level-pick 1)
            (set! waitenter #t)
            (dm-play-task-with-continue (game-task ruins-tower) "ruins-start")
          )
          (when (= level-pick 2)
            (set! waitenter #t)
            (dm-play-task-with-continue (game-task atoll-water) "atoll-start")
          )
          (when (= level-pick 3)
            (set! waitenter #t)
            (dm-play-task-with-continue (game-task fortress-dump) "fordumpa-start")
          )
          (when (= level-pick 4)
            (set! waitenter #t)
            (dm-play-task-with-continue (game-task city-krew-delivery) "ctysluma-alley-no-hideout")
          )
          (when (= level-pick 5)
            (set! waitenter #t)
            (dm-play-task-with-continue (game-task atoll-sig) "atoll-start")
          )
          (when (= level-pick 6)
            (set! waitenter #t)
            (dm-play-task-with-continue (game-task sewer-enemy) "sewer-start")
          )
          (when (= level-pick 7)
            (dm-play-task-with-continue (game-task strip-rescue) "strip-start")
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (set! waitenter #t)
            
          )
          (when (= level-pick 8)
            (dm-play-task-with-continue (game-task atoll-battle) "atoll-battle")
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (set! waitenter #t)
            
          )
          (when (= level-pick 9)
            (dm-play-task-with-continue (game-task city-krew-collection) "ctyport-hiphog")
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node palace-boss-resolution))
            (set! waitenter #t)
            
          )
          (when (= level-pick 10)
            (dm-play-task-with-continue (game-task city-power) "vinroom-start")
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (set! waitenter #t)
            
          )
          (when (= level-pick 11)
            (dm-play-task-with-continue (game-task city-keira-delivery) "ctyport-hiphog")
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node drill-eggs-resolution))
            (set! waitenter #t)
            
          )
          (when (= level-pick 12)
            (dm-play-task-with-continue (game-task mountain-lens) "mountain-start")
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (task-node-close! (game-task-node palace-boss-resolution))
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )

    (defun act2-randomize ()
    
    )

    (defun act3-randomize ()
    
    )

    (defun act4-randomize ()
    
    )

    (defun all-randomize ()
      (let (
        (level-pick (rand-vu-int-range 1 50))
        )
      )
    )

    

