    ;;-*-Lisp-*-
    (in-package goal)

    ;; name: mod-custom-code.gc
    ;; name in dgo: mod-custom-code
    ;; dgos: TODO


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; What is this file for.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| This file contains function defenitions that are pre placed in the mod base,
    so if you place custom code inside of these functions, it will exectue based on
    the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
    to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
    an orb |#











#| TODO:


- Make a settings file for saved runs
- Fix crashes at drill platform
- Make modifiers at the end of boss levels to select from
- Make Dark Eco act
- Make the campaign and Ending to unlock Dark Eco Mode
- Make purchaseable items to put in runs in the main menu

|#
    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Begin function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

(define matt-str (new 'global 'string 2048 (the-as string #f)))
(define *pc-encoded-matt-str* (new 'global 'string 2048 (the-as string #f)))


;traffic manipulations
(define traffic-metalheads? #f)

;randomizer vars
(define act1-1 #f)
(define act1-2 #f)
(define act1-3 #f)
(define act1-4 #f)
(define act1-5 #f)
(define act1-shop #f)
(define act2-1 #f)
(define act2-2 #f)
(define act2-3 #f)
(define act2-4 #f)
(define act2-5 #f)
(define act2-shop #f)
(define act3-1 #f)
(define act3-2 #f)
(define act3-3 #f)
(define act3-4 #f)
(define act3-5 #f)
(define act3-shop #f)
(define act-before1 0)
(define act-before2 0)
(define act-before3 0)
(define act-before4 0)
(define act-before5 0)
(define act-before6 0)
(define act-before7 0)
(define act-before8 0)
(define act-before9 0)
(define act-before10 0)
(define act-before11 0)
(define act-before12 0)

(define reward-orbs #f)
(define wait-for-ingame #f)
(define waiting 0)

(define give-gunred? #f)

;menu funct
(define tutorial-completed? #f)
(define in-menu #f)
(define pause-menu-blocked? #f)
(define camera-locked #f)
(define wait-start #f)
(define waits-frame 0)
(define wait-exit #f)
(define waite-frame 0)
(define waitenter #f)
(define waitenteri 0)
(define quicksave #f)
(define display-run #f)
(define print-stage 0)
(define act-act 0)
(define current-level "")
(define mod-s "")
(define purchase-amount 0)
(define shopid1 0)
(define shopid2 0)
(define shopid3 0)
(define teleport-hiphog #f)
(define already-teleported? #f)

(define waitdie #f)
(define waitdi 0)

(define temp-skullgemamount 0.0)
(define temp-health 0.0)
(define temp-orbs 0.0)

(define amountofdeaths 0) ;This is a saved variable inside RLsettings.ini.
(define menu-value 0.0)





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    (defun runs-every-frame ()

;Checks to see if there's a new game, then sets you to look-around camera with the main menu.
(when ;is new game started?
(and 
*target*
(= tutorial-completed? #f)
(= (pause-allowed?) #t)
(= (-> (level-get-target-inside *level*) name) 'prison)
)
  (set! wait-start #t)
  (set! (-> *target* fact health) 8.0)
  (play-task (game-task fortress-escape) 'debug #f)
  (set! act-before1 0)
  (set! act-before2 0)
  (set! act-before3 0)
  (set! act-before4 0)
  (set! act-before5 0)
  (set! act-before6 0)
  (set! act-before7 0)
  (set! act-before8 0)
  (set! act-before9 0)
  (set! act-before10 0)
  (set! act-before11 0)
  (set! act-before12 0)
  (set! display-run #f)
  (set! p-yellow-gun #f)
  (set! p-blue-gun #f)
  (set! p-dark-gun #f)
  (set! p-upgrade-red #f)
  (set! p-upgrade-ammo #f)
  (set! p-upgrade-damage #f)
  (when (= (-> *game-info* total-trys) 0)
    (set! (-> *game-info* total-trys) 7)
  )
  (auto-save-user)

  (when (= (-> *game-info* total-trys) 7) ;Buffed Vehicles
    (set! menu-value 200.0)
    (set! mod-s "Buffed Vehicles and Speed")
  )
  (when (= (-> *game-info* total-trys) 8) ;Double shot
    (set! menu-value 210.0)
    (set! mod-s "Double Shot")
  )
  (when (= (-> *game-info* total-trys) 9)
    (set! menu-value 220.0)
    (set! mod-s "")
  )
  (when (= (-> *game-info* total-trys) 10)
    (set! menu-value 230.0)
  )
  (when (= (-> *game-info* total-trys) 11)
    (set! menu-value 240.0)
  )
  (when (= (-> *game-info* total-trys) 12)
    (set! menu-value 250.0)
  )
)


(when (and (>= (-> *game-info* fuel) menu-value)(= in-menu #t)(cpad-pressed? 0 r1))
  (-! (-> *game-info* fuel) menu-value)
  (when (= (-> *game-info* total-trys) 9)
    (set! (-> *game-info* total-trys) 10)
    (auto-save-user)
  )
  (when (= (-> *game-info* total-trys) 8)
    (set! (-> *game-info* total-trys) 9)
    (auto-save-user)
  )
  (when (= (-> *game-info* total-trys) 7)
    (set! (-> *game-info* total-trys) 8)
    (set! menu-value 210.0)
    (set! mod-s "Double Shot")
    (auto-save-user)
  )
)


;This is the randomizer. It teleports the player to a random stage in a certain act, and then sets their task.
    (when (= act1-1 #t)
      (let (
        (level-pick (rand-vu-int-range 1 8))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! roll-shopitems #t)
        (when (= level-pick act-before1)
            (set! level-pick (rand-vu-int-range 1 8))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (set! print-stage 1)
          (when (and (= level-pick 1)(!= act-before1 1))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-tower) 'debug #f)
            (set! act-before1 1)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before1 2))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-start"))
            (play-task (game-task atoll-water) 'debug #f)
            (set! act-before1 2)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before1 3))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-krew-delivery) 'debug #f)
            (set! act-before1 4)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before1 4))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-start"))
            (play-task (game-task atoll-sig) 'debug #f)
            (set! act-before1 5)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before1 5))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-rescue) 'debug #f)
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (set! act-before1 7)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before1 6))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-battle"))
            (play-task (game-task atoll-battle) 'debug #f)
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (set! act-before1 8)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before1 7))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-krew-collection) 'debug #f)
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node palace-boss-resolution))
            (set! act-before1 10)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(!= act-before1 8))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-keira-delivery) 'debug #f)
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node drill-eggs-resolution))
            (set! act-before1 12)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 13)(!= act-before1 13))
            (send-event *target* 'continue (get-continue-by-name *game-info* "mountain-start"))
            (play-task (game-task mountain-lens) 'debug #f)
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (task-node-close! (game-task-node palace-boss-resolution))
            (set! act-before1 12)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! act-act 1)
        )
    )
    (when (= act1-2 #t)
      (let (
        (level-pick (rand-vu-int-range 1 13))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (when (= level-pick act-before1)
            (set! level-pick (rand-vu-int-range 1 13))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(!= act-before1 1))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-tower) 'debug #f)
            (set! act-before2 1)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before1 2))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-start"))
            (play-task (game-task atoll-water) 'debug #f)
            (set! act-before2 2)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before1 3))
            (send-event *target* 'continue (get-continue-by-name *game-info* "fordumpa-start"))
            (play-task (game-task fortress-dump) 'debug #f)
            (set! act-before2 3)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before1 4))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-krew-delivery) 'debug #f)
            (set! act-before2 4)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before1 5))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-start"))
            (play-task (game-task atoll-sig) 'debug #f)
            (set! act-before2 5)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before1 6))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewer-start"))
            (play-task (game-task sewer-enemy) 'debug #f)
            (set! act-before2 6)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before1 7))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-rescue) 'debug #f)
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (set! act-before2 7)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(!= act-before1 8))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-battle"))
            (play-task (game-task atoll-battle) 'debug #f)
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (set! act-before2 8)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(!= act-before1 9))
            (send-event *target* 'continue (get-continue-by-name *game-info* "drill1-warp"))
            (play-task (game-task drill-eggs) 'debug #f)
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (task-node-close! (game-task-node atoll-battle-resolution))
            (task-node-close! (game-task-node mountain-collection-resolution))
            (set! act-before2 9)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 10)(!= act-before1 10))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-krew-collection) 'debug #f)
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node palace-boss-resolution))
            (set! act-before2 10)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 11)(!= act-before1 11))
            (send-event *target* 'continue (get-continue-by-name *game-info* "vinroom-start"))
            (play-task (game-task city-power) 'debug #f)
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (set! act-before2 11)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 12)(!= act-before1 12))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-keira-delivery) 'debug #f)
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node drill-eggs-resolution))
            (set! act-before2 12)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 13)(!= act-before1 13))
            (send-event *target* 'continue (get-continue-by-name *game-info* "mountain-start"))
            (play-task (game-task mountain-lens) 'debug #f)
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (task-node-close! (game-task-node palace-boss-resolution))
            (set! act-before2 12)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )

    (when (= act1-3 #t)
      (let (
        (level-pick (rand-vu-int-range 1 13))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (when (= level-pick (or act-before1 act-before2))
            (set! level-pick (rand-vu-int-range 1 13))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before1 1)(!= act-before2 1)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-tower) 'debug #f)
            (set! act-before3 1)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(and (!= act-before1 2)(!= act-before2 2)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-start"))
            (play-task (game-task atoll-water) 'debug #f)
            (set! act-before3 2)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(and (!= act-before1 3)(!= act-before2 3)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "fordumpa-start"))
            (play-task (game-task fortress-dump) 'debug #f)
            (set! act-before3 3)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(and (!= act-before1 4)(!= act-before2 4)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-krew-delivery) 'debug #f)
            (set! act-before3 4)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(and (!= act-before1 5)(!= act-before2 5)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-start"))
            (play-task (game-task atoll-sig) 'debug #f)
            (set! act-before3 5)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(and (!= act-before1 6)(!= act-before2 6)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewer-start"))
            (play-task (game-task sewer-enemy) 'debug #f)
            (set! act-before3 6)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(and (!= act-before1 7)(!= act-before2 7)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-rescue) 'debug #f)
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (set! act-before3 7)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(and (!= act-before1 8)(!= act-before2 8)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-battle"))
            (play-task (game-task atoll-battle) 'debug #f)
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (set! act-before3 8)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(and (!= act-before1 9)(!= act-before2 9)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "drill1-warp"))
            (play-task (game-task drill-eggs) 'debug #f)
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (task-node-close! (game-task-node atoll-battle-resolution))
            (task-node-close! (game-task-node mountain-collection-resolution))
            (set! act-before3 9)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 10)(and (!= act-before1 10)(!= act-before2 10)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-krew-collection) 'debug #f)
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node palace-boss-resolution))
            (set! act-before3 10)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 11)(and (!= act-before1 11)(!= act-before2 11)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "vinroom-start"))
            (play-task (game-task city-power) 'debug #f)
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (set! act-before3 11)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 12)(and (!= act-before1 12)(!= act-before2 12)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-keira-delivery) 'debug #f)
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node drill-eggs-resolution))
            (set! act-before3 12)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 13)(and (!= act-before1 13)(!= act-before2 13)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "mountain-start"))
            (play-task (game-task mountain-lens) 'debug #f)
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (task-node-close! (game-task-node palace-boss-resolution))
            (set! act-before3 12)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )

    (when (= act1-4 #t)
      (let (
        (level-pick 1)
        )
          (when (= level-pick 1)
            (send-event *target* 'continue (get-continue-by-name *game-info* "palcab-start"))
            (play-task (game-task palace-cable) 'debug #f)
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
          )
        )
        (set! act1-4 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! (-> *game-info* skill) temp-orbs)
        (set! wait-for-ingame #t)
        
    )    
    (when (= act1-5 #t)
      (let (
        (level-pick 1)
        (gp-0 (-> *game-info* features))
        )
          (when (= level-pick 1)
            (send-event *target* 'continue (get-continue-by-name *game-info* "palroof-boss"))
            (play-task (game-task palace-boss) 'debug #f)
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
          )
        
        (set! act1-5 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! (-> *game-info* skill) temp-orbs)
        (set! wait-for-ingame #t)
        (when (and 
        (not (logtest? gp-0 (game-feature gun-red)))
        (not (logtest? gp-0 (game-feature gun-yellow)))
        (not (logtest? gp-0 (game-feature gun-blue)))
        (not (logtest? gp-0 (game-feature gun-dark)))
        )
        (logior! gp-0 (game-feature gun-red))
        (set! give-gunred? #t)
        )
      )
    )    


;-------------------------ACT 2------------------------------
(when (= act2-1 #t)
      (let (
        (level-pick (rand-vu-int-range 1 11))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! roll-shopitems #t)
        (set! print-stage 1)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 11))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (set! act-act 2)
          (when (and (= level-pick 1)(!= act-before4 1))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-enemy) 'debug #f)
            (set! act-before4 1)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before4 2))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forest-start"))
            (play-task (game-task forest-scouts) 'debug #f)
            (set! act-before4 2)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before4 3))
            (send-event *target* 'continue (get-continue-by-name *game-info* "dig1-start"))
            (play-task (game-task dig-knock-down) 'debug #f)
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before4 3)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before4 4))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-grenade) 'debug #f)
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before4 4)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before4 5))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-start"))
            (play-task (game-task city-port-run) 'debug #f)
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node drill-ship-resolution))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before4 5)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before4 6))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-meet-brutter) 'debug #f)
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before4 6)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before4 7))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewer-start"))
            (play-task (game-task sewer-board) 'debug #f)
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (task-node-close! (game-task-node drill-ship-resolution))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before4 7)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(!= act-before4 8))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctymarkb-tanker"))
            (play-task (game-task city-intercept-tanker) 'debug #f)
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node city-port-run-post-win))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before4 8)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(!= act-before4 9))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-shuttle) 'debug #f)
            (set! act-before4 9)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 10)(!= act-before4 10))
            (send-event *target* 'continue (get-continue-by-name *game-info* "dig3-start"))
            (play-task (game-task dig-find-totem) 'debug #f)
            (task-node-close! (game-task-node city-port-run-post-win))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (task-node-close! (game-task-node forest-hunt-resolution))
            (set! act-before4 10)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 11)(!= act-before4 11))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-destroy-guard-vehicles) 'debug #f)
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before4 11)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )
  (when (= act2-2 #t)
      (let (
        (level-pick (rand-vu-int-range 1 11))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 11))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before4 1)(!= act-before5 1)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-enemy) 'debug #f)
            (set! act-before5 1)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before4 2))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forest-start"))
            (play-task (game-task forest-scouts) 'debug #f)
            (set! act-before5 2)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before4 3))
            (send-event *target* 'continue (get-continue-by-name *game-info* "dig1-start"))
            (play-task (game-task dig-knock-down) 'debug #f)
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before5 3)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before4 4))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-grenade) 'debug #f)
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before5 4)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before4 5))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-start"))
            (play-task (game-task city-port-run) 'debug #f)
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node drill-ship-resolution))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before5 5)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before4 6))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-meet-brutter) 'debug #f)
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before5 6)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before4 7))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewer-start"))
            (play-task (game-task sewer-board) 'debug #f)
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (task-node-close! (game-task-node drill-ship-resolution))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before5 7)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(!= act-before4 8))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctymarkb-tanker"))
            (play-task (game-task city-intercept-tanker) 'debug #f)
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node city-port-run-post-win))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before5 8)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(!= act-before4 9))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-shuttle) 'debug #f)
            (set! act-before5 9)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 10)(!= act-before4 10))
            (send-event *target* 'continue (get-continue-by-name *game-info* "dig3-start"))
            (play-task (game-task dig-find-totem) 'debug #f)
            (task-node-close! (game-task-node city-port-run-post-win))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (task-node-close! (game-task-node forest-hunt-resolution))
            (set! act-before5 10)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 11)(!= act-before4 11))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-destroy-guard-vehicles) 'debug #f)
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before5 11)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )

    (when (= act2-3 #t)
      (let (
        (level-pick (rand-vu-int-range 1 11))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 11))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before4 1)(!= act-before5 1)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-enemy) 'debug #f)
            (set! act-before6 1)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(and (!= act-before4 2)(!= act-before5 2)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forest-start"))
            (play-task (game-task forest-scouts) 'debug #f)
            (set! act-before6 2)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(and (!= act-before4 3)(!= act-before5 3)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "dig1-start"))
            (play-task (game-task dig-knock-down) 'debug #f)
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before6 3)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(and (!= act-before4 4)(!= act-before5 4)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-grenade) 'debug #f)
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before6 4)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(and (!= act-before4 5)(!= act-before5 5)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-start"))
            (play-task (game-task city-port-run) 'debug #f)
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node drill-ship-resolution))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before6 5)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(and (!= act-before4 6)(!= act-before5 6)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-meet-brutter) 'debug #f)
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before6 6)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(and (!= act-before4 7)(!= act-before5 7)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewer-start"))
            (play-task (game-task sewer-board) 'debug #f)
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (task-node-close! (game-task-node drill-ship-resolution))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before6 7)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(and (!= act-before4 8)(!= act-before5 8)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctymarkb-tanker"))
            (play-task (game-task city-intercept-tanker) 'debug #f)
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node city-port-run-post-win))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before6 8)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(and (!= act-before4 9)(!= act-before5 9)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-shuttle) 'debug #f)
            (set! act-before6 9)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 10)(and (!= act-before4 10)(!= act-before5 10)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "dig3-start"))
            (play-task (game-task dig-find-totem) 'debug #f)
            (task-node-close! (game-task-node city-port-run-post-win))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (task-node-close! (game-task-node forest-hunt-resolution))
            (set! act-before6 10)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 11)(and (!= act-before4 11)(!= act-before5 11)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-escort-kid) 'debug #f)
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before6 11)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )

    (when (= act2-4 #t)
      (let (
        (level-pick 1)
        )
          (when (= level-pick 1)
            (send-event *target* 'continue (get-continue-by-name *game-info* "tomb-boulder-pre"))
            (play-task (game-task tomb-water) 'debug #f)
            (task-node-close! (game-task-node tomb-poles-poles2))
          )
        )
        (set! act2-4 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! (-> *game-info* skill) temp-orbs)
        (set! wait-for-ingame #t)
        
    )    
    (when (= act2-5 #t)
      (let (
        (level-pick 1)
        (gp-0 (-> *game-info* features))
        )
          (when (= level-pick 1)
            (send-event *target* 'continue (get-continue-by-name *game-info* "tombboss-start"))
            (play-task (game-task tomb-boss) 'debug #f)
          )
        
        (set! act2-5 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! (-> *game-info* skill) temp-orbs)
        (set! wait-for-ingame #t)
        (when (and 
        (not (logtest? gp-0 (game-feature gun-red)))
        (not (logtest? gp-0 (game-feature gun-yellow)))
        (not (logtest? gp-0 (game-feature gun-blue)))
        (not (logtest? gp-0 (game-feature gun-dark)))
        )
        (logior! gp-0 (game-feature gun-red))
        (set! give-gunred? #t)
        )
      )
    )    

;------------------------------------ACT 3----------------------------------------
(when (= act3-1 #t)
      (let (
        (level-pick (rand-vu-int-range 1 9))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! print-stage 1)
        (set! roll-shopitems #t)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 9))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (set! act-act 3)
          (when (and (= level-pick 1)(and (!= act-before7 1)(!= act-before7 1)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewesc-start"))
            (play-task (game-task sewer-escort) 'debug #f)
            (set! act-before7 1)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before7 2))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-stop-bomb-bots) 'debug #f)
            (set! act-before7 2)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before7 3))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-drop) 'debug #f)
            (set! act-before7 3)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before7 4))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctymarka-brutter"))
            (play-task (game-task city-save-lurkers) 'debug #f)
            (set! act-before7 4)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before7 5))
            (send-event *target* 'continue (get-continue-by-name *game-info* "under-start"))
            (play-task (game-task under-sig) 'debug #f)
            (set! act-before7 5)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before7 6))
            (send-event *target* 'continue (get-continue-by-name *game-info* "stadium-blimp-intro"))
            (play-task (game-task city-defend-stadium) 'debug #f)
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (set! act-before7 6)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before7 7))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forest-tree"))
            (play-task (game-task forest-protect) 'debug #f)
            (set! act-before7 7)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(!= act-before7 8))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-mech) 'debug #f)
            (set! act-before7 8)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(!= act-before7 9))
            (send-event *target* 'continue (get-continue-by-name *game-info* "drill-start"))
            (play-task (game-task drill-mech) 'debug #f)
            (set! act-before7 9)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )


(when (= act3-2 #t)
      (let (
        (level-pick (rand-vu-int-range 1 9))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 9))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before7 1)(!= act-before7 1)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewesc-start"))
            (play-task (game-task sewer-escort) 'debug #f)
            (set! act-before8 1)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before7 2))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-stop-bomb-bots) 'debug #f)
            (set! act-before8 2)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before7 3))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-drop) 'debug #f)
            (set! act-before8 3)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before7 4))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctymarka-brutter"))
            (play-task (game-task city-save-lurkers) 'debug #f)
            (set! act-before8 4)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before7 5))
            (send-event *target* 'continue (get-continue-by-name *game-info* "under-start"))
            (play-task (game-task under-sig) 'debug #f)
            (set! act-before8 5)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before7 6))
            (send-event *target* 'continue (get-continue-by-name *game-info* "stadium-blimp-intro"))
            (play-task (game-task city-defend-stadium) 'debug #f)
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (set! act-before8 6)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before7 7))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forest-tree"))
            (play-task (game-task forest-protect) 'debug #f)
            (set! act-before8 7)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(!= act-before7 8))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctymarkb-tanker"))
            (play-task (game-task city-intercept-tanker) 'debug #f)
            (set! act-before8 8)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(!= act-before7 9))
            (send-event *target* 'continue (get-continue-by-name *game-info* "drill-start"))
            (play-task (game-task drill-mech) 'debug #f)
            (set! act-before8 9)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )

    (when (= act3-3 #t)
      (let (
        (level-pick (rand-vu-int-range 1 9))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 9))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before8 1)(!= act-before7 1)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewesc-start"))
            (play-task (game-task sewer-escort) 'debug #f)
            (set! act-before8 1)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(and (!= act-before8 2)(!= act-before7 2)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-stop-bomb-bots) 'debug #f)
            (set! act-before8 2)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(and (!= act-before8 3)(!= act-before7 3)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-drop) 'debug #f)
            (set! act-before8 3)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(and (!= act-before8 4)(!= act-before7 4)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctymarka-brutter"))
            (play-task (game-task city-save-lurkers) 'debug #f)
            (set! act-before8 4)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(and (!= act-before8 5)(!= act-before7 5)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "under-start"))
            (play-task (game-task under-sig) 'debug #f)
            (set! act-before8 5)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(and (!= act-before8 6)(!= act-before7 6)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "stadium-blimp-intro"))
            (play-task (game-task city-defend-stadium) 'debug #f)
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (set! act-before8 6)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(and (!= act-before8 7)(!= act-before7 7)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forest-tree"))
            (play-task (game-task forest-protect) 'debug #f)
            (set! act-before8 7)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(and (!= act-before8 8)(!= act-before7 8)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-mech) 'debug #f)
            (set! act-before8 8)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(and (!= act-before8 9)(!= act-before7 9)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "drill-start"))
            (play-task (game-task drill-mech) 'debug #f)
            (set! act-before8 9)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )






    (when (= act3-4 #t)
      (let (
        (level-pick 1)
        )
          (when (= level-pick 1)
            (send-event *target* 'continue (get-continue-by-name *game-info* "castle-start"))
            (play-task (game-task castle-break-in) 'debug #f)
            (task-node-close! (game-task-node tomb-poles-poles2))
          )
        )
        (set! act3-4 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! (-> *game-info* skill) temp-orbs)
        
    )    
    (when (= act3-5 #t)
      (let (
        (level-pick 1)
        (gp-0 (-> *game-info* features))
        )
          (when (= level-pick 1)
            (send-event *target* 'continue (get-continue-by-name *game-info* "casboss-start"))
            (play-task (game-task castle-boss) 'debug #f)
          )
        
        (set! act3-5 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! (-> *game-info* skill) temp-orbs)
        (set! wait-for-ingame #t)
        (when (and 
        (not (logtest? gp-0 (game-feature gun-red)))
        (not (logtest? gp-0 (game-feature gun-yellow)))
        (not (logtest? gp-0 (game-feature gun-blue)))
        (not (logtest? gp-0 (game-feature gun-dark)))
        )
        (logior! gp-0 (game-feature gun-red))
        (set! give-gunred? #t)
        )
      )
    )    


;(logior! (-> *game-info* secrets) (game-secrets invulnerable))
;Checks to see if task got completed, then processes the next area.

(when (= level-completed? #t)
  (+! act-stage 1)
  (+! print-stage 1)
  (+! (-> *game-info* buzzer-total) 1.0)
  (when (> print-stage 5)
    (set! print-stage 1)
  )
  (set! temp-skullgemamount (-> *game-info* gem))
  (set! temp-health (-> *target* fact health))
  (set! temp-orbs (-> *game-info* skill))
    (when (= (-> *game-info* buzzer-total) 1.0)
      (set! act1-1 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 2.0)(= level-completed? #t))
      (set! act1-2 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 3.0)(= level-completed? #t))
      (set! act1-3 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 4.0)(= level-completed? #t))
      (set! act1-4 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 5.0)(= level-completed? #t))
      (set! act1-5 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 6.0)(= level-completed? #t))
      (set! act2-1 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 7.0)(= level-completed? #t))
      (set! act2-2 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 8.0)(= level-completed? #t))
      (set! act2-3 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 9.0)(= level-completed? #t))
      (set! act2-4 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 10.0)(= level-completed? #t))
      (set! act2-5 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 11.0)(= level-completed? #t))
      (set! act3-1 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 12.0)(= level-completed? #t))
      (set! act3-2 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 13.0)(= level-completed? #t))
      (set! act3-3 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 14.0)(= level-completed? #t))
      (set! act3-4 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 15.0)(= level-completed? #t))
      (set! act3-5 #t)
      (set! level-completed? #f)
    )
  (set! level-completed? #f)
  (set! print-stage (the int (-> *game-info* buzzer-total)))
)

;wait for the in-game to not get the infinite complete mission glitch

(when (and (= in-game? #f)(= wait-for-ingame #t))
  (+! waiting 1)
  (when (= waiting 120)
    (set! in-game? #t)
    (set! waiting 0)
    (set! wait-for-ingame #f)
    (when (> act-stage 1)
      (set! reward-orbs #t)
    )
  )
)

(when (= reward-orbs #t)
  (when (= (-> *target* fact health) 8.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 10.0 15.0))
    )
    (when (= (-> *target* fact health) 7.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 7.0 15.0))
    )
    (when (= (-> *target* fact health) 6.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 6.0 10.0))
    )
    (when (= (-> *target* fact health) 5.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 3.0 7.0))
    )
    (when (= (-> *target* fact health) 4.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 1.0 7.0))
    )
    (when (= (-> *target* fact health) 3.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 1.0 3.0))
    )
    (when (= (-> *target* fact health) 2.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 1.0 2.0))
    )
    (when (= (-> *target* fact health) 1.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 1.0 4.0))
    )
    (set! reward-orbs #f)
)

(when 
(and 
(= avoidc-waitb #t)
(not *scene-player*)
)
(+! avoidc-wait 1)
  (when (= avoidc-wait 1)
    (send-event *target* 'change-mode 'normal)
    (set! pause-menu-blocked? #t)
  )
  (when (= avoidc-wait 120)
    (set! avoidc-waitb #f)
    (set! avoidc-wait 0)
    (set! level-completed? #t)
    (set! pause-menu-blocked? #f)
  )
)


;camera menu
(when (= camera-locked #t) ;sets camera params
  (send-event *target* 'draw #f)
  (set-setting-by-param *setting-control* 'mode-name 'cam-eye 0 0)
  (persist-with-delay *setting-control* 'gun (seconds 0.5) 'gun #f 0.0 0)
  (process-grab? *target* #f)
)

(when (= wait-exit #t)
  (+! waite-frame 1)
  (remove-setting-by-arg0 *setting-control* 'mode-name)
  (when (= waite-frame 1)
    (set! camera-locked #f)
    (set! in-menu #f)
  )
  (when (= waite-frame 5)
    (set! pause-menu-blocked? #f)
    (send-event *target* 'draw #t)
    (process-release? *target*)
  )
  (when (= waite-frame 10)
    (set! wait-exit #f)
    (set! waite-frame 0)
    (set! act-stage 0)
    (set! (-> *game-info* buzzer-total) 0.0)
    (set! print-stage 0)
    (set! level-completed? #t)
    (set! display-run #t)
  )
)
(when (= wait-start #t)
  (+! waits-frame 1)
  (when (= waits-frame 1)
    (set! tutorial-completed? #t)
  )
  (when (> waits-frame 60)
    (set! in-menu #t)
    (set! wait-start #f)
    (set! waits-frame 0)
    (set! camera-locked #t)
    (set! pause-menu-blocked? #t)
  )
)

(when (= waitenter #t)
  (+! waitenteri 1)
  (when (= waitenteri 60)
    (set! tutorial-completed? #f)
    (set! waitenteri 0)
    (set! waitenter #f)
  )
)

(when 
(and
(= pause-menu-blocked? #t)
(= (pause-allowed?) #t)
(not *scene-player*)
)
  (set-master-mode 'game)
)



;Death params
(when 
(and
(= (pause-allowed?) #t)
(= (-> *target* fact health) 0.0)
*target*
)
  (set! waitdie #t)
  (set! in-game? #f)
  (set! avoidc-waitb #f)
  (set! avoidc-wait 0)
)




(when (and (= waitdie #t)(= (pause-allowed?) #t))
  (+! waitdi 1)
  (when (= waitdi 1)
    (+! (-> *game-info* task-deaths) 1)
    (set! temp-skullgemamount (-> *game-info* gem))
    (+! (-> *game-info* fuel) (-> *game-info* gem))
  )
  (when (= waitdi 30)
    (send-event *target* 'continue (get-continue-by-name *game-info* "prison-start"))
    (set! waitdi 0)
    (set! waitdie #f)
  )
)

;buy shop GUNS
;(logior! (-> *game-info* features) (game-feature gun-red))
;(logior! (-> *game-info* features) (game-feature gun-yellow))
;(logior! (-> *game-info* features) (game-feature gun-blue))
;(logior! (-> *game-info* features) (game-feature gun-dark))
;Take away shop GUNS
;(logclear! (-> *game-info* features) (game-feature gun-red))
;(logclear! (-> *game-info* features) (game-feature gun-yellow))
;(logclear! (-> *game-info* features) (game-feature gun-blue))
;(logclear! (-> *game-info* features) (game-feature gun-dark))


;When jak doesnt have his purchased items, give him the items!

(when (and (= p-yellow-gun #t)(not (logtest? (-> *game-info* features) (game-feature gun-yellow))))
  (logior! (-> *game-info* features) (game-feature gun-yellow))
)
(when (and (= p-blue-gun #t)(not (logtest? (-> *game-info* features) (game-feature gun-blue))))
  (logior! (-> *game-info* features) (game-feature gun-blue))
)
(when (and (= p-dark-gun #t)(not (logtest? (-> *game-info* features) (game-feature gun-dark))))
  (logior! (-> *game-info* features) (game-feature gun-dark))
)
(when (and (= p-upgrade-ammo #t)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-ammo))))
  (logior! (-> *game-info* features) (game-feature gun-upgrade-ammo))
)
(when (and (= p-upgrade-red #t)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-speed))))
  (logior! (-> *game-info* features) (game-feature gun-upgrade-speed))
)
(when (and (= p-upgrade-damage #t)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-damage))))
  (logior! (-> *game-info* features) (game-feature gun-upgrade-damage))
)


#| All of these are set to IDs

Here are the shop IDs
1 Yellow Gun (25 orbs)
2 Blue Gun (32 orbs)
3 Peacemaker (40 orbs)
4 Upgrade Red speed (10 orbs)
5 Upgrade Ammo (15 orbs)
6 Upgrade Damage (20 orbs)
7 Full HP (7 orbs)
8 Buffed Vehicles

|#

(when (= roll-shopitems #t)
  (let (
    (shoproll1 (rand-vu-int-range 1 (-> *game-info* total-trys)))
    (shoproll2 (rand-vu-int-range 1 (-> *game-info* total-trys)))
    (shoproll3 (rand-vu-int-range 1 (-> *game-info* total-trys)))
  )
  (when (or (= shoproll1 shoproll2)(= shoproll1 shoproll3)(= shoproll2 shoproll3)) ;if the pick is the same on two options, reroll
    (set! shoproll1 (rand-vu-int-range 1 (-> *game-info* total-trys)))
    (set! shoproll2 (rand-vu-int-range 1 (-> *game-info* total-trys)))
    (set! shoproll3 (rand-vu-int-range 1 (-> *game-info* total-trys)))
  )

  (set! already-teleported? #f)

  (when (= shoproll1 1)
    (set! shopitem1 "Yellow Gun (25 orbs)")
    (set! shopid1 1)
  )
  (when (= shoproll2 1)
    (set! shopitem2 "Yellow Gun (25 orbs)")
    (set! shopid2 1)
  )
  (when (= shoproll3 1)
    (set! shopitem3 "Yellow Gun (25 orbs)")
    (set! shopid3 1)
  )
  (when (= shoproll1 2)
    (set! shopitem1 "Blue Gun (32 orbs)")
    (set! shopid1 2)
  )
  (when (= shoproll2 2)
    (set! shopitem2 "Blue Gun (32 orbs)")
    (set! shopid2 2)
  )
  (when (= shoproll3 2)
    (set! shopitem3 "Blue Gun (32 orbs)")
    (set! shopid3 2)
  )
  (when (= shoproll1 3)
    (set! shopitem1 "Peacemaker (40 orbs)")
    (set! shopid1 3)
  )
  (when (= shoproll2 3)
    (set! shopitem2 "Peacemaker (40 orbs)")
    (set! shopid2 3)
  )
  (when (= shoproll3 3)
    (set! shopitem3 "Peacemaker (40 orbs)")
    (set! shopid3 3)
  )
  (when (= shoproll1 4)
    (set! shopitem1 "Scattergun Rate of Fire (10 orbs)")
    (set! shopid1 4)
  )
  (when (= shoproll2 4)
    (set! shopitem2 "Scattergun Rate of Fire (10 orbs)")
    (set! shopid2 4)
  )
  (when (= shoproll3 4)
    (set! shopitem3 "Scattergun Rate of Fire (10 orbs)")
    (set! shopid3 4)
  )
  (when (= shoproll1 5)
    (set! shopitem1 "Upgrade Ammo (15 orbs)")
    (set! shopid1 5)
  )
  (when (= shoproll2 5)
    (set! shopitem2 "Upgrade Ammo (15 orbs)")
    (set! shopid2 5)
  )
  (when (= shoproll3 5)
    (set! shopitem3 "Upgrade Ammo (15 orbs)")
    (set! shopid3 5)
  )
  (when (= shoproll1 6)
    (set! shopitem1 "Upgrade Damage x2 (20 orbs)")
    (set! shopid1 6)
  )
  (when (= shoproll2 6)
    (set! shopitem2 "Upgrade Damage x2 (20 orbs)")
    (set! shopid2 6)
  )
  (when (= shoproll3 6)
    (set! shopitem3 "Upgrade Damage x2 (20 orbs)")
    (set! shopid3 6)
  )
  (when (= shoproll1 7)
    (set! shopitem1 "Full HP (8 orbs)")
    (set! shopid1 7)
  )
  (when (= shoproll2 7)
    (set! shopitem2 "Full HP (8 orbs)")
    (set! shopid2 7)
  )
  (when (= shoproll3 7)
    (set! shopitem3 "Full HP (8 orbs)")
    (set! shopid3 7)
  )
  (when (= shoproll1 8)
    (set! shopitem1 "Buffed Vehicles (32 orbs) (Applies in next level)")
    (set! shopid1 8)
  )
  (when (= shoproll2 8)
    (set! shopitem2 "Buffed Vehicles (32 orbs) (Applies in next level)")
    (set! shopid2 8)
  )
  (when (= shoproll3 8)
    (set! shopitem3 "Buffed Vehicles (32 orbs) (Applies in next level)")
    (set! shopid3 8)
  )
  (when (= shoproll1 9)
    (set! shopitem1 "Double Shot (25 orbs)")
    (set! shopid1 9)
  )
  (when (= shoproll2 9)
    (set! shopitem2 "Double Shot (25 orbs)")
    (set! shopid2 9)
  )
  (when (= shoproll3 9)
    (set! shopitem3 "Double Shot (25 orbs)")
    (set! shopid3 9)
  )
  (when (and (!= shoproll1 shoproll2)(!= shoproll1 shoproll3)(!= shoproll2 shoproll3)) ;if the pick is NOT the same on two options, stop rolling.
    (set! roll-shopitems #f)
  )
)


)


(when (and (cpad-pressed? 0 r3)(= in-menu2 #f)(= (-> (level-get-target-inside *level*) name) 'hiphog))
  (set! in-menu2wait #t)
)

(when (and (cpad-pressed? 0 r3)(= in-menu2 #t)(= (-> (level-get-target-inside *level*) name) 'hiphog))
  (set! in-menu2wait2 #t)
)

(when (and (= in-menu2 #f)(= (-> (level-get-target-inside *level*) name) 'hiphog))
  (set! popup-shop #t)
)

(when (!= (-> (level-get-target-inside *level*) name) 'hiphog)
  (set! popup-shop #f)
)

(when (= in-menu2wait #t)
  (+! in-menu2waiti 1)
  (when (= in-menu2waiti 1)
    (send-event *target* 'draw #f)
    (set-vector! (-> *target* control trans) (meters -99.0494) (meters 30.853) (meters 1287.0468) 1.0) ;teleports jak behind bar
  )
  (when (= in-menu2waiti 20)
    (set! in-menu2 #t)
    (set! (-> *target* cam-user-mode) 'fixed)
    (set-setting-by-param *setting-control* 'mode-name 'cam-really-fixed 0 0)
    (send-event *camera* 'teleport-to-vector-start-string (new 'static 'vector :x (meters -90.0494) :y (meters 13.853) :z (meters 1303.0468)))
  )
  (when (= in-menu2waiti 65)
    (set! in-menu2waiti 0)
    (set! in-menu2wait #f)
    (set-vector! (-> *target* control trans) (meters -77.5494) (meters 15.853) (meters 1309.0468) 1.0) ;teleports jak away from talking to npcs
  )
)

;(meters -90.0494) (meters 25.853) (meters 1303.0468) ;cam pos for shop

(when (= in-menu2wait2 #t)
  (+! in-menu2wait2i 1)
  (when (= in-menu2wait2i 1)
    (remove-setting-by-arg0 *setting-control* 'mode-name)
    (send-event *target* 'draw #t)
    (process-release? *target*)
    (set-vector! (-> *target* control trans) (meters -96.0494) (meters 10.853) (meters 1293.0468) 1.0) ;teleports jak in front of bar
    (set! in-menu2 #f)
  )
  (when (= in-menu2wait2i 60)
    (set! in-menu2wait2i 0)
    (set! in-menu2wait2 #f)
  )
)

;controls for in-menu2

(when (and (= in-menu2 #t)(cpad-pressed? 0 right))
  (+! menu-slot 1)
  (when (>= menu-slot 3)
    (set! menu-slot 0)
  )
)

(when (and (= in-menu2 #t)(cpad-pressed? 0 left))
  (-! menu-slot 1)
  (when (< menu-slot 0)
    (set! menu-slot 2)
  )
)

(when (and (= in-menu2 #t)(cpad-pressed? 0 x))
    (when (and (= menu-slot 0)(not (logtest? (-> *game-info* features) (game-feature gun-yellow)))(>= (-> *game-info* skill) 25.0)(= shopid1 1))
      (set! p-yellow-gun #t)
      (-! (-> *game-info* skill) 25.0)
      (set! shopitem1 "(Out of Stock)")
    )
    (when (and (= menu-slot 1)(not (logtest? (-> *game-info* features) (game-feature gun-yellow)))(>= (-> *game-info* skill) 25.0)(= shopid3 1))
      (set! p-yellow-gun #t)
      (-! (-> *game-info* skill) 25.0)
      (set! shopitem3 "(Out of Stock)")
    )
    (when (and (= menu-slot 2)(not (logtest? (-> *game-info* features) (game-feature gun-yellow)))(>= (-> *game-info* skill) 25.0)(= shopid2 1))
      (set! p-yellow-gun #t)
      (-! (-> *game-info* skill) 25.0)
      (set! shopitem2 "(Out of Stock)")
    )
    (when (and (= menu-slot 0)(not (logtest? (-> *game-info* features) (game-feature gun-blue)))(>= (-> *game-info* skill) 32.0)(= shopid1 2))
      (set! p-blue-gun #t)
      (-! (-> *game-info* skill) 32.0)
      (set! shopitem1 "(Out of Stock)")
    )
    (when (and (= menu-slot 1)(not (logtest? (-> *game-info* features) (game-feature gun-blue)))(>= (-> *game-info* skill) 32.0)(= shopid3 2))
      (set! p-blue-gun #t)
      (-! (-> *game-info* skill) 32.0)
      (set! shopitem3 "(Out of Stock)")
    )
    (when (and (= menu-slot 2)(not (logtest? (-> *game-info* features) (game-feature gun-blue)))(>= (-> *game-info* skill) 32.0)(= shopid2 2))
      (set! p-blue-gun #t)
      (-! (-> *game-info* skill) 32.0)
      (set! shopitem2 "(Out of Stock)")
    )
    (when (and (= menu-slot 0)(not (logtest? (-> *game-info* features) (game-feature gun-dark)))(>= (-> *game-info* skill) 40.0)(= shopid1 3))
      (set! p-dark-gun #t)
      (-! (-> *game-info* skill) 40.0)
      (set! shopitem1 "(Out of Stock)")
    )
    (when (and (= menu-slot 1)(not (logtest? (-> *game-info* features) (game-feature gun-dark)))(>= (-> *game-info* skill) 40.0)(= shopid3 3))
      (set! p-dark-gun #t)
      (-! (-> *game-info* skill) 40.0)
      (set! shopitem3 "(Out of Stock)")
    )
    (when (and (= menu-slot 2)(not (logtest? (-> *game-info* features) (game-feature gun-dark)))(>= (-> *game-info* skill) 40.0)(= shopid2 3))
      (set! p-dark-gun #t)
      (-! (-> *game-info* skill) 40.0)
      (set! shopitem2 "(Out of Stock)")
    )
    (when (and (= menu-slot 0)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-speed)))(>= (-> *game-info* skill) 10.0)(= shopid1 4))
      (set! p-upgrade-red #t)
      (-! (-> *game-info* skill) 10.0)
      (set! shopitem1 "(Out of Stock)")
    )
    (when (and (= menu-slot 1)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-speed)))(>= (-> *game-info* skill) 10.0)(= shopid3 4))
      (set! p-upgrade-red #t)
      (-! (-> *game-info* skill) 10.0)
      (set! shopitem3 "(Out of Stock)")
    )
    (when (and (= menu-slot 2)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-speed)))(>= (-> *game-info* skill) 10.0)(= shopid2 4))
      (set! p-upgrade-red #t)
      (-! (-> *game-info* skill) 10.0)
      (set! shopitem2 "(Out of Stock)")
    )
    (when (and (= menu-slot 0)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-ammo)))(>= (-> *game-info* skill) 15.0)(= shopid1 5))
      (set! p-upgrade-ammo #t)
      (-! (-> *game-info* skill) 15.0)
      (set! shopitem1 "(Out of Stock)")
    )
    (when (and (= menu-slot 1)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-ammo)))(>= (-> *game-info* skill) 15.0)(= shopid3 5))
      (set! p-upgrade-ammo #t)
      (-! (-> *game-info* skill) 15.0)
      (set! shopitem3 "(Out of Stock)")
    )
    (when (and (= menu-slot 2)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-ammo)))(>= (-> *game-info* skill) 15.0)(= shopid2 5))
      (set! p-upgrade-ammo #t)
      (-! (-> *game-info* skill) 15.0)
      (set! shopitem2 "(Out of Stock)")
    )
    (when (and (= menu-slot 0)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-damage)))(>= (-> *game-info* skill) 20.0)(= shopid1 6))
      (set! p-upgrade-damage #t)
      (-! (-> *game-info* skill) 20.0)
      (set! shopitem1 "(Out of Stock)")
    )
    (when (and (= menu-slot 1)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-damage)))(>= (-> *game-info* skill) 20.0)(= shopid3 6))
      (set! p-upgrade-damage #t)
      (-! (-> *game-info* skill) 20.0)
      (set! shopitem3 "(Out of Stock)")
    )
    (when (and (= menu-slot 2)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-damage)))(>= (-> *game-info* skill) 20.0)(= shopid2 6))
      (set! p-upgrade-damage #t)
      (-! (-> *game-info* skill) 20.0)
      (set! shopitem2 "(Out of Stock)")
    )
    (when (and (= menu-slot 0)(!= (-> *target* fact health) 8.0)(>= (-> *game-info* skill) 8.0)(= shopid1 7))
      (-! (-> *game-info* skill) 8.0)
      (set! (-> *target* fact health) 8.0)
    )
    (when (and (= menu-slot 1)(!= (-> *target* fact health) 8.0)(>= (-> *game-info* skill) 8.0)(= shopid3 7))
      (-! (-> *game-info* skill) 8.0)
      (set! (-> *target* fact health) 8.0)
    )
    (when (and (= menu-slot 2)(!= (-> *target* fact health) 8.0)(>= (-> *game-info* skill) 8.0)(= shopid2 7))
      (-! (-> *game-info* skill) 8.0)
      (set! (-> *target* fact health) 8.0)
    )
    (when (and (= menu-slot 0)(= p-upgrade-vehicles #f)(>= (-> *game-info* skill) 32.0)(= shopid1 8))
      (-! (-> *game-info* skill) 32.0)
      (set! shopitem1 "(Out of Stock)")
      (set! p-upgrade-vehicles #t)
    )
    (when (and (= menu-slot 1)(= p-upgrade-vehicles #f)(>= (-> *game-info* skill) 32.0)(= shopid3 8))
      (-! (-> *game-info* skill) 32.0)
      (set! shopitem3 "(Out of Stock)")
      (set! p-upgrade-vehicles #t)
    )
    (when (and (= menu-slot 2)(= p-upgrade-vehicles #f)(>= (-> *game-info* skill) 32.0)(= shopid2 8))
      (-! (-> *game-info* skill) 32.0)
      (set! shopitem2 "(Out of Stock)")
      (set! p-upgrade-vehicles #t)
    )
    (when (and (= menu-slot 0)(= p-double-shot #f)(>= (-> *game-info* skill) 25.0)(= shopid1 9))
      (-! (-> *game-info* skill) 25.0)
      (set! shopitem1 "(Out of Stock)")
      (set! p-double-shot #t)
    )
    (when (and (= menu-slot 1)(= p-double-shot #f)(>= (-> *game-info* skill) 25.0)(= shopid3 9))
      (-! (-> *game-info* skill) 25.0)
      (set! shopitem3 "(Out of Stock)")
      (set! p-double-shot #t)
    )
    (when (and (= menu-slot 2)(= p-double-shot #f)(>= (-> *game-info* skill) 25.0)(= shopid2 9))
      (-! (-> *game-info* skill) 25.0)
      (set! shopitem2 "(Out of Stock)")
      (set! p-double-shot #t)
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(when (and (= popup-shop #t)(= (paused?) #f)(= in-menu2 #f)(not *scene-player*))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>R3<COLOR_WHITE>:<COLOR_GREEN> Access Shop"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= already-teleported? #f)(!= (-> (level-get-target-inside *level*) name) 'hiphog)(= act-stage 4))
  (set! teleport-hiphog #t)
)

(when (and (= teleport-hiphog #t)(= already-teleported? #f)(cpad-pressed? 0 r3))
  (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
  (set! already-teleported? #t)
)

(when (and (= teleport-hiphog #t)(= already-teleported? #f))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>R3<COLOR_WHITE>:<COLOR_GREEN> Teleport to <COLOR_PINK>Hip Hog Shop!"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= menu-slot 0)(= in-menu2 #t))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
                                                                     <COLOR_GREEN>~S                                                      <COLOR_WHITE>~S
    ~%
    ~%                                                                            <COLOR_WHITE>~S
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%"
    shopitem1
    shopitem2
    shopitem3
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 125 55 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= menu-slot 1)(= in-menu2 #t))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
                                                                     <COLOR_WHITE>~S                                                      <COLOR_WHITE>~S
    ~%
    ~%                                                                            <COLOR_GREEN>~S
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%"
    shopitem1
    shopitem2
    shopitem3
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 125 55 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= menu-slot 2)(= in-menu2 #t))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
                                                                     <COLOR_WHITE>~S                                                      <COLOR_GREEN>~S
    ~%
    ~%                                                                            <COLOR_WHITE>~S
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%"
    shopitem1
    shopitem2
    shopitem3
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 125 55 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

;menu params
(when (and (= in-menu #t)(= (paused?) #f)(= (-> *game-info* task-deaths) 0)(not (cpad-pressed? 0 x)))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
    <COLOR_WHITE>Welcome to<COLOR_RED> Roguelike Jak II (demo)<COLOR_WHITE>!
    ~%<COLOR_BLUE>  Made by Kraken
    ~%<COLOR_WHITE>Project is about 40 percent done, still have lots of crashes. Playable to Krew Boss.
    ~%
    <COLOR_WHITE>~%Continuing from the Easter Egg in HeroMode+:
    ~%The mysterious villain has dominated the world across vast dimensions, and
    ~%the Jak time loop is completely wrecked.
    ~%
    ~%But there is still hope.
    ~%
    ~%When you <COLOR_GREEN>start your run<COLOR_WHITE>, you will be transported to the dimensions where Jak
    ~%no longer exists, and you must take his place by completing the missions, and fulfilling the prophecy.
    ~%Grab orbs, Skull Gems, and get as powerful as you can! Every level gives you orbs based on how well you do!
    ~%Jak dying means <COLOR_RED>perma-death<COLOR_WHITE>!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_BLUE>X<COLOR_GREEN> to start the run!"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 55 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-menu #t)(= (paused?) #f)(= (-> *game-info* task-deaths) 1)(not (cpad-pressed? 0 x)))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
    <COLOR_WHITE>Welcome to<COLOR_RED> Roguelike Jak II<COLOR_WHITE>!
    ~%<COLOR_BLUE>  Made by Kraken
    ~%
    ~%
    <COLOR_RED>~%Wow! You died! How punishing---
    ~%<COLOR_WHITE>The good thing here is that what you do in your run, is saved in this room.
    ~%Like the <COLOR_YELLOW>~d Skull Gems<COLOR_WHITE> you acquired.
    ~%They're all saved in additive to your OTHER currency.
    ~%Your Tokens.
    ~%
    ~%You can use these to purchase items to put in the <COLOR_GREEN>shop at the <COLOR_PINK>HipHog!
    ~%<COLOR_WHITE>The shop has <COLOR_GREEN>3 random items<COLOR_WHITE> that refresh after every boss, or every new run.
    ~%You can press <COLOR_RED>R1<COLOR_WHITE> to purchase your next item to add to the shop for 200 Tokens.
    ~%
    ~%<COLOR_GREEN>Press <COLOR_BLUE>X<COLOR_GREEN> to start the run!"
    (the int temp-skullgemamount)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-menu #t)(= (paused?) #f)(>= (-> *game-info* task-deaths) 2)(not (cpad-pressed? 0 x)))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
    <COLOR_WHITE>Welcome to<COLOR_RED> Roguelike Jak II<COLOR_WHITE>!
    ~%<COLOR_BLUE>  Made by Kraken
    ~%
    ~%
    <COLOR_RED>~%You Died!
    ~%<COLOR_WHITE>Skulls Gems turned into Tokens:
    ~%<COLOR_YELLOW>~d
    ~%<COLOR_WHITE>Progress:
    ~%<COLOR_GREEN> Act ~d <COLOR_YELLOW>Stage ~d
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> for <COLOR_YELLOW>~d tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_BLUE>X<COLOR_GREEN> to start the run!"
    (the int temp-skullgemamount)
    act-act
    print-stage
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-menu #t)(cpad-pressed? 0 x))
  (set! tutorial-completed? #t)
  (set! wait-exit #t)
  (set! in-menu #f)
)

#| shop
(when (and (= in-menu #t)(cpad-hold? 0 r1))

)
|#
(when (and (= act-act 1)(= (-> *game-info* buzzer-total) 1.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN><<COLOR_WHITE>---<---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 1)(= (-> *game-info* buzzer-total) 2.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN><---<<COLOR_WHITE>---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 1)(= (-> *game-info* buzzer-total) 3.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN><---<---<<COLOR_WHITE>---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 1)(= (-> *game-info* buzzer-total) 4.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN><---<---<---<<COLOR_WHITE>---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 1)(= (-> *game-info* buzzer-total) 5.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN><---<---<---<---<COLOR_RED>(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
;----------------------------SECOND ACT-----------------------------
(when (and (= act-act 2)(= (-> *game-info* buzzer-total) 6.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE><<COLOR_WHITE>---<---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 2)(= (-> *game-info* buzzer-total) 7.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE><---<<COLOR_WHITE>---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 2)(= (-> *game-info* buzzer-total) 8.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE><---<---<<COLOR_WHITE>---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 2)(= (-> *game-info* buzzer-total) 9.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE><---<---<---<<COLOR_WHITE>---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 2)(= (-> *game-info* buzzer-total) 10.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE><---<---<---<---<COLOR_RED>(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

;----------------------------THIRD ACT-----------------------------
(when (and (= act-act 3)(= (-> *game-info* buzzer-total) 11.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED><<COLOR_WHITE>---<---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 3)(= (-> *game-info* buzzer-total) 12.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED><---<<COLOR_WHITE>---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 3)(= (-> *game-info* buzzer-total) 13.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED><---<---<<COLOR_WHITE>---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 3)(= (-> *game-info* buzzer-total) 14.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED><---<---<---<<COLOR_WHITE>---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 3)(= (-> *game-info* buzzer-total) 15.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED><---<---<---<---<COLOR_RED>(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

;----------------------------DARK ACT-----------------------------
(when (and (= act-act 4)(= (-> *game-info* buzzer-total) 16.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK><<COLOR_WHITE>---<---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 4)(= (-> *game-info* buzzer-total) 17.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK><---<<COLOR_WHITE>---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 4)(= (-> *game-info* buzzer-total) 18.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK><---<---<<COLOR_WHITE>---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 4)(= (-> *game-info* buzzer-total) 19.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK><---<---<---<<COLOR_WHITE>---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 4)(= (-> *game-info* buzzer-total) 20.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK><---<---<---<---<COLOR_PINK>(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)





;<<<<<<<<<<<<<<<<<<<<<<<<<<<<This area is meant for fixes with specific missions<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
;(send-event proc 'target-turret-get-off 90)

;Immediate mission completion without going back to mission giver.

(when 
(and 
(task-node-closed? (game-task-node sewer-enemy-blow-up-turrets))
(not (task-node-closed? (game-task-node sewer-enemy-resolution)))
)
  (task-node-close! (game-task-node sewer-enemy-resolution))
)

(when 
(and 
(task-node-closed? (game-task-node city-krew-collection-collection))
(not (task-node-closed? (game-task-node city-krew-collection-resolution)))
)
  (task-node-close! (game-task-node city-krew-collection-resolution))
)






;MODS

(when (= dshotwait-r #t)
  (+! dshotcount-r 1)
  (when (= dshotcount-r 3)
    (someone-fire-red *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    (set! dshotcount-r 0)
    (set! dshotwait-r #f)
  )
)
(when (= dshotwait-y #t)
  (+! dshotcount-y 1)
  (when (= dshotcount-y 6)
    (someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    (set! dshotcount-y 0)
    (set! dshotwait-y #f)
  )
)
(when (= dshotwait-b #t)
  (+! dshotcount-b 1)
  (when (= dshotcount-b 2)
    (someone-fire-blue *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    (set! dshotcount-b 0)
    (set! dshotwait-b #f)
  )
)
(when (= dshotwait-d #t)
  (+! dshotcount-d 1)
  (when (= dshotcount-d 6)
    (someone-fire-dark *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    (set! dshotcount-d 0)
    (set! dshotwait-d #f)
  )
)



#|

    (set! traffic-metalheads? #t) ;turns on traffic lwideb'
    ;^ WHEN THIS IS TRUE ^  v THEN ALL OF THESE PARAMETERS CAN BE SET v
    (send-event *traffic-manager* 'set-target-level 5.0) ;sets guards and metalheads to fight

    (send-event *traffic-manager* 'set-target-level 100.0) ;sets metalheads to overrun everything

    (send-event *traffic-manager* 'set-target-level 10.0) ;sets guards only


|#

    ;(set! (-> (level-get-target-inside *level*) mood-func)update-mood-nest)


      (if *show-input-display* 
        (input-display-on)
        (input-display-off)
        )
      
      (none)
      )

    (defun runs-on-gem-pickup ()
      ;; Code here runs on any scout fly pickup

      (none)
      )

    (defun runs-on-task-close ()
    
      (set! level-completed? #t)
      (none)
      )

    (defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
      (let* ((from-vent? #f))
        ;; Code here runs as soon as you pickup ANY eco

        (case eco-type
          (((pickup-type eco-yellow))      
            ;; Code here runs as soon as you pickup yellow eco

            )
          (((pickup-type eco-red))      
            ;; Code here runs as soon as you pickup red eco

            )
          (((pickup-type eco-blue))      
            ;; Code here runs as soon as you pickup blue eco

            )

          (((pickup-type eco-green))      
            ;; Code here runs as soon as you pickup big green eco 

            )
          )
        
        (when from-vent?
          ;; Code here runs only if the eco was picked up from a vent

          )
        )

      (none)
      )

    (defun runs-on-jak-spawn ()
      ;; Code here runs every time jak spawns (loading a file new game or death)   

      (none)
      )

    (defun runs-on-jak-death ((death-event symbol))
      (case death-event
        (('dying)
          ;; Code here runs immediately every time jak dies, before any death animation or death cutscene
          (set! waitdie #t)
          )
        (('blackout)
          ;; Code here runs after jak dies (and any death cutscene finishes), during the blackout before he spawns

          )
        )
      
      (none)
      )


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; deprecated function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| these are no longer recommended/supported however we include them anyways to not break anyones mods.
    |#
