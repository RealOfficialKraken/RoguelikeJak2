    ;;-*-Lisp-*-
    (in-package goal)

    ;; name: mod-custom-code.gc
    ;; name in dgo: mod-custom-code
    ;; dgos: TODO


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; What is self file for.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| self file contains function defenitions that are pre placed in the mod base,
    so if you place custom code inside of these functions, it will exectue based on
    the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
    to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
    an orb |#











#| TODO:
--------------------------------------------------------------------------------------------------

- Make more purchaseable items to put in runs in the main menu
- Can refresh shop for free, but curse will tick up by one
- Finish explosive shot
- color-floor makes the level completely dark in retail-mode
- Make stage 4-4 a custom mission stage (nest area, but you have to eliminate 60 metalheads before your task proceeds. Disable cutscene trigger for opening nest)
- Make ending for dark eco act
- Make more rng elements in missions alone, like teleporting entities. This will be important to not cause burnout
vv--optional--vv
- Make cursed bosses, alongside making vanilla bosses harder
- Level 9 curse will shoot guard projectiles from all directions towards jak, at rng chance.
- Put timer modifiers on certain missions that arent time based already. It'll say something like "dimensional destruction imminent, evacuate immediately"


After most of these, the mod will be completed and I can get on with my life

--------------------------------------------------------------------------------------------------

ITEM IDEAS (7 items left, all cursed items)

- 4 Leaf Clover (ticks up luck stat by 2, chance to evade attack with i-frames)
- Big Bomb (On cooldown, proj impacts create 30 grenades at set vectors with 0 timer)
- Big Punch (Jaks punches futher, and knocks back enemies tenfold)
- Drinkable Green Eco (Heal 3 hp per stage)
- Bounce Shot
- Yellow Sage Shot (Fires yellow shots rain down-forward from above jak)
- Red Sage Shot (works as a barrier, in front of jak a bunch of red shots come out in one direction.)
- Blue Sage Shot (Bunch of blue shot facing upwards shoot from underneath jak)

--------------------------------------------------------------------------------------------------

|#
    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Begin function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

(define matt-str (new 'global 'string 2048 (the-as string #f)))
(define *pc-encoded-matt-str* (new 'global 'string 2048 (the-as string #f)))


;traffic manipulations
(define traffic-metalheads? #f)

;randomizer vars
(define act1-1 #f)
(define act1-2 #f)
(define act1-3 #f)
(define act1-4 #f)
(define act1-5 #f)
(define act1-shop #f)
(define act2-1 #f)
(define act2-2 #f)
(define act2-3 #f)
(define act2-4 #f)
(define act2-5 #f)
(define act2-shop #f)
(define act3-1 #f)
(define act3-2 #f)
(define act3-3 #f)
(define act3-4 #f)
(define act3-5 #f)
(define act3-shop #f)
(define act4-1 #f)
(define act4-2 #f)
(define act4-3 #f)
(define act4-4 #f)
(define act4-5 #f)
(define act-before1 0)
(define act-before2 0)
(define act-before3 0)
(define act-before4 0)
(define act-before5 0)
(define act-before6 0)
(define act-before7 0)
(define act-before8 0)
(define act-before9 0)
(define act-before10 0)
(define act-before11 0)
(define act-before12 0)
(define act-before13 0)
(define act-before14 0)
(define act-before15 0)

(define vin-talk 0)

(define reward-orbs #f)
(define wait-for-ingame #f)
(define wait-extra-for-ingame #f)
(define waiting 0)
(define wait-vintalk #f)
(define wait-vini 0)

(define display-death-screen #f)
(define vin-spawned? #f)
(define waitspawn 0)
(define wait-vinspawn #f)
(define rnginfo #f)

(define save-slot 0)
(define curse-save 100000000)
(define curse-level 0)

(define run-in-progress #f)

(define give-gunred? #f)

(define item-refresh #f)

;menu funct
(define wait-tutorial #f)
(define tutoriali 0)
(define tutorial-completed? #f)
(define in-menu #f)
(define pause-menu-blocked? #f)
(define camera-locked #f)
(define camera-unlocked #f)
(define wait-start #f)
(define waits-frame 0)
(define wait-exit #f)
(define waite-frame 0)
(define waitenter #f)
(define waitenteri 0)
(define quicksave #f)
(define display-run #f)
(define print-stage 0)
(define current-level "")
(define mod-s "")
(define purchase-amount 0)
(define shopid1 0)
(define shopid2 0)
(define shopid3 0)
(define shop-tutorial #f)
(define teleport-hiphog #f)
(define already-teleported? #f)
(define teleport-back? #f)
(define gt-i 0.0)
(define gf-i 0.0)
(define vin-shop #f)
(define wait-loading #f)
(define load-w 0)
(define teleport-wait #f)
(define teleport-w 0)
(define win-lose #f)
(define popup-intro #f)
(define wait-pulloutgun #f)
(define wait-pi 0)
(define grab-method #f)
(define wait-cb #f)
(define w-cb 0)

(define vin-shop-s "")

(define p-explode-shot #f)



(define ohshit #f)
(define ohshiti 0)
(define waitdie-tutorial #f)
(define waitdiei 0)
(define dark-mode #f)

(define intro-wait #f)
(define intro-waiti 0)

(define save-w 0)






  (deftype vin-npc (process-taskable)
  ()
  )


(defskelgroup skel-vin vin vin-lod0-jg vin-idle-ja
              ((vin-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 10)
              :shadow vin-shadow-mg
              :origin-joint-index 3
              )


(defmethod init-art! ((this vin-npc))
  "@see [[initialize-skeleton]]"
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-vin" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (none)
  )

(defbehavior vin-npc-init-by-other vin-npc ((vec vector))
  (stack-size-set! (-> self main-thread) 512)
  (process-taskable-method-31 self)
  (logior! (-> self mask) (process-mask actor-pause))
  (vector-copy! (-> self root trans) vec)
  (quaternion-identity! (-> self root quat))
  (vector-identity! (-> self root scale))
  (set! (-> self task) (new 'process 'game-task-control (game-task-actor vin-vinroom)))
  (init-art! self)
  (process-taskable-method-32 self)
  (set! (-> self event-hook) (-> (method-of-object self idle) event))
  (go (method-of-object self hide))
  (none)
  )





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    (defun runs-every-frame ()

(when (and 
(!= (-> *progress-state* which-slot) -1)
(!= (-> *progress-state* which-slot) save-slot)
)
  (set! save-slot (-> *progress-state* which-slot))
)

(when (= autosave-delayed #t)
  (+! save-w 1)
  (when (= save-w 120)
    (set! save-w 0)
    (set! autosave-delayed #f)
    (when 
    (or
      (= save-slot 0)
      (= save-slot 1)
      (= save-slot 2)
      (= save-slot 3)
    )
      (auto-save-command 'save 0 save-slot *default-pool* #f)
    )
  )
)

;Checks to see if there's a new game, then sets you to look-around camera with the main menu.
(when ;is new game started?
(and 
*target*
(= tutorial-completed? #f)
(= (pause-allowed?) #t)
(= (-> *game-info* total-trys) 0)
(<= (-> *game-info* karma) 1.0)
(= (-> (level-get-target-inside *level*) name) 'prison)
)
  (set! wait-tutorial #t)
  (set! (-> *game-info* total-trys) 4)
)

;Checks to see if there's a new game, then sets you to look-around camera with the main menu.
(when ;is new game started?
(and 
*target*
(= tutorial-completed? #f)
(= (pause-allowed?) #t)
(>= (-> *game-info* karma) 1.0)
(= (-> (level-get-target-inside *level*) name) 'consiteb)
)
  (set! (-> *target* fact health) 8.0)
  (play-task (game-task drill-eggs) 'debug #f)
  (set! vin-talk 4)
  (set! wait-start #t)
  (set! act-before1 0)
  (set! act-before2 0)
  (set! act-before3 0)
  (set! act-before4 0)
  (set! act-before5 0)
  (set! act-before6 0)
  (set! act-before7 0)
  (set! act-before8 0)
  (set! act-before9 0)
  (set! act-before10 0)
  (set! act-before11 0)
  (set! act-before12 0)
  (set! display-run #f)
  (set! p-yellow-gun #f)
  (set! p-blue-gun #f)
  (set! p-dark-gun #f)
  (set! p-upgrade-red #f)
  (set! p-upgrade-ammo #f)
  (set! p-upgrade-damage #f)
  (set! p-double-shot #f)
  (set! p-upgrade-vehicles #f)
  (set! wait-tutorial #f)
  (set! tutoriali 0)
  (set! tin-game? #f)
  (set! tin-game-wait #f)
  (set! tin-wait 0)
  (set! item-tracker 1)
  (set! post-item-display? #t)
  (set! item-display? #f)
  (set! teleport-hiphog #f)
  (set! already-teleported? #f)
  (set! teleport-back? #f)
  (set! teleport-w 0)
  (set! teleport-wait #f)
  (set! traffic-metalheads? #f)
  (set! boss-cursed #f)
  (set! please-reward #f)
  (set! rngspeed (meters 5))
  (set! rngspeed2 (meters 5))
  (set! rngspeed3 (meters 5))
  (set! rngspeed4 (meters 5))
  (set! (-> *game-info* buzzer-total) 0.0)
  (set! (-> *mood-control* overide-weather-flag) #f)
  (set! (-> *time-of-day-context* overide-enable) #f)
  (set! (-> *game-info* task-deaths) 1000000000)
  (set! (-> *game-info* continue-deaths) 1000000000)
  (set! autosave-delayed #t)
  (when (= (-> *game-info* total-trys) 4)
    (set! menu-value 35.0)
    (set! mod-s "Peacemaker")
  )
  (when (= (-> *game-info* total-trys) 5)
    (set! menu-value 60.0)
    (set! mod-s "Upgrade Ammo")
  )
  (when (= (-> *game-info* total-trys) 6)
    (set! menu-value 120.0)
    (set! mod-s "Upgrade Damage")
  )
  (when (= (-> *game-info* total-trys) 7)
    (set! menu-value 150.0)
    (set! mod-s "Upgraded Vehicles and Speed")
  )
  (when (= (-> *game-info* total-trys) 8)
    (set! menu-value 250.0)
    (set! mod-s "Double Shot")
  )
  (when (= (-> *game-info* total-trys) 9)
    (set! menu-value 999999.0)
    (set! mod-s "(More coming soon!)")
  )
)

(when (and (>= (-> *game-info* fuel) menu-value)(= vin-shop #t)(cpad-pressed? 0 r1))
  (-! (-> *game-info* fuel) menu-value)
  (when (= (-> *game-info* total-trys) 8)
    (set! (-> *game-info* total-trys) 9)
    (set! menu-value 999999.0)
    (set! mod-s "(More coming soon)")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 7)
    (set! (-> *game-info* total-trys) 8)
    (set! menu-value 250.0)
    (set! mod-s "Double Shot")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 6)
    (set! (-> *game-info* total-trys) 7)
    (set! menu-value 150.0)
    (set! mod-s "Upgraded Vehicles and Speed")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 5)
    (set! (-> *game-info* total-trys) 6)
    (set! menu-value 120.0)
    (set! mod-s "Upgrade Damage (x2)")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 4)
    (set! (-> *game-info* total-trys) 5)
    (set! menu-value 60.0)
    (set! mod-s "Upgrade Ammo")
    (set! autosave-delayed #t)
  )
)


(when (= wait-loading #t)
  (+! load-w 1)
  (when (= load-w 300)
    (script-eval '(want-load 'vinroom 'consiteb))
    (set! load-w 0)
    (set! wait-loading #f)
  )
)

(when ;tutorial for tp jak out of fortress
(and 
(= wait-tutorial #t)
(= (pause-allowed?) #t)
(or (= (-> (level-get-target-inside *level*) name) 'prison) (= (-> (level-get-target-inside *level*) name) 'forexita))
(= (paused?) #f)
)
  (+! tutoriali 1)
  (when (= tutoriali 1600)
    (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
    (set! ohshit #t)
    (set! (-> *game-info* gem) 99999.0)
    (set! tutoriali 0)
    (set! wait-tutorial #f)
    (set! (-> *game-info* total-deaths) 0)
  )
)

#|
(when ;closed off to come back to later on
(and 
(= in-hub? #t)
(= vin-spawned? #f)
*target*
(= (pause-allowed?) #t)
(= (paused?) #f)
)
  (set! wait-vinspawn #t)
)
|#

(when (= wait-vinspawn #t)
  (+! waitspawn 1)
  (when (= waitspawn 300)
  (process-spawn vin-npc (new 'static 'vector :x (meters 755.3596) :y (meters 18.15) :z (meters 907.9631)))
  (set! vin-spawned? #t)
  (set! waitspawn 0)
  (set! wait-vinspawn #f)
  )
)


(when ;when the easter egg happens from HM+
(and 
(= ohshit #t)
(= (pause-allowed?) #t)
(= (paused?) #f)
)
  (+! ohshiti 1)
  (when (= ohshiti 240)
    (play-sound-file "goal_src/jak2/pc/snd/ohshit.mp3" 100)
  )
  (when (= ohshiti 241)
    (set! (-> *mood-control* overide-weather-flag) #t)
  )
  (when (and (>= ohshiti 242)(< gt-i 0.9))
      (+! gt-i 0.01)
      (set! (-> *mood-control* overide cloud) gt-i)
    )
    (when (and (>= ohshiti 421)(< gf-i 0.9))
      (set! gf-i 0.01)
      (set! (-> *mood-control* overide fog) gf-i)
    )
  (when (> (-> *game-info* gem) 121.0)
  (-! (-> *game-info* gem) 121.0)
  )
  (when (= (-> *game-info* gem) 53.0)
    (set! (-> *game-info* gem) 0.0)
  )
  (when (= ohshiti 1200)
    (play-sound-file "goal_src/jak2/pc/snd/endofworld.mp3" 100)
    (set! (-> *game-info* gem) 0.0)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color x) 1.9921)
      (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color y) 1.9921)
      (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color z) 1.9921)
      (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color w) 2.0)
      (set! traffic-metalheads? #t)
      (send-event *traffic-manager* 'set-guard-target-level 100)
      (set! gt-i 0.0)
      (set! gf-i 0.0)
  )
  (when (>= ohshiti 1204)
    (send-event (ppointer->process *time-of-day*) 'change 'ratio 240.0) 
  (set! (-> *time-of-day-context* overide-enable) #f)
  (set! (-> *mood-control* overide-weather-flag) #t)
  (set! (-> *mood-control* overide fog) 1.0)
  (set! (-> *mood-control* overide cloud) 1.0)
  (set! (-> (level-get-target-inside *level*) mood-func)update-mood-nest)
  )
  ;Death params for tutorial
(when 
(or 
(and
(= (pause-allowed?) #t)
(= (-> *target* fact health) 0.0)
*target*
)
(= ohshiti 3290)
)
  (set! waitdie-tutorial #t)
  (set! traffic-metalheads? #f)
  (set! ohshit #f)
  (set! ohshiti 0)
  (send-event (ppointer->process *time-of-day*) 'change 'ratio 1.0) 
  (set! (-> *target* fact health) 8.0)
)
)

(when (= waitdie-tutorial #t)
  (+! waitdiei 1)
  (when (= waitdiei 1)
    (send-event *target* 'continue (get-continue-by-name *game-info* "consite-airlock"))
  )
  (when (= waitdiei 120)
    (play-task (game-task drill-eggs) 'debug #f)
    (script-eval '(want-load 'vinroom 'consiteb))
    (set! in-dialogue? #t)
    (set! log-sec 0)
    (set! log-id 1)
    (set! camera-locked #t)
    (set! di-s "Oh god... I was wrong, I was so so very wrong!")
    (set! di-s2 "") 
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= waitdiei 200)
    (set! waitdiei 0)
    (set! waitdie-tutorial #f)
  )
)


;(script-eval '(want-load 'vinroom 'consiteb))
;(script-eval '(want-display 'vinroom))
;(script-eval '(want-display 'consiteb))
;(set-vector! vin-npc 744.2 11.0 871.5 1.0)


(when 
(and 
(= in-dialogue? #t)
(not (cpad-hold? 0 x))
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>~S~%~S~%~S~%~S~%~%<COLOR_GREEN>Ok"
    di-s
    di-s2
    di-s3
    di-s4
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 300 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(= in-dialogue? #t)
(cpad-hold? 0 x)
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>~S~%~S~%~S~%~S~%~%<COLOR_YELLOW>Ok"
    di-s
    di-s2
    di-s3
    di-s4
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 300 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(= in-dialogue? #t)
(not (cpad-hold? 0 x))
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------~%~%~%~%~%~%~%~%~%-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    di-s
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 285 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(= in-dialogue? #t)
(cpad-hold? 0 x)
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW>-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------~%~%~%~%~%~%~%~%~%-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    di-s
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 285 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)



;self is the randomizer. It teleports the player to a random stage in a certain act, and then sets their task.
    (when (= act1-1 #t)
      (let (
        (level-pick (rand-vu-int-range 1 8))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! roll-shopitems #t)
        (when (= level-pick act-before1)
            (set! level-pick (rand-vu-int-range 1 8))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (set! print-stage 1)
          (when (and (= level-pick 1)(!= act-before1 1))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-tower) 'debug #f)
            (set! act-before1 1)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before1 2))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-start"))
            (play-task (game-task atoll-water) 'debug #f)
            (set! act-before1 2)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before1 3))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-krew-delivery) 'debug #f)
            (set! act-before1 4)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before1 5))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-rescue) 'debug #f)
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (set! act-before1 7)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before1 6))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-battle"))
            (play-task (game-task atoll-battle) 'debug #f)
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (set! act-before1 8)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before1 7))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-krew-collection) 'debug #f)
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node palace-boss-resolution))
            (set! act-before1 9)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before1 8))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-keira-delivery) 'debug #f)
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node drill-eggs-resolution))
            (set! act-before1 12)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (set! wait-extra-for-ingame #t)
          (set! act-act 1)
        )
    )
    (when (= act1-2 #t)
      (let (
        (level-pick (rand-vu-int-range 1 13))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! print-stage 2)
        (when (= level-pick act-before1)
            (set! level-pick (rand-vu-int-range 1 12))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(!= act-before1 1))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-tower) 'debug #f)
            (set! act-before2 1)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before1 2))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-start"))
            (play-task (game-task atoll-water) 'debug #f)
            (set! act-before2 2)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before1 3))
            (send-event *target* 'continue (get-continue-by-name *game-info* "fordumpa-start"))
            (play-task (game-task fortress-dump) 'debug #f)
            (set! act-before2 3)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before1 4))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-krew-delivery) 'debug #f)
            (set! act-before2 4)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before1 5))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-start"))
            (play-task (game-task atoll-sig) 'debug #f)
            (set! act-before2 5)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before1 6))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewer-start"))
            (play-task (game-task sewer-enemy) 'debug #f)
            (set! act-before2 6)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before1 7))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-rescue) 'debug #f)
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (set! act-before2 7)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(!= act-before1 8))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-battle"))
            (play-task (game-task atoll-battle) 'debug #f)
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (set! act-before2 8)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(!= act-before1 9))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-krew-collection) 'debug #f)
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node palace-boss-resolution))
            (set! act-before2 9)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 10)(!= act-before1 10))
            (send-event *target* 'continue (get-continue-by-name *game-info* "vinroom-start"))
            (play-task (game-task city-power) 'debug #f)
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (set! act-before2 10)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 11)(!= act-before1 11))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-keira-delivery) 'debug #f)
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node drill-eggs-resolution))
            (set! act-before2 11)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 12)(!= act-before1 12))
            (send-event *target* 'continue (get-continue-by-name *game-info* "mountain-start"))
            (play-task (game-task mountain-lens) 'debug #f)
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (task-node-close! (game-task-node palace-boss-resolution))
            (set! act-before2 12)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )

    (when (= act1-3 #t)
      (let (
        (level-pick (rand-vu-int-range 1 12))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! print-stage 3)
        (when (= level-pick (or act-before1 act-before2))
            (set! level-pick (rand-vu-int-range 1 12))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before1 1)(!= act-before2 1)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-tower) 'debug #f)
            (set! act-before3 1)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(and (!= act-before1 2)(!= act-before2 2)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-start"))
            (play-task (game-task atoll-water) 'debug #f)
            (set! act-before3 2)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(and (!= act-before1 3)(!= act-before2 3)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "fordumpa-start"))
            (play-task (game-task fortress-dump) 'debug #f)
            (set! act-before3 3)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(and (!= act-before1 4)(!= act-before2 4)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-krew-delivery) 'debug #f)
            (set! act-before3 4)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(and (!= act-before1 5)(!= act-before2 5)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-start"))
            (play-task (game-task atoll-sig) 'debug #f)
            (set! act-before3 5)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(and (!= act-before1 6)(!= act-before2 6)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewer-start"))
            (play-task (game-task sewer-enemy) 'debug #f)
            (set! act-before3 6)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(and (!= act-before1 7)(!= act-before2 7)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-rescue) 'debug #f)
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (set! act-before3 7)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(and (!= act-before1 8)(!= act-before2 8)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-battle"))
            (play-task (game-task atoll-battle) 'debug #f)
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (set! act-before3 8)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(and (!= act-before1 9)(!= act-before2 9)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-krew-collection) 'debug #f)
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node palace-boss-resolution))
            (set! act-before3 9)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 10)(and (!= act-before1 10)(!= act-before2 10)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "vinroom-start"))
            (play-task (game-task city-power) 'debug #f)
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (set! act-before3 11)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 11)(and (!= act-before1 11)(!= act-before2 11)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-keira-delivery) 'debug #f)
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node drill-eggs-resolution))
            (set! act-before3 11)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 12)(and (!= act-before1 12)(!= act-before2 12)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "mountain-start"))
            (play-task (game-task mountain-lens) 'debug #f)
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (task-node-close! (game-task-node palace-boss-resolution))
            (set! act-before3 12)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )

    (when (= act1-4 #t)
      (let (
        (level-pick 1)
        )
          (when (= level-pick 1)
            (send-event *target* 'continue (get-continue-by-name *game-info* "palcab-start"))
            (play-task (game-task palace-cable) 'debug #f)
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
          )
        )
        (set! print-stage 4)
        (set! act1-4 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! (-> *game-info* skill) temp-orbs)
        (set! wait-for-ingame #t)
        
    )    
    (when (= act1-5 #t)
      (let (
        (level-pick 1)
        (gp-0 (-> *game-info* features))
        )
          (when (= level-pick 1)
            (send-event *target* 'continue (get-continue-by-name *game-info* "palroof-boss"))
            (play-task (game-task palace-boss) 'debug #f)
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
          )
        
        (set! print-stage 5)
        (set! act1-5 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! (-> *game-info* skill) temp-orbs)
        (set! wait-for-ingame #t)
        (set! teleport-hiphog #f)
        (set! teleport-back? #f)
        (set! already-teleported? #f)
        (when (and 
        (not (logtest? gp-0 (game-feature gun-red)))
        (not (logtest? gp-0 (game-feature gun-yellow)))
        (not (logtest? gp-0 (game-feature gun-blue)))
        (not (logtest? gp-0 (game-feature gun-dark)))
        )
        (logior! gp-0 (game-feature gun-red))
        (set! give-gunred? #t)
        )
      )
    )    


;-------------------------ACT 2------------------------------
(when (= act2-1 #t)
      (let (
        (level-pick (rand-vu-int-range 1 11))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! roll-shopitems #t)
        (set! print-stage 1)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 11))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (set! act-act 2)
          (when (and (= level-pick 1)(!= act-before4 1))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-enemy) 'debug #f)
            (set! act-before4 1)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before4 2))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forest-start"))
            (play-task (game-task forest-scouts) 'debug #f)
            (set! act-before4 2)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before4 3))
            (send-event *target* 'continue (get-continue-by-name *game-info* "dig1-start"))
            (play-task (game-task dig-knock-down) 'debug #f)
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before4 3)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before4 4))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-grenade) 'debug #f)
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before4 4)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before4 5))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-start"))
            (play-task (game-task city-port-run) 'debug #f)
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node drill-ship-resolution))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before4 5)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before4 6))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-meet-brutter) 'debug #f)
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before4 6)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before4 7))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewer-start"))
            (play-task (game-task sewer-board) 'debug #f)
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (task-node-close! (game-task-node drill-ship-resolution))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before4 7)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(!= act-before4 8))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctymarkb-tanker"))
            (play-task (game-task city-intercept-tanker) 'debug #f)
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node city-port-run-post-win))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before4 8)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(!= act-before4 9))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-shuttle) 'debug #f)
            (set! act-before4 9)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 10)(!= act-before4 10))
            (send-event *target* 'continue (get-continue-by-name *game-info* "dig3-start"))
            (play-task (game-task dig-find-totem) 'debug #f)
            (task-node-close! (game-task-node city-port-run-post-win))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (task-node-close! (game-task-node forest-hunt-resolution))
            (set! act-before4 10)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 11)(!= act-before4 11))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-destroy-guard-vehicles) 'debug #f)
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before4 11)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) 8.0)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )
  (when (= act2-2 #t)
      (let (
        (level-pick (rand-vu-int-range 1 11))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! print-stage 2)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 11))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before4 1)(!= act-before5 1)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-enemy) 'debug #f)
            (set! act-before5 1)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before4 2))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forest-start"))
            (play-task (game-task forest-scouts) 'debug #f)
            (set! act-before5 2)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before4 3))
            (send-event *target* 'continue (get-continue-by-name *game-info* "dig1-start"))
            (play-task (game-task dig-knock-down) 'debug #f)
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before5 3)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before4 4))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-grenade) 'debug #f)
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before5 4)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before4 5))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-start"))
            (play-task (game-task city-port-run) 'debug #f)
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node drill-ship-resolution))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before5 5)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before4 6))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-meet-brutter) 'debug #f)
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before5 6)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before4 7))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewer-start"))
            (play-task (game-task sewer-board) 'debug #f)
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (task-node-close! (game-task-node drill-ship-resolution))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before5 7)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(!= act-before4 8))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctymarkb-tanker"))
            (play-task (game-task city-intercept-tanker) 'debug #f)
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node city-port-run-post-win))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before5 8)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(!= act-before4 9))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-shuttle) 'debug #f)
            (set! act-before5 9)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 10)(!= act-before4 10))
            (send-event *target* 'continue (get-continue-by-name *game-info* "dig3-start"))
            (play-task (game-task dig-find-totem) 'debug #f)
            (task-node-close! (game-task-node city-port-run-post-win))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (task-node-close! (game-task-node forest-hunt-resolution))
            (set! act-before5 10)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 11)(!= act-before4 11))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-destroy-guard-vehicles) 'debug #f)
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before5 11)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )

    (when (= act2-3 #t)
      (let (
        (level-pick (rand-vu-int-range 1 11))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! print-stage 3)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 11))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before4 1)(!= act-before5 1)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-enemy) 'debug #f)
            (set! act-before6 1)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(and (!= act-before4 2)(!= act-before5 2)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forest-start"))
            (play-task (game-task forest-scouts) 'debug #f)
            (set! act-before6 2)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(and (!= act-before4 3)(!= act-before5 3)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "dig1-start"))
            (play-task (game-task dig-knock-down) 'debug #f)
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before6 3)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(and (!= act-before4 4)(!= act-before5 4)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-grenade) 'debug #f)
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before6 4)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(and (!= act-before4 5)(!= act-before5 5)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-start"))
            (play-task (game-task city-port-run) 'debug #f)
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node drill-ship-resolution))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before6 5)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(and (!= act-before4 6)(!= act-before5 6)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-meet-brutter) 'debug #f)
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before6 6)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(and (!= act-before4 7)(!= act-before5 7)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewer-start"))
            (play-task (game-task sewer-board) 'debug #f)
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (task-node-close! (game-task-node drill-ship-resolution))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before6 7)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(and (!= act-before4 8)(!= act-before5 8)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctymarkb-tanker"))
            (play-task (game-task city-intercept-tanker) 'debug #f)
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node city-port-run-post-win))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before6 8)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(and (!= act-before4 9)(!= act-before5 9)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-shuttle) 'debug #f)
            (set! act-before6 9)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 10)(and (!= act-before4 10)(!= act-before5 10)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "dig3-start"))
            (play-task (game-task dig-find-totem) 'debug #f)
            (task-node-close! (game-task-node city-port-run-post-win))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (task-node-close! (game-task-node forest-hunt-resolution))
            (set! act-before6 10)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 11)(and (!= act-before4 11)(!= act-before5 11)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-escort-kid) 'debug #f)
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before6 11)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )

    (when (= act2-4 #t)
      (let (
        (level-pick 1)
        )
          (set! print-stage 4)
          (when (= level-pick 1)
            (send-event *target* 'continue (get-continue-by-name *game-info* "tomb-boulder-pre"))
            (play-task (game-task tomb-water) 'debug #f)
            (task-node-close! (game-task-node tomb-poles-poles2))
          )
        )
        (set! act2-4 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! (-> *game-info* skill) temp-orbs)
        (set! wait-for-ingame #t)
        
    )    
    (when (= act2-5 #t)
      (let (
        (level-pick 1)
        (gp-0 (-> *game-info* features))
        )
          (when (= level-pick 1)
            (send-event *target* 'continue (get-continue-by-name *game-info* "tombboss-start"))
            (play-task (game-task tomb-boss) 'debug #f)
          )
        
        (set! print-stage 5)
        (set! act2-5 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! (-> *game-info* skill) temp-orbs)
        (set! wait-for-ingame #t)
        (when (and 
        (not (logtest? gp-0 (game-feature gun-red)))
        (not (logtest? gp-0 (game-feature gun-yellow)))
        (not (logtest? gp-0 (game-feature gun-blue)))
        (not (logtest? gp-0 (game-feature gun-dark)))
        )
        (logior! gp-0 (game-feature gun-red))
        (set! give-gunred? #t)
        (set! teleport-hiphog #f)
        (set! teleport-back? #f)
        (set! already-teleported? #f)
        )
      )
    )    

;------------------------------------ACT 3----------------------------------------
(when (= act3-1 #t)
      (let (
        (level-pick (rand-vu-int-range 1 8))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! print-stage 1)
        (set! roll-shopitems #t)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 8))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (set! act-act 3)
          (when (and (= level-pick 1)(and (!= act-before7 1)(!= act-before7 1)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewesc-start"))
            (play-task (game-task sewer-escort) 'debug #f)
            (set! act-before7 1)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before7 2))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-stop-bomb-bots) 'debug #f)
            (set! act-before7 2)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before7 3))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-drop) 'debug #f)
            (set! act-before7 3)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before7 4))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctymarka-brutter"))
            (play-task (game-task city-save-lurkers) 'debug #f)
            (set! act-before7 4)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before7 5))
            (send-event *target* 'continue (get-continue-by-name *game-info* "under-start"))
            (play-task (game-task under-sig) 'debug #f)
            (set! act-before7 5)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before7 6))
            (send-event *target* 'continue (get-continue-by-name *game-info* "stadium-blimp-intro"))
            (play-task (game-task city-defend-stadium) 'debug #f)
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (set! act-before7 6)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before7 7))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forest-tree"))
            (play-task (game-task forest-protect) 'debug #f)
            (set! act-before7 7)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(!= act-before7 8))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-mech) 'debug #f)
            (set! act-before7 8)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) 8.0)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )


(when (= act3-2 #t)
      (let (
        (level-pick (rand-vu-int-range 1 8))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! print-stage 2)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 8))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before7 1)(!= act-before7 1)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewesc-start"))
            (play-task (game-task sewer-escort) 'debug #f)
            (set! act-before8 1)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before7 2))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-stop-bomb-bots) 'debug #f)
            (set! act-before8 2)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before7 3))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-drop) 'debug #f)
            (set! act-before8 3)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before7 4))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctymarka-brutter"))
            (play-task (game-task city-save-lurkers) 'debug #f)
            (set! act-before8 4)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before7 5))
            (send-event *target* 'continue (get-continue-by-name *game-info* "under-start"))
            (play-task (game-task under-sig) 'debug #f)
            (set! act-before8 5)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before7 6))
            (send-event *target* 'continue (get-continue-by-name *game-info* "stadium-blimp-intro"))
            (play-task (game-task city-defend-stadium) 'debug #f)
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (set! act-before8 6)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before7 7))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forest-tree"))
            (play-task (game-task forest-protect) 'debug #f)
            (set! act-before8 7)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(!= act-before7 8))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctymarkb-tanker"))
            (play-task (game-task city-intercept-tanker) 'debug #f)
            (set! act-before8 8)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )

    (when (= act3-3 #t)
      (let (
        (level-pick (rand-vu-int-range 1 8))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! print-stage 3)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 8))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before8 1)(!= act-before7 1)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewesc-start"))
            (play-task (game-task sewer-escort) 'debug #f)
            (set! act-before8 1)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(and (!= act-before8 2)(!= act-before7 2)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-stop-bomb-bots) 'debug #f)
            (set! act-before8 2)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(and (!= act-before8 3)(!= act-before7 3)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-drop) 'debug #f)
            (set! act-before8 3)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(and (!= act-before8 4)(!= act-before7 4)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctymarka-brutter"))
            (play-task (game-task city-save-lurkers) 'debug #f)
            (set! act-before8 4)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(and (!= act-before8 5)(!= act-before7 5)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "under-start"))
            (play-task (game-task under-sig) 'debug #f)
            (set! act-before8 5)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(and (!= act-before8 6)(!= act-before7 6)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "stadium-blimp-intro"))
            (play-task (game-task city-defend-stadium) 'debug #f)
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (set! act-before8 6)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(and (!= act-before8 7)(!= act-before7 7)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forest-tree"))
            (play-task (game-task forest-protect) 'debug #f)
            (set! act-before8 7)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(and (!= act-before8 8)(!= act-before7 8)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-mech) 'debug #f)
            (set! act-before8 8)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )






    (when (= act3-4 #t)
      (let (
        (level-pick 1)
        )
          (when (= level-pick 1)
            (send-event *target* 'continue (get-continue-by-name *game-info* "castle-start"))
            (play-task (game-task castle-break-in) 'debug #f)
            (task-node-close! (game-task-node tomb-poles-poles2))
          )
        )
        (set! print-stage 4)
        (set! act3-4 #f)
        (set! waitenter #t)
        (set! wait-for-ingame #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! (-> *game-info* skill) temp-orbs)
        
    )    
    (when (= act3-5 #t)
      (let (
        (level-pick 1)
        (gp-0 (-> *game-info* features))
        )
          (when (= level-pick 1)
            (send-event *target* 'continue (get-continue-by-name *game-info* "casboss-start"))
            (play-task (game-task castle-boss) 'debug #f)
          )
        
        (set! print-stage 5)
        (set! act3-5 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! (-> *game-info* skill) temp-orbs)
        (set! wait-for-ingame #t)
        (when (and 
        (not (logtest? gp-0 (game-feature gun-red)))
        (not (logtest? gp-0 (game-feature gun-yellow)))
        (not (logtest? gp-0 (game-feature gun-blue)))
        (not (logtest? gp-0 (game-feature gun-dark)))
        )
        (logior! gp-0 (game-feature gun-red))
        (set! give-gunred? #t)
        (set! teleport-hiphog #f)
        (set! teleport-back? #f)
        (set! already-teleported? #f)
        )
      )
    )    



(when (= act4-1 #t)
      (let (
        (level-pick (rand-vu-int-range 1 4))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! print-stage 1)
        (set! act-act 4)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 4))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before9 1)(!= act-before9 1)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-battle"))
            (play-task (game-task atoll-battle) 'debug #f)
            (set! act-before9 1)
            (set! act4-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(and (!= act-before9 2)(!= act-before9 2)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyslumc-slums"))
            (play-task (game-task city-protect-water-slums) 'debug #f)
            (set! act-before9 2)
            (set! act4-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(and (!= act-before9 3)(!= act-before9 3)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forresca-start"))
            (play-task (game-task fortress-save-friends) 'debug #f)
            (set! act-before9 3)
            (set! act4-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(and (!= act-before9 4)(!= act-before9 4)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "throne-ashelin"))
            (play-task (game-task palace-sneak-in) 'debug #f)
            (task-node-close! (game-task-node palace-sneak-in-meeting))
            (set! act-before9 4)
            (set! act4-1 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )


(when (= act4-2 #t)
      (let (
        (level-pick (rand-vu-int-range 1 4))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! print-stage 2)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 4))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before9 1)(!= act-before10 1)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-battle"))
            (play-task (game-task atoll-battle) 'debug #f)
            (set! act-before10 1)
            (set! act4-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(and (!= act-before9 2)(!= act-before10 2)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyslumc-slums"))
            (play-task (game-task city-protect-water-slums) 'debug #f)
            (set! act-before10 2)
            (set! act4-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(and (!= act-before9 3)(!= act-before10 3)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forresca-start"))
            (play-task (game-task fortress-save-friends) 'debug #f)
            (set! act-before10 3)
            (set! act4-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(and (!= act-before9 4)(!= act-before10 4)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "throne-ashelin"))
            (play-task (game-task palace-sneak-in) 'debug #f)
            (task-node-close! (game-task-node palace-sneak-in-meeting))
            (set! act-before10 4)
            (set! act4-2 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )

    (when (= act4-3 #t)
      (let (
        (level-pick (rand-vu-int-range 1 4))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! print-stage 3)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 4))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before10 1)(!= act-before9 1)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-battle"))
            (play-task (game-task atoll-battle) 'debug #f)
            (set! act-before11 1)
            (set! act4-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(and (!= act-before10 2)(!= act-before9 2)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyslumc-slums"))
            (play-task (game-task city-protect-water-slums) 'debug #f)
            (set! act-before11 2)
            (set! act4-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(and (!= act-before10 3)(!= act-before9 3)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forresca-start"))
            (play-task (game-task fortress-save-friends) 'debug #f)
            (set! act-before11 3)
            (set! act4-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(and (!= act-before10 4)(!= act-before9 4)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "throne-ashelin"))
            (play-task (game-task palace-sneak-in) 'debug #f)
            (task-node-close! (game-task-node palace-sneak-in-meeting))
            (set! act-before11 4)
            (set! act4-3 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )

    (when (and (= dark-mode #f)(>= (-> *game-info* buzzer-total) 16.0))
      (set! dark-mode #t)
    )

    (when (= act4-4 #t)
      (let (
        (level-pick 1)
        )
          (when (= level-pick 1)
            (send-event *target* 'continue (get-continue-by-name *game-info* "nest-gun"))
            (play-task (game-task nest-enter) 'debug #f)
          )
        )
        (set! print-stage 4)
        (set! act4-4 #f)
        (set! waitenter #t)
        (set! wait-for-ingame #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! (-> *game-info* skill) temp-orbs)
        
    )    
    (when (= act4-5 #t)
      (let (
        (level-pick 1)
        (gp-0 (-> *game-info* features))
        )
          (when (= level-pick 1)
            (send-event *target* 'continue (get-continue-by-name *game-info* "nestb-boss-pit"))
            (play-task (game-task nest-boss) 'debug #f)
          )
        
        (set! print-stage 5)
        (set! act4-5 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! (-> *game-info* skill) temp-orbs)
        (set! wait-for-ingame #t)
        (when (and 
        (not (logtest? gp-0 (game-feature gun-red)))
        (not (logtest? gp-0 (game-feature gun-yellow)))
        (not (logtest? gp-0 (game-feature gun-blue)))
        (not (logtest? gp-0 (game-feature gun-dark)))
        )
        (logior! gp-0 (game-feature gun-red))
        (set! give-gunred? #t)
        (set! teleport-hiphog #f)
        (set! teleport-back? #f)
        (set! already-teleported? #f)
        )
      )
    )    




;(logior! (-> *game-info* secrets) (game-secrets invulnerable))
;Checks to see if task got completed, then processes the next area.

(when (= level-completed? #t)
  (+! act-stage 1)
  (+! (-> *game-info* buzzer-total) 1.0)
  (set! temp-skullgemamount (-> *game-info* gem))
  (set! temp-health (-> *target* fact health))
  (set! temp-orbs (-> *game-info* skill))
    (when 
  (and 
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 0)
  )
    (set! total-skill 3)
  )
  (when 
  (and 
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 1)
  )
    (set! total-skill 6)
  )
  (when 
  (and 
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 2)
  )
    (set! total-skill 9)
  )
  (when 
  (and 
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 3)
  )
    (set! total-skill 12)
  )
  (when 
  (and 
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 4)
  )
    (set! total-skill 14)
  )
  (when 
  (and 
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 5)
  )
    (set! total-skill 16)
  )
  (when 
  (and 
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 6)
  )
    (set! total-skill 20)
  )
  (when 
  (and 
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 7)
  )
    (set! total-skill 30)
  )
  (when 
  (and 
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 8)
  )
    (set! total-skill 40)
  )
  (when 
  (and 
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 9)
  )
    (set! total-skill 100)
  )
  (set! autosave-delayed #t)

  (when (and (= print-stage 4)(!= act-act 4)(= teleport-hiphog #f))
    (set! teleport-hiphog #t)
  )
  (when (and (= (-> *game-info* total-deaths) 1)(= act-act 1))
    (set! color-floor #t)
  )
  (when (and (= (-> *game-info* total-deaths) 3)(= act-act 3))
    (set! color-floor #t)
  )
  (when (and (= (-> *game-info* total-deaths) 1)(!= act-act 1))
    (set! color-floor #f)
  )
  (when (and (= (-> *game-info* total-deaths) 3)(!= act-act 3))
  (set! color-floor #f)
  )
    (when (= (-> *game-info* buzzer-total) 1.0)
      (set! act1-1 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 2.0)(= level-completed? #t))
      (set! act1-2 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 3.0)(= level-completed? #t))
      (set! act1-3 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 4.0)(= level-completed? #t))
      (set! act1-4 #t)
      (set! level-completed? #f)
      (when (rand-vu-percent? curse)
        (set! boss-cursed #t)
      )
    )
    (when (and (= (-> *game-info* buzzer-total) 5.0)(= level-completed? #t))
      (set! act1-5 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 6.0)(= level-completed? #t))
      (set! act2-1 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 7.0)(= level-completed? #t))
      (set! act2-2 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 8.0)(= level-completed? #t))
      (set! act2-3 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 9.0)(= level-completed? #t))
      (set! act2-4 #t)
      (set! level-completed? #f)
      (when (rand-vu-percent? curse)
        (set! boss-cursed #t)
      )
    )
    (when (and (= (-> *game-info* buzzer-total) 10.0)(= level-completed? #t))
      (set! act2-5 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 11.0)(= level-completed? #t))
      (set! act3-1 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 12.0)(= level-completed? #t))
      (set! act3-2 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 13.0)(= level-completed? #t))
      (set! act3-3 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 14.0)(= level-completed? #t))
      (set! act3-4 #t)
      (set! level-completed? #f)
      (when (rand-vu-percent? curse)
        (set! boss-cursed #t)
      )
    )
    (when (and (= (-> *game-info* buzzer-total) 15.0)(= level-completed? #t))
      (set! act3-5 #t)
      (set! level-completed? #f)
    )
    (when (and (>= (-> *game-info* total-deaths) 4)(= (-> *game-info* buzzer-total) 16.0)(= level-completed? #t))
      (set! act4-1 #t)
      (set! level-completed? #f)
      (set! (-> *time-of-day-context* overide-enable) #f)
    )
    (when (and (< (-> *game-info* total-deaths) 4)(= (-> *game-info* buzzer-total) 16.0)(= level-completed? #t))
      (set! (-> *target* fact health) 0.0)
      (set! win-lose #t)
      (when (= (-> *game-info* karma) 2.0)
        (set! (-> *game-info* karma) 3.0)
      )
      (set! in-game? #t)
      (set! level-completed? #f)
    )
    (when (and (>= (-> *game-info* total-deaths) 4)(= (-> *game-info* buzzer-total) 17.0)(= level-completed? #t))
      (set! act4-2 #t)
      (set! level-completed? #f)
    )
    (when (and (>= (-> *game-info* total-deaths) 4)(= (-> *game-info* buzzer-total) 18.0)(= level-completed? #t))
      (set! act4-3 #t)
      (set! level-completed? #f)
    )
    (when (and (>= (-> *game-info* total-deaths) 4)(= (-> *game-info* buzzer-total) 19.0)(= level-completed? #t))
      (set! act4-4 #t)
      (set! level-completed? #f)
      (when (rand-vu-percent? curse)
        (set! boss-cursed #t)
      )
    )
    (when (and (>= (-> *game-info* total-deaths) 4)(= (-> *game-info* buzzer-total) 20.0)(= level-completed? #t))
      (set! act4-5 #t)
      (set! level-completed? #f)
    )
  (set! level-completed? #f)
  (set! act-stage (the int (-> *game-info* buzzer-total)))
)

;wait for the in-game to not get the infinite complete mission glitch

(when (and (= in-game? #f)(= wait-for-ingame #t)) ;waits a little bit to give grace period and to fix bugs too
  (+! waiting 1)
  (when (= waiting 800)
    (set! in-game? #t)
    (set! waiting 0)
    (set! wait-for-ingame #f)
    (when (= p-upgrade-ammo #t)
      (send-event *target* 'get-pickup (pickup-type ammo-yellow) 1000.0)
      (send-event *target* 'get-pickup (pickup-type ammo-red) 1000.0)
      (send-event *target* 'get-pickup (pickup-type ammo-blue) 1000.0)
      (send-event *target* 'get-pickup (pickup-type ammo-dark) 1000.0)
    )
    (when 
    (and
    (= please-reward #t) 
    (!= act-stage 1)
    (!= act-stage 5)
    (!= act-stage 10)
    (!= act-stage 15)
    (!= act-stage 16)
    (!= act-stage 17)
    (!= act-stage 18)
    (!= act-stage 19)
    (!= act-stage 20)
    )
      (set! reward-orbs #t)
      (set! please-reward #f)
    )
  )
)

(when (and (= in-game? #f)(= wait-extra-for-ingame #t)) ;wait the extra time for in-game? without rewarding orbs.
  (+! waiting 1)
  (when (= waiting 1200)
    (set! in-game? #t)
    (set! waiting 0)
    (set! wait-extra-for-ingame #f)
    (when (= p-upgrade-ammo #t)
      (send-event *target* 'get-pickup (pickup-type ammo-yellow) 1000.0)
      (send-event *target* 'get-pickup (pickup-type ammo-red) 1000.0)
      (send-event *target* 'get-pickup (pickup-type ammo-blue) 1000.0)
      (send-event *target* 'get-pickup (pickup-type ammo-dark) 1000.0)
    )
  )
)

(when (and (= in-hub? #t)(= in-game? #t)) ;Workaround fix where in-game returns #t in hub.
  (set! in-game? #f)
  (set! run-in-progress #f)
)

(when (= reward-orbs #t) ;reward for completing floor with certain health range
  (when (= (-> *target* fact health) 8.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 10.0 15.0))
      (+! (-> *game-info* continue-deaths) 10000000)
    )
    (when (= (-> *target* fact health) 7.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 7.0 15.0))
    )
    (when (= (-> *target* fact health) 6.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 6.0 10.0))
    )
    (when (= (-> *target* fact health) 5.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 3.0 7.0))
    )
    (when (= (-> *target* fact health) 4.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 1.0 7.0))
    )
    (when (= (-> *target* fact health) 3.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 1.0 3.0))
    )
    (when (= (-> *target* fact health) 2.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 1.0 2.0))
    )
    (when (= (-> *target* fact health) 1.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 1.0 4.0))
    )
    (set! reward-orbs #f)
)

(when 
(and 
(= avoidc-waitb #t)
(not *scene-player*)
)
(+! avoidc-wait 1)
  (when (= avoidc-wait 1)
    (send-event *target* 'change-mode 'normal)
    (set! pause-menu-blocked? #t)
  )
  (when (= avoidc-wait 120)
    (set! avoidc-waitb #f)
    (set! avoidc-wait 0)
    (set! level-completed? #t)
    (set! pause-menu-blocked? #f)
  )
)

  #|
  MODULO
The equation to extract the 0 in the 100's place is (/ (mod 11011 1000) 100) This will return 0.
Similarly, if we wanted to add a 1 in the 100's place, just do (+ (11011) 100)
This is the legend for all numbers

This number is taken from (-> *game-info* total-deaths). It is used to save the values of your current items to game-save.

10000000000
These numbers go down in order from the ids. The first 1 is to save all the 0's

(/ (mod 0000000001 10) 1) = 1's (1st place, Yellow Gun)
(/ (mod 0000000010 100) 10) = 10's (2nd place, Blue Gun)
(/ (mod 0000000100 1000) 100) = 100's (3rd place, Peacemaker)
(/ (mod 0000001000 10000) 1000) = 1000's (4th place, Upgrade Red Speed)
(/ (mod 0000010000 100000) 10000) = 10,000's (5th place, Upgrade Ammo)
(/ (mod 0000100000 1000000) 100000) = 100,000's (6th place, Upgrade Damage)
(/ (mod 0001000000 10000000) 1000000) = 1,000,000's (7th place, Buffed Vehicles)
(/ (mod 0010000000 100000000) 10000000) = 10,000,000's (8th place, Double Shot)
(/ (mod 0100000000 1000000000) 100000000) = 100,000,000's (9th place, Green, Red, Blue Eco Shard)
(/ (mod 1000000000 10000000000) 100000000) = 1,000,000,000's (10th place, in-game?) 1=false 2=true
|#


(when                     ;When loading back into your run
(and 
(!= (-> *game-info* buzzer-total) 0.0)
(and 
(= in-game? #f)
(= wait-extra-for-ingame #f)
)
(= (paused?) #f)
(= (pause-allowed?) #t)
*target*
)
  (set! item-display? #t)
  (set! run-in-progress #t)
  (set! wait-extra-for-ingame #t)
  (set! display-run #t)
  (set! roll-shopitems #t)
  (set! ohshiti 0)
  (set! ohshit #f)
  (set! wait-tutorial #f)
  (set! tutoriali 0)
  (set! display-death-screen #t)
  (set! rnginfo #t)
  (when 
(and
(task-node-closed? (game-task-node palace-boss-introduction))
(not (task-node-closed? (game-task-node palace-boss-resolution)))
(= grab-method #f)
)
  (set! grab-method #t)
  (when (rand-vu-percent? curse)
        (set! boss-cursed #t)
        (set! wait-cb #t)
      )
)
  (when (and (= print-stage 4)(!= act-act 4)(= teleport-hiphog #f))
    (set! teleport-hiphog #t)
  )
  (when (and (= (-> *game-info* total-deaths) 1)(= act-act 1))
    (set! color-floor #t)
  )
  (when (and (= (-> *game-info* total-deaths) 3)(= act-act 3))
    (set! color-floor #t)
  )
  (when (and (= (-> *game-info* total-deaths) 1)(!= act-act 1))
    (set! color-floor #f)
  )
  (when (and (= (-> *game-info* total-deaths) 3)(!= act-act 3))
  (set! color-floor #f)
  )
#|  (when (and 
  (= (-> (level-get-target-inside *level*) mood-func)update-mood-nest)
  (<= (-> *game-info* buzzer-total) 16)
  )
    (set! (-> (level-get-target-inside *level*) mood-func)update-mood-default)
  )|#
#|
(when 
(and
(task-node-closed? (game-task-node palace-boss-introduction))
(not (task-node-closed? (game-task-node palace-boss-resolution)))
(= grab-method #f)
)
  (set! grab-method #t)
  (when (rand-vu-percent? curse)
        (set! boss-cursed #t)
      )
)|#
    

  (when (!= (the int (-> *game-info* buzzer-total)) act-stage)
    (set! act-stage (the int (-> *game-info* buzzer-total)))
    (when 
    (and 
    (<= (-> *game-info* buzzer-total) 5)
    (!= act-act 1)
    )
      (set! act-act 1)
    )
    (when 
    (and 
    (>= (-> *game-info* buzzer-total) 6)
    (<= (-> *game-info* buzzer-total) 10)
    (!= act-act 2)
    )
      (set! act-act 2)
    )
    (when 
    (and 
    (>= (-> *game-info* buzzer-total) 11)
    (<= (-> *game-info* buzzer-total) 15)
    (!= act-act 3)
    )
      (set! act-act 3)
    )
    (when 
    (and 
    (>= (-> *game-info* buzzer-total) 16)
    (<= (-> *game-info* buzzer-total) 20)
    (!= act-act 4)
    )
      (set! act-act 4)
    )
    (when (and (= (-> *game-info* buzzer-total) 1.0)(!= print-stage 1))
      (set! print-stage 1)
    )
    (when (and (= (-> *game-info* buzzer-total) 2.0)(!= print-stage 2))
      (set! print-stage 2)
    )
    (when (and (= (-> *game-info* buzzer-total) 3.0)(!= print-stage 3))
      (set! print-stage 3)
    )
    (when (and (= (-> *game-info* buzzer-total) 4.0)(!= print-stage 4))
      (set! print-stage 4)
    )
    (when (and (= (-> *game-info* buzzer-total) 5.0)(!= print-stage 5))
      (set! print-stage 5)
    )
    (when (and (= (-> *game-info* buzzer-total) 6.0)(!= print-stage 1))
      (set! print-stage 1)
    )
    (when (and (= (-> *game-info* buzzer-total) 7.0)(!= print-stage 2))
      (set! print-stage 2)
    )
    (when (and (= (-> *game-info* buzzer-total) 8.0)(!= print-stage 3))
      (set! print-stage 3)
    )
    (when (and (= (-> *game-info* buzzer-total) 9.0)(!= print-stage 4))
      (set! print-stage 4)
    )
    (when (and (= (-> *game-info* buzzer-total) 10.0)(!= print-stage 5))
      (set! print-stage 5)
    )
    (when (and (= (-> *game-info* buzzer-total) 11.0)(!= print-stage 1))
      (set! print-stage 1)
    )
    (when (and (= (-> *game-info* buzzer-total) 12.0)(!= print-stage 2))
      (set! print-stage 2)
    )
    (when (and (= (-> *game-info* buzzer-total) 13.0)(!= print-stage 3))
      (set! print-stage 3)
    )
    (when (and (= (-> *game-info* buzzer-total) 14.0)(!= print-stage 4))
      (set! print-stage 4)
    )
    (when (and (= (-> *game-info* buzzer-total) 15.0)(!= print-stage 5))
      (set! print-stage 5)
    )
    (when (and (= (-> *game-info* buzzer-total) 16.0)(!= print-stage 1))
      (set! print-stage 1)
    )
    (when (and (= (-> *game-info* buzzer-total) 17.0)(!= print-stage 2))
      (set! print-stage 2)
    )
    (when (and (= (-> *game-info* buzzer-total) 18.0)(!= print-stage 3))
      (set! print-stage 3)
    )
    (when (and (= (-> *game-info* buzzer-total) 19.0)(!= print-stage 4))
      (set! print-stage 4)
    )
    (when (and (= (-> *game-info* buzzer-total) 20.0)(!= print-stage 5))
      (set! print-stage 5)
    )
  )
)


(when (= wait-cb #t)
    (+! w-cb 1)
  (when (= w-cb 30)
    (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
  )
  (when (= w-cb 60)
    (send-event *target* 'continue (get-continue-by-name *game-info* "palroof-boss"))
    (set! w-cb 0)
    (set! wait-cb #f)
  )
)

(when 
  (and 
  (= p-yellow-gun #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* task-deaths) 10) 1) 1)
  )
    (set! p-yellow-gun #t)
    (set! item-tss1 "Yellow Gun")
    (set! item-update #t)
  )
  (when 
  (and 
  (= p-blue-gun #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* task-deaths) 100) 10) 1)
  )
    (set! p-blue-gun #t)
    (set! item-tss1 "Blue Gun")
    (set! item-update #t)
  )
  (when 
  (and 
  (= p-dark-gun #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* task-deaths) 1000) 100) 1)
  )
    (set! p-dark-gun #t)
    (set! item-tss1 "Peacemaker")
    (set! item-update #t)
  )
  (when 
  (and 
  (= p-upgrade-red #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* task-deaths) 10000) 1000) 1)
  )
    (set! p-upgrade-red #t)
    (set! item-tss1 "Scattergun ROF")
    (set! item-update #t)
  )
      (when 
  (and 
  (= p-upgrade-ammo #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* task-deaths) 100000) 10000) 1)
  )
    (set! p-upgrade-ammo #t)
    (set! item-tss1 "Upgraded Ammo")
    (set! item-update #t)
  )

      (when 
  (and 
  (= p-upgrade-damage #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* task-deaths) 1000000) 100000) 1)
  )
    (set! p-upgrade-damage #t)
    (set! item-tss1 "Upgraded Damage")
    (set! item-update #t)
  )
  (when 
  (and 
  (= p-upgrade-vehicles #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* task-deaths) 10000000) 1000000) 1)
  )
    (set! p-upgrade-vehicles #t)
    (= item-update #f)
    (set! item-tss1 "Upgraded Vehicles")
    (set! item-update #t)
  )
  (when 
  (and 
  (= p-double-shot #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* task-deaths) 100000000) 10000000) 1)
  )
    (set! p-double-shot #t)
    (= item-update #f)
    (set! item-tss1 "Double Shot")
    (set! item-update #t)
  )
  (when 
  (and 
  (= p-explode-shot #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* task-deaths) 1000000000) 100000000) 1)
  )
    (set! p-explode-shot #t)
    (set! item-tss1 "Explosive Shot")
    (set! item-update #t)
  )
  (when 
  (and 
  (!= curse 0.0)
  (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 0)
  )
    (set! curse 0.0)
    (set! curse-level 0)
  )
  (when 
  (and 
  (!= curse 0.1)
  (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 1)
  )
    (set! curse 0.1)
    (set! curse-level 1)
  )
 (when 
  (and 
  (!= curse 0.2)
  (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 2)
  )
    (set! curse 0.2)
    (set! curse-level 2)
  )
  (when 
  (and 
  (!= curse 0.3)
  (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 3)
  )
    (set! curse 0.3)
    (set! curse-level 3)
  )
  (when 
  (and 
  (!= curse 0.4)
  (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 4)
  )
    (set! curse 0.4)
    (set! curse-level 4)
  )
  (when 
  (and 
  (!= curse 0.5)
  (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 5)
  )
    (set! curse 0.5)
    (set! curse-level 5)
  )
  (when 
  (and 
  (!= curse 0.6)
  (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 6)
  )
    (set! curse 0.6)
    (set! curse-level 6)
  )
  (when 
  (and 
  (!= curse 0.7)
  (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 7)
  )
    (set! curse 0.7)
    (set! curse-level 7)
  )
  (when 
  (and 
  (!= curse 0.8)
  (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 8)
  )
    (set! curse 0.8)
    (set! curse-level 8)
  )
  (when 
  (and 
  (!= curse 1.0)
  (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
  )
    (set! curse 1.0)
    (set! curse-level 9)
  )
  (when 
  (and 
  (!= luck 0.05)
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 0)
  )
    (set! luck 0.05)
  )
  (when 
  (and 
  (!= luck 0.1)
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 1)
  )
    (set! luck 0.1)
  )
  (when 
  (and 
  (!= luck 0.103)
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 2)
  )
    (set! luck 0.103)
  )
  (when 
  (and 
  (!= luck 0.107)
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 3)
  )
    (set! luck 0.107)
  )
  (when 
  (and 
  (!= luck 0.11)
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 4)
  )
    (set! luck 0.11)
  )
  (when 
  (and 
  (!= luck 0.13)
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 5)
  )
    (set! luck 0.13)
  )
  (when 
  (and 
  (!= luck 0.17)
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 6)
  )
    (set! luck 0.17)
  )
  (when 
  (and 
  (!= luck 0.2)
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 7)
  )
    (set! luck 0.2)
  )
  (when 
  (and 
  (!= luck 0.4)
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 8)
  )
    (set! luck 0.4)
  )
  (when 
  (and 
  (!= luck 0.6)
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 9)
  )
    (set! luck 0.6)
  )
  

  
(when 
  (and 
  (= p-yellow-gun #t)
  (!= (/ (mod (-> *game-info* task-deaths) 10) 1) 1)
  )
    (set! p-yellow-gun #f)
  )
  (when 
  (and 
  (= p-blue-gun #t)
  (!= (/ (mod (-> *game-info* task-deaths) 100) 10) 1)
  )
    (set! p-blue-gun #f)
  )
  (when 
  (and 
  (= p-dark-gun #t)
  (!= (/ (mod (-> *game-info* task-deaths) 1000) 100) 1)
  )
    (set! p-dark-gun #f)
  )
  (when 
  (and 
  (= p-upgrade-red #t)
  (!= (/ (mod (-> *game-info* task-deaths) 10000) 1000) 1)
  )
    (set! p-upgrade-red #f)
  )
      (when 
  (and 
  (= p-upgrade-ammo #t)
  (!= (/ (mod (-> *game-info* task-deaths) 100000) 10000) 1)
  )
    (set! p-upgrade-ammo #f)
  )

      (when 
  (and 
  (= p-upgrade-damage #t)
  (!= (/ (mod (-> *game-info* task-deaths) 1000000) 100000) 1)
  )
    (set! p-upgrade-damage #f)
  )
  (when 
  (and 
  (= p-upgrade-vehicles #t)
  (!= (/ (mod (-> *game-info* task-deaths) 10000000) 1000000) 1)
  )
    (set! p-upgrade-vehicles #f)
  )
  (when 
  (and 
  (= p-double-shot #t)
  (!= (/ (mod (-> *game-info* task-deaths) 100000000) 10000000) 1)
  )
    (set! p-double-shot #f)
  )
  (when 
  (and 
  (= p-explode-shot #t)
  (!= (/ (mod (-> *game-info* task-deaths) 1000000000) 100000000) 1)
  )
    (set! p-explode-shot #f)
  )


(when 
(and 
(= in-hub? #t) 
(= (paused?) #f)
(= (pause-allowed?) #t)
*traffic-manager*
)
  (set! start-stage #t)
)

(when 
(and 
(= (paused?) #f)
(= (pause-allowed?) #t)
(= in-menu #f) 
(= in-hub? #t)
(not *traffic-manager*)
)
  (set! start-stage #f)
)

(when 
(and 
(= vin-shop #f) 
(= (paused?) #f)
(= (pause-allowed?) #t)
(= in-menu #f) 
(= vin-shop #f)
(= start-stage #f)
(= in-hub? #t)
(cpad-pressed? 0 triangle)
)
  (set! vin-shop #t)
  (set! camera-locked #t)
  (+! vin-talk 1)
  (when (>= vin-talk 5)
    (set! vin-talk 1)
  )
)
#|
(when 
(and 
(= in-game? #f)
(= (paused?) #f)
(= (pause-allowed?) #t)
*target*
(= run-in-progress #f)
(>= (-> *game-info* karma) 1.0)
(not (= (-> (level-get-target-inside *level*) name) 'consiteb))
)
  (send-event *target* 'continue (get-continue-by-name *game-info* "consite-airlock"))
)|#
#|
(when 
(and
 (or 
 (= color-floor #f)
 (= act-act 4)
 )
 (= (-> *time-of-day-context* overide-enable) #t)
 )
  (set! (-> *time-of-day-context* overide-enable) #f)
)
(when (= color-floor #t)
  (when (and (= act-act 1)(= run-in-progress #t))
    (set! (-> *time-of-day-context* overide-enable) #t)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color x) 0.4733)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color y) 0.6203)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color z) 0.3984)
    (set! (-> *time-of-day-context* times (-> *time-of-day-context* overide-palette) x) 0.4921)
    (set! (-> *time-of-day-context* times (-> *time-of-day-context* overide-palette) y) 1.2500)
    (set! (-> *time-of-day-context* times (-> *time-of-day-context* overide-palette) z) 0.6875)
    (set! (-> *time-of-day-context* times (-> *time-of-day-context* overide-palette) w) 1.0)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color w) 0.4984)
  )
  (when (and (= act-act 2)(= run-in-progress #t))
    (set! (-> *time-of-day-context* overide-enable) #t)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color x) 0.4198)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color y) 0.7148)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color z) 1.8359)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color w) 0.6093)
    (set! (-> *time-of-day-context* times (-> *time-of-day-context* overide-palette) x) 0.4921)
    (set! (-> *time-of-day-context* times (-> *time-of-day-context* overide-palette) y) 0.6875)
    (set! (-> *time-of-day-context* times (-> *time-of-day-context* overide-palette) z) 1.2500)
    (set! (-> *time-of-day-context* times (-> *time-of-day-context* overide-palette) w) 1.0)
  )
  (when (and (= act-act 3)(= run-in-progress #t))
    (set! (-> *time-of-day-context* overide-enable) #t)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color x) 1.9921)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color y) 0.9101)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color z) 0.3632)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color w) 0.4921)
    (set! (-> *time-of-day-context* times (-> *time-of-day-context* overide-palette) x) 1.2500)
    (set! (-> *time-of-day-context* times (-> *time-of-day-context* overide-palette) y) 0.6875)
    (set! (-> *time-of-day-context* times (-> *time-of-day-context* overide-palette) z) 0.4921)
  )
)
|#

(when 
(and 
(= act-act 4)
(= (pause-allowed?) #t)
(= in-game? #t)
(= avoidc-waitb #f)
*target*
(not *scene-player*)
(!= (-> (level-get-target-inside *level*) mood-func)update-mood-nest)
)
  (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color x) 1.9921)
  (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color y) 1.9921)
  (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color z) 1.9921)
  (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color w) 2.0)
  (when (not (task-node-closed? (game-task-node city-whack-post-game)))
    (set! traffic-metalheads? #t)
  )
  (when (task-node-closed? (game-task-node city-whack-post-game))
    (set! traffic-metalheads? #f)
  )
  (send-event *traffic-manager* 'set-guard-target-level 100)
  (set! (-> *time-of-day-context* overide-enable) #f)
  (set! (-> *mood-control* overide-weather-flag) #t)
  (set! (-> *mood-control* overide fog) 1.0)
  (set! (-> *mood-control* overide cloud) 1.0)
  (set! (-> (level-get-target-inside *level*) mood-func)update-mood-nest)
)

(when 
(and 
(= vin-shop #t)
(= start-stage #f)
(= in-hub? #t)
(cpad-pressed? 0 r3)
)
  (set! vin-shop #f)
  (set! camera-unlocked #t)
)

;camera menu
(when (= camera-locked #t) ;sets camera params
  (send-event *target* 'draw #f)
  (set-setting-by-param *setting-control* 'mode-name 'cam-eye 0 0)
  (persist-with-delay *setting-control* 'gun (seconds 0.5) 'gun #f 0.0 0)
  (process-grab? *target* #f)
  (set! camera-locked #f)
)

(when (= camera-unlocked #t)
  (remove-setting-by-arg0 *setting-control* 'mode-name)
  (set! pause-menu-blocked? #f)
  (send-event *target* 'draw #t)
  (process-release? *target*)
  (set! camera-unlocked #f)
)

(when (= wait-exit #t)
  (+! waite-frame 1)
  (remove-setting-by-arg0 *setting-control* 'mode-name)
  (when (= waite-frame 1)
    (set! in-hub? #f)
    (set! in-menu #f)
    (set! run-in-progress #t)
  )
  (when (= waite-frame 5)
    (set! pause-menu-blocked? #f)
    (send-event *target* 'draw #t)
    (process-release? *target*)
  )
  (when (= waite-frame 10)
    (set! wait-exit #f)
    (set! waite-frame 0)
    (set! act-stage 0)
    (set! (-> *game-info* buzzer-total) 0.0)
    (set! display-death-screen #t)
    (set! print-stage 0)
    (set! level-completed? #t)
    (set! display-run #t)
    (set! vin-spawned? #f)
    (set! item-display? #t)
    (set! autosave-delayed #t)
    (set! rnginfo #t)
    (let ((roll-luck (rand-vu-int-range 1 4)))
    (when (= roll-luck 1)
    (+! (-> *game-info* continue-deaths) 10000000)
    )
    (when (= roll-luck 2)
    (+! (-> *game-info* continue-deaths) 20000000)
    )
    (when (= roll-luck 3)
    (+! (-> *game-info* continue-deaths) 30000000)
    )
    (when (= roll-luck 4)
    (+! (-> *game-info* continue-deaths) 40000000)
    )
  )
    (when (and (= print-stage 4)(!= act-act 4)(= teleport-hiphog #f))
    (set! teleport-hiphog #t)
  )
  )
)
(when (= wait-start #t)
  (+! waits-frame 1)
  (when (= waits-frame 1)
    (set! tutorial-completed? #t)
  )
  (when (> waits-frame 60)
    (when (= display-death-screen #t)
      (set! in-menu #t)
      (set! camera-locked #t)
      (set! pause-menu-blocked? #t)
    )
    (set! wait-start #f)
    (set! waits-frame 0)
    (set! display-run #f)
    (set! in-hub? #t)
  )
)

(when (and (= color-floor #f)(= in-hub? #f)(= (-> *game-info* total-deaths) 1)(= act-act 1))
    (set! color-floor #t)
  )
  (when (and (= color-floor #f) (= in-hub? #f)(= (-> *game-info* total-deaths) 3)(= act-act 3))
    (set! color-floor #t)
  )
  (when (and (= color-floor #t) (!= (-> *game-info* total-deaths) 1)(= act-act 1))
    (set! color-floor #f)
  )
  (when (and (= color-floor #t) (!= (-> *game-info* total-deaths) 3)(= act-act 3))
  (set! color-floor #f)
  )
  (when (and (= color-floor #t)(= in-hub? #t))
    (set! color-floor #f)
  )



(when (= waitenter #t)
  (+! waitenteri 1)
  (when (= waitenteri 60)
    (set! tutorial-completed? #f)
    (set! waitenteri 0)
    (set! waitenter #f)
  )
)


(when (= wait-kill #t)
  (+! wait-killi 1)
  (when (= wait-killi 400)
    (send-event *target* 'continue (get-continue-by-name *game-info* "consite-airlock"))
    (set! wait-killi 0)
    (set! wait-kill #f)
  )
  (when (= (-> (level-get-target-inside *level*) name) 'consiteb)
    (set! wait-killi 0)
    (set! wait-kill #f)
  )
)

(when 
(and
(= pause-menu-blocked? #t)
(= (pause-allowed?) #t)
(not *scene-player*)
)
  (set-master-mode 'game)
)

(when (= wait-pulloutgun #t)
  (+! wait-pi 1)
  (when (= wait-pi 400)
    (send-event *target* 'change-mode 'gun #f (pickup-type eco-yellow))
    (set! wait-pi 0)
    (set! wait-pulloutgun #f)
  )
)


;Death params
(when 
(and
(= (pause-allowed?) #t)
(= (-> *target* fact health) 0.0)
(= in-game? #t)
*target*
)
  (set! dark-mode #f)
  (set! run-in-progress #f)
  (set! waitdie #t)
  (set! in-game? #f)
  (set! avoidc-waitb #f)
  (set! display-run #f)
  (set! avoidc-wait 0)
)




(when (and (= waitdie #t)(>= (-> *game-info* karma) 1.0)(= (pause-allowed?) #t))
  (+! waitdi 1)
  (when (= waitdi 1)
    (set! temp-skullgemamount (-> *game-info* gem))
    (+! (-> *game-info* fuel) (-> *game-info* gem))
  )
  (when (= waitdi 30)
    (send-event *target* 'continue (get-continue-by-name *game-info* "consite-airlock"))
    (set! waitdi 0)
    (set! waitdie #f)
  )
)

(when (= rnginfo #t)
  (set! rngspeed (rand-vu-float-range 40960.0 100000.0))
  (set! rngspeed2 (rand-vu-float-range 60960.0 120000.0))
  (set! rngspeed3 (rand-vu-float-range 100960.0 140000.0))
  (set! rngspeed4 (rand-vu-float-range 300960.0 2200000.0))
  (set! rnginfo #f)
)

;buy shop GUNS
;(logior! (-> *game-info* features) (game-feature gun-red))
;(logior! (-> *game-info* features) (game-feature gun-yellow))
;(logior! (-> *game-info* features) (game-feature gun-blue))
;(logior! (-> *game-info* features) (game-feature gun-dark))
;Take away shop GUNS
;(logclear! (-> *game-info* features) (game-feature gun-red))
;(logclear! (-> *game-info* features) (game-feature gun-yellow))
;(logclear! (-> *game-info* features) (game-feature gun-blue))
;(logclear! (-> *game-info* features) (game-feature gun-dark))


;When jak doesnt have his purchased items, give him the items!

(when (and (= p-yellow-gun #t)(not (logtest? (-> *game-info* features) (game-feature gun-yellow))))
  (logior! (-> *game-info* features) (game-feature gun gun-yellow))
)
(when (and (= p-blue-gun #t)(not (logtest? (-> *game-info* features) (game-feature gun-blue))))
  (logior! (-> *game-info* features) (game-feature gun gun-blue))
)
(when (and (= p-dark-gun #t)(not (logtest? (-> *game-info* features) (game-feature gun-dark))))
  (logior! (-> *game-info* features) (game-feature gun gun-dark))
)
(when (and (= p-upgrade-ammo #t)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-ammo))))
  (logior! (-> *game-info* features) (game-feature gun gun-upgrade-ammo))
)
(when (and (= p-upgrade-red #t)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-speed))))
  (logior! (-> *game-info* features) (game-feature gun gun-upgrade-speed))
)
(when (and (= p-upgrade-damage #t)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-damage))))
  (logior! (-> *game-info* features) (game-feature gun gun-upgrade-damage))
)

;MODS

(when (= dshotwait-r #t)
  (+! dshotcount-r 1)
  (when (= dshotcount-r 3)
    (someone-fire-red *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    (set! dshotcount-r 0)
    (set! dshotwait-r #f)
  )
)
(when (= dshotwait-y #t)
  (+! dshotcount-y 1)
  (when (= dshotcount-y 6)
    (someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    (set! dshotcount-y 0)
    (set! dshotwait-y #f)
  )
)
(when (= dshotwait-b #t)
  (+! dshotcount-b 1)
  (when (= dshotcount-b 2)
    (someone-fire-blue *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    (set! dshotcount-b 0)
    (set! dshotwait-b #f)
  )
)
(when (= dshotwait-d #t)
  (+! dshotcount-d 1)
  (when (= dshotcount-d 6)
    (someone-fire-dark *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    (set! dshotcount-d 0)
    (set! dshotwait-d #f)
  )
)



#| All of these are set to IDs

Here are the shop IDs
1 Yellow Gun (25 orbs)
2 Blue Gun (32 orbs)
3 Peacemaker (40 orbs)
4 Upgrade Red speed (10 orbs)
5 Upgrade Ammo (15 orbs)
6 Upgrade Damage (20 orbs)
7 Full HP (7 orbs)
8 Buffed Vehicles
9 Double Shot
99 Red Eco Shard


|#



(when (= roll-shopitems #t)
  (let (
    (shoproll1 (rand-vu-int-range 1 (-> *game-info* total-trys)))
    (shoproll2 (rand-vu-int-range 1 (-> *game-info* total-trys)))
    (shoproll3 (rand-vu-int-range 1 (-> *game-info* total-trys)))
  )
  (when (or (= shoproll1 shoproll2)(= shoproll1 shoproll3)(= shoproll2 shoproll3)) ;if the pick is the same on two options, reroll
    (set! shoproll1 (rand-vu-int-range 1 (-> *game-info* total-trys)))
    (set! shoproll2 (rand-vu-int-range 1 (-> *game-info* total-trys)))
    (set! shoproll3 (rand-vu-int-range 1 (-> *game-info* total-trys)))
  )


  (when (= shoproll1 1)
    (set! shopitem1 "Yellow Gun (25 orbs)")
    (set! shopid1 1)
  )
  (when (= shoproll2 1)
    (set! shopitem2 "Yellow Gun (25 orbs)")
    (set! shopid2 1)
  )
  (when (= shoproll3 1)
    (set! shopitem3 "Yellow Gun (25 orbs)")
    (set! shopid3 1)
  )
  (when (= shoproll1 2)
    (set! shopitem1 "Blue Gun (32 orbs)")
    (set! shopid1 2)
  )
  (when (= shoproll2 2)
    (set! shopitem2 "Blue Gun (32 orbs)")
    (set! shopid2 2)
  )
  (when (= shoproll3 2)
    (set! shopitem3 "Blue Gun (32 orbs)")
    (set! shopid3 2)
  )
  (when (= shoproll1 5)
    (set! shopitem1 "Peacemaker (40 orbs)")
    (set! shopid1 3)
  )
  (when (= shoproll2 5)
    (set! shopitem2 "Peacemaker (40 orbs)")
    (set! shopid2 3)
  )
  (when (= shoproll3 5)
    (set! shopitem3 "Peacemaker (40 orbs)")
    (set! shopid3 3)
  )
  (when (= shoproll1 3)
    (set! shopitem1 "Scattergun Rate of Fire (10 orbs)")
    (set! shopid1 4)
  )
  (when (= shoproll2 3)
    (set! shopitem2 "Scattergun Rate of Fire (10 orbs)")
    (set! shopid2 4)
  )
  (when (= shoproll3 3)
    (set! shopitem3 "Scattergun Rate of Fire (10 orbs)")
    (set! shopid3 4)
  )
  (when (= shoproll1 6)
    (set! shopitem1 "Upgrade Ammo (15 orbs)")
    (set! shopid1 5)
  )
  (when (= shoproll2 6)
    (set! shopitem2 "Upgrade Ammo (15 orbs)")
    (set! shopid2 5)
  )
  (when (= shoproll3 6)
    (set! shopitem3 "Upgrade Ammo (15 orbs)")
    (set! shopid3 5)
  )
  (when (= shoproll1 7)
    (set! shopitem1 "Upgrade Damage x2 (20 orbs)")
    (set! shopid1 6)
  )
  (when (= shoproll2 7)
    (set! shopitem2 "Upgrade Damage x2 (20 orbs)")
    (set! shopid2 6)
  )
  (when (= shoproll3 7)
    (set! shopitem3 "Upgrade Damage x2 (20 orbs)")
    (set! shopid3 6)
  )
  (when (= shoproll1 4)
    (set! shopitem1 "Full HP (8 orbs)")
    (set! shopid1 7)
  )
  (when (= shoproll2 4)
    (set! shopitem2 "Full HP (8 orbs)")
    (set! shopid2 7)
  )
  (when (= shoproll3 4)
    (set! shopitem3 "Full HP (8 orbs)")
    (set! shopid3 7)
  )
  (when (= shoproll1 8)
    (set! shopitem1 "Buffed Vehicles (32 orbs) (Applies in next level)")
    (set! shopid1 8)
  )
  (when (= shoproll2 8)
    (set! shopitem2 "Buffed Vehicles (32 orbs) (Applies in next level)")
    (set! shopid2 8)
  )
  (when (= shoproll3 8)
    (set! shopitem3 "Buffed Vehicles (32 orbs) (Applies in next level)")
    (set! shopid3 8)
  )
  (when (= shoproll1 9)
    (set! shopitem1 "Double Shot (25 orbs)")
    (set! shopid1 9)
  )
  (when (= shoproll2 9)
    (set! shopitem2 "Double Shot (25 orbs)")
    (set! shopid2 9)
  )
  (when (= shoproll3 9)
    (set! shopitem3 "Double Shot (25 orbs)")
    (set! shopid3 9)
  )
  (when (and (rand-vu-percent? 0.1) (>= (-> *game-info* karma) 3.0))
    (set! shopitem1 "Explosive Shot (35 orbs)")
    (set! shopid1 10)
  )
  (when (and (rand-vu-percent? 0.1) (>= (-> *game-info* karma) 3.0))
    (set! shopitem2 "Explosive Shot (35 orbs)")
    (set! shopid2 10)
  )
  (when (and (rand-vu-percent? 0.1) (>= (-> *game-info* karma) 3.0))
    (set! shopitem3 "Explosive Shot (35 orbs)")
    (set! shopid3 10)
  )
  (when 
  (and 
  (= (-> *game-info* total-deaths) 3)
  (= act-act 3)
  )
    (let (
      (shopinroll (rand-vu-int-range 1 3))
      )
        (when (= shopinroll 1)
          (set! shopitem1 "Red Eco Shard (100 orbs)")
          (set! shopid1 99)
        )
        (when (= shopinroll 2)
          (set! shopitem2 "Red Eco Shard (100 orbs)")
          (set! shopid2 99)
        )
        (when (= shopinroll 3)
          (set! shopitem3 "Red Eco Shard (100 orbs)")
          (set! shopid3 99)
        )
      )
  )
  (when (and (!= shoproll1 shoproll2)(!= shoproll1 shoproll3)(!= shoproll2 shoproll3)) ;if the pick is NOT the same on two options, stop rolling.
    (set! roll-shopitems #f)
  )
)


)


(when (and (cpad-pressed? 0 r3)(= in-menu2 #f)(= (-> (level-get-target-inside *level*) name) 'hiphog))
  (set! in-menu2wait #t)
)

(when (and (cpad-pressed? 0 r3)(= in-menu2 #t)(= (-> (level-get-target-inside *level*) name) 'hiphog))
  (set! in-menu2wait2 #t)
)

(when (and (= in-menu2 #f)(= (-> (level-get-target-inside *level*) name) 'hiphog))
  (set! popup-shop #t)
)

(when (!= (-> (level-get-target-inside *level*) name) 'hiphog)
  (set! popup-shop #f)
)

(when (= in-menu2wait #t)
  (+! in-menu2waiti 1)
  (when (= in-menu2waiti 1)
    (send-event *target* 'draw #f)
    (set-vector! (-> *target* control trans) (meters -99.0494) (meters 30.853) (meters 1287.0468) 1.0) ;teleports jak behind bar
  )
  (when (= in-menu2waiti 20)
    (set! in-menu2 #t)
    (set! (-> *target* cam-user-mode) 'fixed)
    (set-setting-by-param *setting-control* 'mode-name 'cam-really-fixed 0 0)
    (send-event *camera* 'teleport-to-vector-start-string (new 'static 'vector :x (meters -90.0494) :y (meters 13.853) :z (meters 1303.0468)))
  )
  (when (= in-menu2waiti 65)
    (set! in-menu2waiti 0)
    (set! in-menu2wait #f)
    (set-vector! (-> *target* control trans) (meters -77.5494) (meters 15.853) (meters 1309.0468) 1.0) ;teleports jak away from talking to npcs
  )
)

;(meters -90.0494) (meters 25.853) (meters 1303.0468) ;cam pos for shop

(when (= in-menu2wait2 #t)
  (+! in-menu2wait2i 1)
  (when (= in-menu2wait2i 1)
    (remove-setting-by-arg0 *setting-control* 'mode-name)
    (send-event *target* 'draw #t)
    (process-release? *target*)
    (set-vector! (-> *target* control trans) (meters -96.0494) (meters 10.853) (meters 1293.0468) 1.0) ;teleports jak in front of bar
    (set! in-menu2 #f)
  )
  (when (= in-menu2wait2i 60)
    (set! in-menu2wait2i 0)
    (set! in-menu2wait2 #f)
  )
)

;controls for in-menu2

(when (and (= in-menu2 #t)(cpad-pressed? 0 right))
  (+! menu-slot 1)
  (when (>= menu-slot 3)
    (set! menu-slot 0)
  )
)

(when (and (= in-menu2 #t)(cpad-pressed? 0 left))
  (-! menu-slot 1)
  (when (< menu-slot 0)
    (set! menu-slot 2)
  )
)



(when (and (= in-menu2 #t)(cpad-pressed? 0 x))
    (when (and (= menu-slot 0)(not (logtest? (-> *game-info* features) (game-feature gun-yellow)))(>= (-> *game-info* skill) 25.0)(= shopid1 1))
      (set! p-yellow-gun #t)
      (-! (-> *game-info* skill) 25.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Yellow Gun")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 1))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 1)(not (logtest? (-> *game-info* features) (game-feature gun-yellow)))(>= (-> *game-info* skill) 25.0)(= shopid3 1))
      (set! p-yellow-gun #t)
      (-! (-> *game-info* skill) 25.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Yellow Gun")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 1))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 2)(not (logtest? (-> *game-info* features) (game-feature gun-yellow)))(>= (-> *game-info* skill) 25.0)(= shopid2 1))
      (set! p-yellow-gun #t)
      (-! (-> *game-info* skill) 25.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Yellow Gun")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 1))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 0)(not (logtest? (-> *game-info* features) (game-feature gun-blue)))(>= (-> *game-info* skill) 32.0)(= shopid1 2))
      (set! p-blue-gun #t)
      (-! (-> *game-info* skill) 32.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Blue Gun")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 10))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 1)(not (logtest? (-> *game-info* features) (game-feature gun-blue)))(>= (-> *game-info* skill) 32.0)(= shopid3 2))
      (set! p-blue-gun #t)
      (-! (-> *game-info* skill) 32.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Blue Gun")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 10))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 2)(not (logtest? (-> *game-info* features) (game-feature gun-blue)))(>= (-> *game-info* skill) 32.0)(= shopid2 2))
      (set! p-blue-gun #t)
      (-! (-> *game-info* skill) 32.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Blue Gun")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 10))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 0)(not (logtest? (-> *game-info* features) (game-feature gun-dark)))(>= (-> *game-info* skill) 40.0)(= shopid1 3))
      (set! p-dark-gun #t)
      (-! (-> *game-info* skill) 40.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Peacemaker")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 100))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 1)(not (logtest? (-> *game-info* features) (game-feature gun-dark)))(>= (-> *game-info* skill) 40.0)(= shopid3 3))
      (set! p-dark-gun #t)
      (-! (-> *game-info* skill) 40.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Peacemaker")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 100))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 2)(not (logtest? (-> *game-info* features) (game-feature gun-dark)))(>= (-> *game-info* skill) 40.0)(= shopid2 3))
      (set! p-dark-gun #t)
      (-! (-> *game-info* skill) 40.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Peacemaker")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 100))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 0)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-speed)))(>= (-> *game-info* skill) 10.0)(= shopid1 4))
      (set! p-upgrade-red #t)
      (-! (-> *game-info* skill) 10.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Scattergun ROF")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 1000))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 1)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-speed)))(>= (-> *game-info* skill) 10.0)(= shopid3 4))
      (set! p-upgrade-red #t)
      (-! (-> *game-info* skill) 10.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Scattergun ROF")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 1000))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 2)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-speed)))(>= (-> *game-info* skill) 10.0)(= shopid2 4))
      (set! p-upgrade-red #t)
      (-! (-> *game-info* skill) 10.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Scattergun ROF")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 1000))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 0)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-ammo)))(>= (-> *game-info* skill) 15.0)(= shopid1 5))
      (set! p-upgrade-ammo #t)
      (-! (-> *game-info* skill) 15.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Upgraded Ammo")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 10000))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 1)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-ammo)))(>= (-> *game-info* skill) 15.0)(= shopid3 5))
      (set! p-upgrade-ammo #t)
      (-! (-> *game-info* skill) 15.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Upgraded Ammo")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 10000))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 2)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-ammo)))(>= (-> *game-info* skill) 15.0)(= shopid2 5))
      (set! p-upgrade-ammo #t)
      (-! (-> *game-info* skill) 15.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Upgraded Ammo")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 10000))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 0)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-damage)))(>= (-> *game-info* skill) 20.0)(= shopid1 6))
      (set! p-upgrade-damage #t)
      (-! (-> *game-info* skill) 20.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Upgraded Damage")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 100000))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 1)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-damage)))(>= (-> *game-info* skill) 20.0)(= shopid3 6))
      (set! p-upgrade-damage #t)
      (-! (-> *game-info* skill) 20.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Upgraded Damage")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 100000))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 2)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-damage)))(>= (-> *game-info* skill) 20.0)(= shopid2 6))
      (set! p-upgrade-damage #t)
      (-! (-> *game-info* skill) 20.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Upgraded Damage")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 100000))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 0)(!= (-> *target* fact health) 8.0)(>= (-> *game-info* skill) 8.0)(= shopid1 7))
      (-! (-> *game-info* skill) 8.0)
      (set! (-> *target* fact health) 8.0)
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    (when (and (= menu-slot 1)(!= (-> *target* fact health) 8.0)(>= (-> *game-info* skill) 8.0)(= shopid3 7))
      (-! (-> *game-info* skill) 8.0)
      (set! (-> *target* fact health) 8.0)
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    (when (and (= menu-slot 2)(!= (-> *target* fact health) 8.0)(>= (-> *game-info* skill) 8.0)(= shopid2 7))
      (-! (-> *game-info* skill) 8.0)
      (set! (-> *target* fact health) 8.0)
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    (when (and (= menu-slot 0)(= p-upgrade-vehicles #f)(>= (-> *game-info* skill) 32.0)(= shopid1 8))
      (-! (-> *game-info* skill) 32.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Upgraded Vehicles")
      (set! item-update #t)
      (set! p-upgrade-vehicles #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 1000000))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      ) 
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    (when (and (= menu-slot 1)(= p-upgrade-vehicles #f)(>= (-> *game-info* skill) 32.0)(= shopid3 8))
      (-! (-> *game-info* skill) 32.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Upgraded Vehicles")
      (set! item-update #t)
      (set! p-upgrade-vehicles #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 1000000))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      ) 
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    (when (and (= menu-slot 2)(= p-upgrade-vehicles #f)(>= (-> *game-info* skill) 32.0)(= shopid2 8))
      (-! (-> *game-info* skill) 32.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Upgraded Vehicles")
      (set! item-update #t)
      (set! p-upgrade-vehicles #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 1000000))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    (when (and (= menu-slot 0)(= p-double-shot #f)(>= (-> *game-info* skill) 25.0)(= shopid1 9))
      (-! (-> *game-info* skill) 25.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Double Shot")
      (set! item-update #t)
      (set! p-double-shot #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 10000000))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    (when (and (= menu-slot 1)(= p-double-shot #f)(>= (-> *game-info* skill) 25.0)(= shopid3 9))
      (-! (-> *game-info* skill) 25.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Double Shot")
      (set! item-update #t)
      (set! p-double-shot #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 10000000))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    (when (and (= menu-slot 2)(= p-double-shot #f)(>= (-> *game-info* skill) 25.0)(= shopid2 9))
      (-! (-> *game-info* skill) 25.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Double Shot")
      (set! item-update #t)
      (set! p-double-shot #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 10000000))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    (when (and (= menu-slot 0)(= p-explode-shot #f)(>= (-> *game-info* skill) 35.0)(= shopid1 10))
      (-! (-> *game-info* skill) 35.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Explosive Shot")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* continue-deaths) 1))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    (when (and (= menu-slot 1)(= p-explode-shot #f)(>= (-> *game-info* skill) 35.0)(= shopid3 10))
      (-! (-> *game-info* skill) 35.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Explosive Shot")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* continue-deaths) 1))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    (when (and (= menu-slot 2)(= p-explode-shot #f)(>= (-> *game-info* skill) 35.0)(= shopid2 10))
      (-! (-> *game-info* skill) 35.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Explosive Shot")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* continue-deaths) 1))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    (when (and (= menu-slot 0)(= (-> *game-info* total-deaths) 3)(>= (-> *game-info* skill) 100.0)(= shopid1 99))
      (-! (-> *game-info* skill) 100.0)
      (set! shopitem1 "(Out of Stock)")
      (set! (-> *game-info* total-deaths) 4)
      (set! item-tss1 "Red Eco Shard")
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 400000000))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 1)(= (-> *game-info* total-deaths) 3)(>= (-> *game-info* skill) 100.0)(= shopid3 99))
      (-! (-> *game-info* skill) 100.0)
      (set! shopitem3 "(Out of Stock)")
      (set! (-> *game-info* total-deaths) 4)
      (set! item-tss1 "Red Eco Shard")
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 400000000))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 2)(= (-> *game-info* total-deaths) 3)(>= (-> *game-info* skill) 100.0)(= shopid2 99))
      (-! (-> *game-info* skill) 100.0)
      (set! shopitem2 "(Out of Stock)")
      (set! (-> *game-info* total-deaths) 4)
      (set! item-tss1 "Red Eco Shard")
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 400000000))
      (when (= teleport-back? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (= in-intro? #t)
      (set! shop-tutorial #t)
    )
  )


  (when (= item-update #t)
  (+! item-tracker 1)
  (when (= item-tracker 1)
    (set! item-ts1 item-tss1)
  )
  (when (= item-tracker 2)
    (set! item-ts2 item-tss1)
  )
  (when (= item-tracker 3)
    (set! item-ts3 item-tss1)
  )
  (when (= item-tracker 4)
    (set! item-ts4 item-tss1)
  )
  (when (= item-tracker 5)
    (set! item-ts5 item-tss1)
  )
  (when (= item-tracker 6)
    (set! item-ts6 item-tss1)
  )
  (when (= item-tracker 7)
    (set! item-ts7 item-tss1)
  )
  (when (= item-tracker 8)
    (set! item-ts8 item-tss1)
  )
  (when (= item-tracker 9)
    (set! item-ts9 item-tss1)
  )
  (when (= item-tracker 10)
    (set! item-ts10 item-tss1)
  )
  (when (= item-tracker 11)
    (set! item-ts11 item-tss1)
  )
  (when (= item-tracker 12)
    (set! item-ts12 item-tss1)
  )
  (set! item-update #f)
)

(when (= item-refresh #t)
  (set! item-ts1 "")
  (set! item-ts2 "")
  (set! item-ts3 "")
  (set! item-ts4 "")
  (set! item-ts5 "")
  (set! item-ts6 "")
  (set! item-ts7 "")
  (set! item-ts8 "")
  (set! item-ts9 "")
  (set! item-ts10 "")
  (set! item-ts11 "")
  (set! item-ts12 "")
  (set! item-tss1 "")
  (set! item-tracker 0)
  (set! p-dark-gun #f)
  (set! p-blue-gun #f)
  (set! p-yellow-gun #f)
  (set! p-upgrade-ammo #f)
  (set! p-upgrade-damage #f)
  (set! p-upgrade-red #f)
  (set! p-upgrade-vehicles #f)
  (set! p-double-shot #f)
  (set! p-explode-shot #f)
  (set! item-refresh #f)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(when (and (= popup-shop #t)(= (paused?) #f)(= in-menu2 #f)(not *scene-player*))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>R3<COLOR_WHITE>:<COLOR_GREEN> Access Shop"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(= already-teleported? #f)
(!= (-> (level-get-target-inside *level*) name) 'hiphog)
(= print-stage 4)
(!= act-act 4)
(= in-game? #t)
)
  (set! teleport-hiphog #t)
)

(when 
(and 
(= teleport-hiphog #t)
(!= (-> (level-get-target-inside *level*) name) 'hiphog)
(!= print-stage 4)
)
  (set! teleport-hiphog #f)
  (set! teleport-back? #f)
)

(when (and (= teleport-hiphog #t)(= already-teleported? #f)(cpad-pressed? 0 r3))
  (send-event *target* 'continue (get-continue-by-name *game-info* "hiphog-start"))
  (set! already-teleported? #t)
  (set! teleport-hiphog #f)
  (set! teleport-wait #t)
  (set! pause-menu-blocked? #t)
)


(when (and 
(!= (-> (level-get-target-inside *level*) name) 'hiphog)
(= teleport-back? #t)
(= (pause-allowed?) #t)
(= (paused?) #f)
)
  (when (= act-stage 4)
    (send-event *target* 'continue (get-continue-by-name *game-info* "palcab-start"))
  )
  (when (= act-stage 9)
    (send-event *target* 'continue (get-continue-by-name *game-info* "tomb-boulder-pre"))
  )
  (when (= act-stage 14)
    (send-event *target* 'continue (get-continue-by-name *game-info* "castle-start"))
  )
  (set! autosave-delayed #t)
  (set! pause-menu-blocked? #f)
  (set! teleport-back? #f)
)


(when (= teleport-wait #t)
  (+! teleport-w 1)
  (when (= teleport-w 120)
    (set! teleport-back? #t)
    (set! teleport-w 0)
    (set! teleport-wait #f)
  )
)
#|
(when (pickup-collectable! (-> *target* fact) (pickup-type board) 1.0 (the-as handle #f))
  (+! (-> *game-info* total-deaths) 1)
)|#

(when (and (= teleport-hiphog #t)(= teleport-back? #f)(= already-teleported? #f))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>R3<COLOR_WHITE>:<COLOR_GREEN> Teleport to <COLOR_PINK>HipHog Shop!"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= menu-slot 0)(= in-menu2 #t))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
                                                                     <COLOR_GREEN>~S                                                      <COLOR_WHITE>~S
    ~%
    ~%                                                                            <COLOR_WHITE>~S
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%"
    shopitem1
    shopitem2
    shopitem3
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 125 55 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= menu-slot 1)(= in-menu2 #t))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
                                                                     <COLOR_WHITE>~S                                                      <COLOR_WHITE>~S
    ~%
    ~%                                                                            <COLOR_GREEN>~S
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%"
    shopitem1
    shopitem2
    shopitem3
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 125 55 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= menu-slot 2)(= in-menu2 #t))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
                                                                     <COLOR_WHITE>~S                                                      <COLOR_GREEN>~S
    ~%
    ~%                                                                            <COLOR_WHITE>~S
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%"
    shopitem1
    shopitem2
    shopitem3
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 125 55 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

;menu params
(when (and (= in-menu #t)(= (paused?) #f)(= (-> *game-info* karma) 1.0)(not (cpad-pressed? 0 x)))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Welcome to<COLOR_RED> Roguelike Jak II<COLOR_WHITE>
~%<COLOR_BLUE>Made by Kraken
~%
~%<COLOR_WHITE>When you <COLOR_GREEN>start your run<COLOR_WHITE>,
~%you will be transported to the dimensions where Jak
~%no longer exists, and you must take his place
~%by completing missions, and fulfilling the prophecy.
~% 
~%Jak dying means <COLOR_RED>Perma-Death<COLOR_WHITE>!
~%Orbs will be rewarded for playing well. But if you die, you lose everything!
~%Talk to Vin to look at his shop here. You can save up <COLOR_PINK>Tokens<COLOR_WHITE> to purchase items
~%to put into your run! <COLOR_PINK>Tokens<COLOR_WHITE> are obtained from collecting skull gems.
~%And finally, the only weapon Jak has is the red gun. The rest is purchasable in the HipHog shop.
~%You can exit the level to <COLOR_GREEN>start your run<COLOR_WHITE>.
~%
~%
~%<COLOR_BLUE>X<COLOR_GREEN> Continue"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 55 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-menu #t)(= (paused?) #f)(= win-lose #f)(>= (-> *game-info* karma) 2.0)(not (cpad-pressed? 0 x)))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Welcome to<COLOR_RED> Roguelike Jak II<COLOR_WHITE>!
~%<COLOR_BLUE>Made by Kraken
~%
~%
<COLOR_RED>~%You Died!
~%<COLOR_WHITE>Skulls Gems turned into Tokens:
~%<COLOR_YELLOW>~d
~%
~%
~%
~%<COLOR_WHITE>Progress:
~%<COLOR_GREEN> Act ~d <COLOR_YELLOW>Stage ~d
~%
~%
~%
~%
<COLOR_WHITE>Current Tokens:
~%<COLOR_PINK>~d
~%
~%<COLOR_GREEN>Press <COLOR_BLUE>X<COLOR_GREEN> to Continue"
    (the int temp-skullgemamount)
    act-act
    print-stage
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 25 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-menu #t)(= (paused?) #f)(= win-lose #t)(>= (-> *game-info* karma) 2.0)(not (cpad-pressed? 0 x)))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "~%<COLOR_GREEN>~%You Won!
~%
~%<COLOR_WHITE>Skulls Gems turned into Tokens:
~%<COLOR_YELLOW>~d
~%
~%
~%<COLOR_WHITE>Progress:
~%<COLOR_GREEN> Act ~d <COLOR_YELLOW>Stage ~d
~%
~%
~%<COLOR_WHITE>Current Tokens:
~%<COLOR_PINK>~d
~%
~%
~%<COLOR_ORANGE>Explosive Shot unlocked in shops across all dimensions!
~%<COLOR_RED>The Time Loop remains broken.
~%<COLOR_ORANGE>Hint: Try to collect important items for Vin!
~%
~%<COLOR_GREEN>Press <COLOR_BLUE>X<COLOR_GREEN> to Continue"
    (the int temp-skullgemamount)
    act-act
    print-stage
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 25 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= start-stage #t)(cpad-pressed? 0 r3))
  (set! tutorial-completed? #t)
  (set! wait-exit #t)
  (set! start-stage #f)
  (set! in-hub? #f)
)

(when (and (= in-menu #t) (cpad-pressed? 0 x))
  (set! camera-unlocked #t)
  (set! pause-menu-blocked? #f)
  (set! in-menu #f)
  (set! display-death-screen #f)
  (set! win-lose #f)
  (set! item-ts1 "")
  (set! item-ts2 "")
  (set! item-ts3 "")
  (set! item-ts4 "")
  (set! item-ts5 "")
  (set! item-ts6 "")
  (set! item-ts7 "")
  (set! item-ts8 "")
  (set! item-ts9 "")
  (set! item-ts10 "")
  (when (= (-> *game-info* karma) 1.0)
    (set! (-> *game-info* karma) 2.0)
  )
  (set! post-item-display? #f)
)

#| All of these are set to IDs

Here are the shop IDs
1 Yellow Gun (25 orbs)
2 Blue Gun (32 orbs)
3 Peacemaker (40 orbs)
4 Upgrade Red speed (10 orbs)
5 Upgrade Ammo (15 orbs)
6 Upgrade Damage (20 orbs)
7 Full HP (7 orbs)
8 Buffed Vehicles
9 Double Shot
99 Red Eco Shard


|#

(when (and 
(= in-menu2 #t)
(= p-yellow-gun #f)
(or
(and (= shopid1 1) (= menu-slot 0))
(and (= shopid2 1) (= menu-slot 2))
(and (= shopid3 1) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>Unlocks the Yellow Gun"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= in-menu2 #t)
(= p-blue-gun #f)
(or
(and (= shopid1 2) (= menu-slot 0))
(and (= shopid2 2) (= menu-slot 2))
(and (= shopid3 2) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>Unlocks the Blue Gun"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= in-menu2 #t)
(= p-dark-gun #f)
(or
(and (= shopid1 3) (= menu-slot 0))
(and (= shopid2 3) (= menu-slot 2))
(and (= shopid3 3) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>Unlocks the Peacemaker"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and 
(= in-menu2 #t)
(= p-upgrade-red #f)
(or
(and (= shopid1 4) (= menu-slot 0))
(and (= shopid2 4) (= menu-slot 2))
(and (= shopid3 4) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>Rate of fire increased on the Scattergun"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= in-menu2 #t)
(= p-upgrade-ammo #f)
(or
(and (= shopid1 5) (= menu-slot 0))
(and (= shopid2 5) (= menu-slot 2))
(and (= shopid3 5) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>x2 on ammo for all guns"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= in-menu2 #t)
(= p-upgrade-damage #f)
(or
(and (= shopid1 6) (= menu-slot 0))
(and (= shopid2 6) (= menu-slot 2))
(and (= shopid3 6) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>x2 damage increase for all weapons"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and 
(= in-menu2 #t)
(or
(and (= shopid1 7) (= menu-slot 0))
(and (= shopid2 7) (= menu-slot 2))
(and (= shopid3 7) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK>Refills your HP to maximum"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and 
(= in-menu2 #t)
(= p-upgrade-vehicles #f)
(or
(and (= shopid1 8) (= menu-slot 0))
(and (= shopid2 8) (= menu-slot 2))
(and (= shopid3 8) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK>x3 HP, and x3 speed for all vehicles~%(excluding guard vehicles)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and 
(= in-menu2 #t)
(= p-double-shot #f)
(or
(and (= shopid1 9) (= menu-slot 0))
(and (= shopid2 9) (= menu-slot 2))
(and (= shopid3 9) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK>Every projectile fires twice"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and 
(= in-menu2 #t)
(= p-explode-shot #f)
(or
(and (= shopid1 10) (= menu-slot 0))
(and (= shopid2 10) (= menu-slot 2))
(and (= shopid3 10) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK>Every projectile spawns a grenade on impact"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)


(when (and (= start-stage #t)(not (cpad-hold? 0 r3)))
   (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>R3<COLOR_WHITE>:<COLOR_GREEN> Start Run"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= start-stage #t)(cpad-hold? 0 r3))
   (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>R3<COLOR_WHITE>:<COLOR_YELLOW> Start Run"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

#| shop
(when (and (= in-menu #t)(cpad-hold? 0 r1))

)
|#
(when (and (= act-act 1)(= (-> *game-info* buzzer-total) 1.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW><<COLOR_WHITE>---<---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 1)(= (-> *game-info* buzzer-total) 2.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW><---<<COLOR_WHITE>---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 1)(= (-> *game-info* buzzer-total) 3.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW><---<---<<COLOR_WHITE>---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 1)(= (-> *game-info* buzzer-total) 4.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW><---<---<---<<COLOR_WHITE>---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 1)(= (-> *game-info* buzzer-total) 5.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW><---<---<---<---<COLOR_RED>(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
;----------------------------SECOND ACT-----------------------------
(when (and (= act-act 2)(= (-> *game-info* buzzer-total) 6.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE><<COLOR_WHITE>---<---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 2)(= (-> *game-info* buzzer-total) 7.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE><---<<COLOR_WHITE>---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 2)(= (-> *game-info* buzzer-total) 8.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE><---<---<<COLOR_WHITE>---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 2)(= (-> *game-info* buzzer-total) 9.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE><---<---<---<<COLOR_WHITE>---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 2)(= (-> *game-info* buzzer-total) 10.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE><---<---<---<---<COLOR_RED>(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

;----------------------------THIRD ACT-----------------------------
(when (and (= act-act 3)(= (-> *game-info* buzzer-total) 11.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED><<COLOR_WHITE>---<---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 3)(= (-> *game-info* buzzer-total) 12.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED><---<<COLOR_WHITE>---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 3)(= (-> *game-info* buzzer-total) 13.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED><---<---<<COLOR_WHITE>---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 3)(= (-> *game-info* buzzer-total) 14.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED><---<---<---<<COLOR_WHITE>---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 3)(= (-> *game-info* buzzer-total) 15.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED><---<---<---<---<COLOR_RED>(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

;----------------------------DARK ACT-----------------------------
(when (and (= act-act 4)(= (-> *game-info* buzzer-total) 16.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK><<COLOR_WHITE>---<---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 4)(= (-> *game-info* buzzer-total) 17.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK><---<<COLOR_WHITE>---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 4)(= (-> *game-info* buzzer-total) 18.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK><---<---<<COLOR_WHITE>---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 4)(= (-> *game-info* buzzer-total) 19.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK><---<---<---<<COLOR_WHITE>---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 4)(= (-> *game-info* buzzer-total) 20.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK><---<---<---<---<COLOR_PINK>(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)


(when (= main-msg-1 #t)
  (+! msgi 1)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>INFO~%<COLOR_YELLOW>Yellow Eco Shard collected!"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  (when (= msgi 600)
    (set! main-msg-1 #f)
    (set! msgi 0)
  )
)
(when (= main-msg-2 #t)
  (+! msgi 1)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>INFO~%<COLOR_BLUE>Blue Eco Shard collected!"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  (when (= msgi 600)
    (set! main-msg-2 #f)
    (set! msgi 0)
  )
)
(when (= main-msg-3 #t)
  (+! msgi 1)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>INFO~%<COLOR_RED>Red Eco Shard collected!"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  (when (= msgi 600)
    (set! main-msg-3 #f)
    (set! msgi 0)
  )
)

(when (and (= (-> *game-info* total-deaths) 1)(= vin-shop #t))
    (when (= vin-talk 1)
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%Jak! I've found something that will be of high interest to us.
    ~%There's a <COLOR_YELLOW>Yellow Eco Shard<COLOR_WHITE> that a <COLOR_RED>Krimzon Guard<COLOR_WHITE> has.
    ~%I need you to go into the <COLOR_YELLOW>Yellow Eco Stage<COLOR_WHITE> and find the guard that has it.
    ~%This eco is part of our ticket out of here. I'll get it the second you collect it.
    ~%So please, don't worry about dying. You've got me to pull you back every time!
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (= vin-talk 2)
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%Listen, if we want to get out of here, we should think about getting certain items across dimensions.
    ~%If you happen to see a <COLOR_YELLOW>Yellow Eco Shard<COLOR_WHITE> that a <COLOR_RED>Krimzon Guard<COLOR_WHITE> has,
    ~%don't hesitate to go and grab it. My radar indicates it's located in Act 1.
    ~%<COLOR_RED>Krimzon Guards<COLOR_YELLOW> can also drop orbs! High risk, high reward.
    ~%
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (= vin-talk 3)
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%Remember, we need an item in order to locate the dimension where all the dark eco is concentrated.
    ~%Right now, a <COLOR_YELLOW>Yellow Eco Shard<COLOR_WHITE> can be collected from a <COLOR_RED>Krimzon Guard<COLOR_WHITE>.
    ~%It's in Act 1, if you see it, please get it for me!
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (= vin-talk 4)
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%Alright, here's the deal...
    ~%Right now, a <COLOR_YELLOW>Yellow Eco Shard<COLOR_WHITE> can be collected from a <COLOR_RED>Krimzon Guard<COLOR_WHITE> in Act 1.
    ~%This item is very useful, and could help us locate the original dimension.
    ~%<COLOR_YELLOW>If you cross dimensions with 8HP, your chances increase on finding it.
    ~%This is because of a luck stat I found attached to you. No damage, More luck!
    ~%
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    
  )

(when (and (= (-> *game-info* total-deaths) 2)(= vin-shop #t))
  (when (= vin-talk 1)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%Amazing! This shard you collected is 1 of 3 pieces we need to locate the original dimension!
    ~%The next item you'll need to look out for is a <COLOR_BLUE>Blue Eco Shard<COLOR_WHITE>.
    ~%Somewhere in Act 2, <COLOR_PINK>a crate<COLOR_WHITE> contains the piece we need.
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= vin-talk 2)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%This shard you got is incredibly powerful!~%But it would seem that this item you've collected is one of three we need.
    ~%Right now, you're looking for a <COLOR_BLUE>Blue Eco Shard<COLOR_WHITE> in Act 2.
    ~%My radar says <COLOR_PINK>a crate<COLOR_WHITE> could have this item.
    ~%
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= vin-talk 3)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%You've found the <COLOR_YELLOW>Yellow Eco Shard<COLOR_WHITE>! Good work!
    ~%Next you'll need a <COLOR_BLUE>Blue Eco Shard<COLOR_WHITE> from <COLOR_PINK>a crate<COLOR_WHITE> that contains it.
    ~%This item can be found in Act 2, so keep looking!
    ~%<COLOR_YELLOW>If you cross dimensions with 8HP, your chances increase on finding it.
    ~%This is because of a luck stat I found attached to you. No damage, More luck!
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= vin-talk 4)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%Good job for finding this piece for me.
    ~%This item is one of three, you'll need to look out for a <COLOR_BLUE>Blue Eco Shard<COLOR_WHITE> this time.
    ~%Somewhere in Act 2, my scans read that <COLOR_PINK>a crate<COLOR_WHITE> could contain this item.
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
)

(when (and (= (-> *game-info* total-deaths) 3)(= vin-shop #t))
  (when (= vin-talk 1)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%Nice work! We have almost all of the pieces we need!
    ~%Now we just have to find a <COLOR_RED>Red Eco Shard<COLOR_WHITE> from Act 3.
    ~%My scans say that it's in <COLOR_YELLOW>the Hiphog Shop<COLOR_WHITE> selling for 100 orbs.
    ~%<COLOR_YELLOW>We're so close, Jak! This will be the last piece to locate our original dimension.
    ~%
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= vin-talk 2)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%Nice work! We have almost all of the pieces we need!
    ~%Now we just have to find a <COLOR_RED>Red Eco Shard<COLOR_WHITE> from Act 3.
    ~%My scans say that it's in <COLOR_YELLOW>the Hiphog Shop<COLOR_WHITE> selling for 100 orbs.
    ~%<COLOR_YELLOW>We're so close, Jak! This will be the last piece to locate our original dimension.
    ~%
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= vin-talk 3)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%Nice work! We have almost all of the pieces we need!
    ~%Now we just have to find a <COLOR_RED>Red Eco Shard<COLOR_WHITE> from Act 3.
    ~%My scans say that it's in <COLOR_YELLOW>the Hiphog Shop<COLOR_WHITE> selling for 100 orbs.
    ~%<COLOR_YELLOW>We're so close, Jak! This will be the last piece to locate our original dimension.
    ~%
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= vin-talk 4)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%Nice work! We have almost all of the pieces we need!
    ~%Now we just have to find a <COLOR_RED>Red Eco Shard<COLOR_WHITE> from Act 3.
    ~%My scans say that it's in <COLOR_YELLOW>the Hiphog Shop<COLOR_WHITE> selling for 100 orbs.
    ~%<COLOR_YELLOW>We're so close, Jak! This will be the last piece to locate our original dimension.
    ~%
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
)

(when (and (= (-> *game-info* total-deaths) 4)(= vin-shop #t))
  (when (or
    (= vin-talk 1)
    (= vin-talk 2)
    (= vin-talk 3)
    (= vin-talk 4)
  )
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
    <COLOR_WHITE>Vin:~%Jak! I've successfully triangulated the position of where this <COLOR_PINK>dark eco<COLOR_WHITE> is coming from!
    ~%Thanks to you, we can finally travel there, you've just got to get past <COLOR_YELLOW>Act 3<COLOR_WHITE>.
    ~%But be warned, as I'm sure you've noticed, the enemies have gotten stronger with how close you've
    ~%drawn near. The original dimension we were in is completely covered in MORE THAN vast amounts!
    ~%I-I mean, it's not just a quantifiable amount.. It's virtually infinite amounts of <COLOR_PINK>dark eco<COLOR_WHITE>!
    ~%If you're still having trouble, you can always give me <COLOR_YELLOW>Skull Gems<COLOR_WHITE> to get stronger items.
    ~%We're all counting on you, Jak! <COLOR_GREEN>Beat MetalKor, and fulfill the prophecy again!
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
)



(when 
(and 
(= vin-shop #f) 
(= (paused?) #f)
(= (pause-allowed?) #t)
(= in-menu #f) 
(= start-stage #f) 
(= in-hub? #t)
)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>Triangle<COLOR_WHITE>:<COLOR_WHITE> Talk with Vin"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(= vin-shop #f) 
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu #t) 
(= post-item-display? #t)
(= in-hub? #t)
)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>ITEMS COLLECTED IN RUN:<COLOR_GREEN>~%~S~%~S~%~S~%~S~%~S~%~S"
    item-ts1
    item-ts2
    item-ts3
    item-ts4
    item-ts5
    item-ts6
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 165 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu #f) 
(= item-display? #t)
(= in-hub? #f)
)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>ACTIVE ITEMS:<COLOR_GREEN>~%~S~%~S~%~S~%~S~%~S~%~S"
    item-ts1
    item-ts2
    item-ts3
    item-ts4
    item-ts5
    item-ts6
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 165 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when 
(and 
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu #f) 
(= item-display? #t)
(= in-hub? #f)
)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>~%~S~%~S~%~S~%~S~%~S~%~S"
    item-ts7
    item-ts8
    item-ts9
    item-ts10
    item-ts11
    item-ts12
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 225 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu #t) 
(= post-item-display? #t)
(= in-hub? #t)
)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>~%~S~%~S~%~S~%~S~%~S~%~S"
    item-ts7
    item-ts8
    item-ts9
    item-ts10
    item-ts11
    item-ts12
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 225 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

;---------------------vvvTHIS IS TO DEBUG THE VARSvvv--------------------
(when *debug-segment*
  (when (= in-game? #t)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_GREEN>in-game? = true"
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 0 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= in-game? #f)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_RED>in-game? = false"
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 0 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= avoidc-waitb #f)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_RED>avoidc-waitb = false"
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 10 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= avoidc-waitb #t)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_GREEN>avoidc-waitb = true"
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 10 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  
  (when (= teleport-back? #t)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_GREEN>teleport-back? = true"
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 20 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= teleport-back? #f)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_RED>teleport-back? = false"
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 20 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )

  (when (= already-teleported? #t)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_GREEN>already-teleported? = true"
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 30 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= already-teleported? #f)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_RED>already-teleported? = false"
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 30 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= wait-tutorial #t)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_GREEN>wait-tutorial = true~%tutoriali = <COLOR_ORANGE>~D/1600"
      tutoriali
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 50 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= ohshit #t)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_GREEN>ohshit = true~%ohshiti = <COLOR_ORANGE>~D/3290"
      ohshiti
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 50 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )

  (when (and (= in-hub? #t)(= vin-shop #t))
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_GREEN>vin-shop = true~%vin-talk = <COLOR_ORANGE>~D/4"
      vin-talk
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 50 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  
  (when (and (= in-hub? #t)(= vin-shop #f))
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_RED>vin-shop = false~%vin-talk = <COLOR_ORANGE>~D/4"
      vin-talk
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 50 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= in-hub? #t)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_GREEN>total-deaths (story) = <COLOR_ORANGE>~D/4"
      (-> *game-info* total-deaths)
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 70 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )

  (when (= in-hub? #t)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_RED>task-deaths (game-save1) = <COLOR_ORANGE>~D~%<COLOR_RED>continue-deaths (game-save2) = <COLOR_ORANGE>~D"
      (-> *game-info* task-deaths)
      (-> *game-info* continue-deaths)
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 100 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (and (= in-hub? #f)(= wait-tutorial #f)(= ohshit #f))
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_GREEN>task-deaths (game-save1) = <COLOR_ORANGE>~D~%<COLOR_GREEN>continue-deaths (game-save2) = <COLOR_ORANGE>~D"
      (-> *game-info* task-deaths)
      (-> *game-info* continue-deaths)
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 50 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (and (= in-hub? #t))
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_GREEN>total-trys (Item amount in shop) = <COLOR_ORANGE>~D/9"
      (-> *game-info* total-trys)
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 80 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (and (= in-hub? #f)(= wait-tutorial #f)(= ohshit #f))
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_PINK>curse = <COLOR_RED>~f/1.0~%<COLOR_GREEN>luck = <COLOR_ORANGE>~f/1.0"
      curse
      luck
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 80 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )



)

(when (and (= in-hub? #f)(not *scene-player*)(> curse-level 0)(= wait-tutorial #f)(= ohshit #f))
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_PINK>Instability Level: <COLOR_RED>~d"
      curse-level
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (and (= in-hub? #f)(not *scene-player*)(= in-intro? #t)(> curse-level 0)(= wait-tutorial #f)(= ohshit #f))
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_ORANGE>This stat makes your dimension spawn Unstable Enemies.~%While colored purple, they are faster, and harder to kill. Caps at level 9~%Only city peds and guards are exempt from this, but not bosses!"
      
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 20 0.0 (font-color default) (font-flags middle shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
;---------------------^^^THIS IS TO DEBUG THE VARS^^^--------------------


;<<<<<<<<<<<<<<<<<<<<<<<<<<<<self area is meant for fixes with specific missions<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
;(send-event proc 'target-turret-get-off 90)

;Immediate mission completion without going back to mission giver.

(when 
(and 
(task-node-closed? (game-task-node sewer-enemy-blow-up-turrets))
(not (task-node-closed? (game-task-node sewer-enemy-resolution)))
)
  (task-node-close! (game-task-node sewer-enemy-resolution))
)

(when 
(and 
(task-node-closed? (game-task-node city-krew-collection-collection))
(not (task-node-closed? (game-task-node city-krew-collection-resolution)))
)
  (task-node-close! (game-task-node city-krew-collection-resolution))
)

#| clear template
(when (= log-sec 0)
    (set! di-s "")
    (set! di-s2 "")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  |#

(when 
(and 
(cpad-pressed? 0 x)
(= log-id 1)
(= in-dialogue? #t)
)
  (+! log-sec 1)
  (when (= log-sec 1)
    (set! di-s "Jak, it's me! Vin! When I dumped my brain into the eco grid,")
    (set! di-s2 "I found some code that led me to believe that")
    (set! di-s3 "I'm in a Video Game!!")
    (set! di-s4 "")
  )
  (when (= log-sec 2)
    (set! di-s "But that's the LEAST of our concerns..")
    (set! di-s2 "")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 3)
    (set! di-s "There's.. He... you-- you've got to get this all back to normal!")
    (set! di-s2 "")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 4)
    (set! di-s "I know there's systematically no way you")
    (set! di-s2 "can talk back to me, so t-to be fair...oh God!")
    (set! di-s3 "I'm not even sure you're even getting this transmission!")
    (set! di-s4 "")
  )
  (when (= log-sec 5)
    (set! di-s "Bu-but if you CAN hear me, listen carefully!")
    (set! di-s2 "Someone ELSE is in these files. I-I'm not sure who it is,")
    (set! di-s3 "but I do know he completely wrecked everything.")
    (set! di-s4 "")
  )
  (when (= log-sec 6)
    (set! di-s "The time loop is shattered! Gone! I was absolutely")
    (set! di-s2 "tricked into giving you up to him. I'm.... sorry.")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 7)
    (set! di-s "You--b-but you're safe! Safe right here in this room,")
    (set! di-s2 "where he can't hear us. Believe me, there's no possible")
    (set! di-s3 "way he can track us here... uh.. at least I think so...")
    (set! di-s4 "Oh man..")
  )
  (when (= log-sec 8)
    (set! di-s "Look, you've got to get back to your original")
    (set! di-s2 "dimension and restore all of the timelines!")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 9)
    (set! di-s "Now, I've calculated all the trajectories,")
    (set! di-s2 "I can teleport you across infinity, and put")
    (set! di-s3 "you EXACTLY where you need to be to restore")
    (set! di-s4 "each timeline.")
  )
  (when (= log-sec 10)
    (set! di-s "The system is automatic, if you complete whatever")
    (set! di-s2 "you need to do, it'll jump you to the next dimension.")
    (set! di-s3 "By my calculations, you SHOULD get closer to the")
    (set! di-s4 "source of all this.")
  )
  (when (= log-sec 11)
    (set! di-s "I know this may be a lot of information at once,")
    (set! di-s2 "but just trust me, and hopefully we get everything back to normal.")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 12)
    (set! di-s "B-but we'll need more than just your will to")
    (set! di-s2 "stay alive to repair this horrible travesty.")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 13)
    (set! di-s "Testing machine!")
    (set! di-s2 "")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 14)
    (set! log-sec 0)
    (set! in-dialogue? #f)
    (set! camera-unlocked #t)
    (set! intro-wait #t)
    (set! in-intro? #t)
    (set! intro-sec 1)
    (set! item-display? #t)
    (set! display-death-screen #t)
  )
)

(when (= intro-wait #t)
  (+! intro-waiti 1)
  (when (= intro-waiti 1)
    (reset! *load-state*)
  )
  (when (= intro-waiti 60)
    (set! tin-game-wait #t)
    (set! intro-wait #f)
    (set! intro-waiti 0)
  )
)

(when (= di-wait #t)
  (+! di-w 1)
  (when (= di-w 30)
    (set! camera-locked #t)
    (set! in-dialogue? #t)
    (set! di-w 0)
    (set! di-wait #f)
  )
)

(when (and (cpad-pressed? 0 x)(= intro-sec 1)(= in-dialogue? #t)(= in-intro? #t)) ;teleports you to city-help-kid 1st time
  (set! intro-sec 2)
  (set! camera-unlocked #t)
  (set! in-dialogue? #f)
  (set! tin-game-wait #t)
  (send-event (ppointer->process *time-of-day*) 'change 'hour 20)
)
(when (and (cpad-pressed? 0 x)(= intro-sec 2)(= in-dialogue? #t)(= in-intro? #t)) ;teleports you to shop 1st time
  (set! intro-sec 3)
  (set! (-> *game-info* skill) 70.0)
  (set! camera-unlocked #t)
  (set! in-dialogue? #f)
  (set! tin-game-wait #t)
  (send-event (ppointer->process *time-of-day*) 'change 'hour 6)
)

(when (and (= shop-tutorial #t) (!= (-> (level-get-target-inside *level*) name) 'hiphog)) ;teleports you to city-help-kid for 3rd and final time
  (send-event (ppointer->process *time-of-day*) 'change 'hour 20)
  (play-task (game-task city-help-kid) 'debug #f)
  (send-event *target* 'continue (get-continue-by-name *game-info* "ctyslumb-fort"))
  (set! intro-sec 4)
  (set! tin-game-wait #t)
  (set! shop-tutorial #f)
  (set! in-dialogue? #f)
  (set! camera-unlocked #t)
  (set! wait-pulloutgun #t)
)

(when (and (= wait-vintalk #t)(= in-menu #t))
   (+! wait-vini 1)
   (when (= wait-vini 6)
    (set! vin-talk 1)
    (set! wait-vini 0)
    (set! wait-vintalk #f)
    )
)

(when 
(and 
(not (logtest? (-> *game-info* features) (game-feature gun gun-red)))
(= intro-sec 4)
)
  (logior! (-> *game-info* features) (game-feature gun gun-red))
)

(when (and (cpad-pressed? 0 x)(= intro-sec 4)(= in-dialogue? #t)(= in-intro? #t)) ;teleports you to shop 1st time
  (set! intro-sec 5)
  (set! (-> *game-info* karma) 1.0)
  (set! autosave-delayed #t)
  (set! in-intro? #f)
  (send-event *target* 'continue (get-continue-by-name *game-info* "consite-airlock"))
  (set! (-> *game-info* total-deaths) 1)
  (play-task (game-task fortress-escape) 'debug #f)
  (set! in-dialogue? #f)
  (set! camera-unlocked #t)
)

(when (= tin-game-wait #t)
  (+! tin-wait 1)
  (when (= tin-wait 1)
    (set! log-id 2)
    (when (= intro-sec 1)
      (play-task (game-task city-help-kid) 'debug #f)
    (send-event *target* 'continue (get-continue-by-name *game-info* "ctyslumb-fort"))
    )
    (when (= intro-sec 2)
      (play-task (game-task city-help-kid) 'debug #f)
    (send-event *target* 'continue (get-continue-by-name *game-info* "ctyslumb-fort"))
    )
    (when (= intro-sec 3)
      (task-node-close! (game-task-node nest-boss-resolution))
    (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
    (set! shopitem1 "Yellow Gun (25 orbs)")
    (set! shopid1 1)
    (set! shopitem2 "Double Shot (25 orbs)")
    (set! shopid2 9)
    (set! shopitem3 "Upgrade Damage x2 (20 orbs)")
    (set! shopid3 6)
    )
    (when (= intro-sec 5)
      (play-task (game-task city-help-kid) 'debug #f)
    (send-event *target* 'continue (get-continue-by-name *game-info* "consite-airlock"))
    (set! wait-vintalk #t)
    )
  )
  (when (= tin-wait 121)
    (when (not (task-node-closed? (game-task-node nest-boss-resolution)))
      (set! tin-game? #t)
    )
    (set! tin-wait 0)
    (set! tin-game-wait #f)
  )
)


#|

    (set! traffic-metalheads? #t) ;turns on traffic lwideb'
    ;^ WHEN THIS IS TRUE ^  v THEN ALL OF THESE PARAMETERS CAN BE SET v
    (send-event *traffic-manager* 'set-target-level 5.0) ;sets guards and metalheads to fight

    (send-event *traffic-manager* 'set-target-level 100.0) ;sets metalheads to overrun everything

    (send-event *traffic-manager* 'set-target-level 10.0) ;sets guards only


|#

    ;(set! (-> (level-get-target-inside *level*) mood-func)update-mood-nest)


      (if *show-input-display* 
        (input-display-on)
        (input-display-off)
        )
      
      (none)
      )

    (defun runs-on-gem-pickup ()
      ;; Code here runs on any scout fly pickup

      (none)
      )

    (defun runs-on-task-close ()
    
      (set! level-completed? #t)
      (none)
      )

    (defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
      (let* ((from-vent? #f))
        ;; Code here runs as soon as you pickup ANY eco

        (case eco-type
          (((pickup-type eco-yellow))      
            ;; Code here runs as soon as you pickup yellow eco

            )
          (((pickup-type eco-red))      
            ;; Code here runs as soon as you pickup red eco

            )
          (((pickup-type eco-blue))      
            ;; Code here runs as soon as you pickup blue eco

            )

          (((pickup-type eco-green))      
            ;; Code here runs as soon as you pickup big green eco 

            )
          )
        
        (when from-vent?
          ;; Code here runs only if the eco was picked up from a vent

          )
        )

      (none)
      )

    (defun runs-on-jak-spawn ()
      ;; Code here runs every time jak spawns (loading a file new game or death)   

      (none)
      )

    (defun runs-on-jak-death ((death-event symbol))
      (case death-event
        (('dying)
          ;; Code here runs immediately every time jak dies, before any death animation or death cutscene
          (set! waitdie #t)
          )
        (('blackout)
          ;; Code here runs after jak dies (and any death cutscene finishes), during the blackout before he spawns

          )
        )
      
      (none)
      )


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; deprecated function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| these are no longer recommended/supported however we include them anyways to not break anyones mods.
    |#
