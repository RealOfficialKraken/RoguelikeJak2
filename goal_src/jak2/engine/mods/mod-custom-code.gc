    ;;-*-Lisp-*-
    (in-package goal)

    ;; name: mod-custom-code.gc
    ;; name in dgo: mod-custom-code
    ;; dgos: TODO


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; What is this file for.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| This file contains function defenitions that are pre placed in the mod base,
    so if you place custom code inside of these functions, it will exectue based on
    the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
    to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
    an orb |#











#| TODO:


- Make a settings file for saved runs
- Fix crashes at drill platform
- Make items and in-game item chooser
- Make Dark Eco mode
- Make the campaign and Ending to unlock Dark Eco Mode
- Make a mutators section in the main menu

|#
    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Begin function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

(define matt-str (new 'global 'string 2048 (the-as string #f)))
(define *pc-encoded-matt-str* (new 'global 'string 2048 (the-as string #f)))


;traffic manipulations
(define traffic-metalheads? #f)

;randomizer vars
(define act1-1 #f)
(define act1-2 #f)
(define act1-3 #f)
(define act1-4 #f)
(define act1-5 #f)
(define act1-shop #f)
(define act2-1 #f)
(define act2-2 #f)
(define act2-3 #f)
(define act2-4 #f)
(define act2-5 #f)
(define act2-shop #f)
(define act3-1 #f)
(define act3-2 #f)
(define act3-3 #f)
(define act3-4 #f)
(define act3-5 #f)
(define act3-shop #f)
(define act-before1 0)
(define act-before2 0)
(define act-before3 0)
(define act-before4 0)
(define act-before5 0)
(define act-before6 0)
(define act-before7 0)
(define act-before8 0)
(define act-before9 0)
(define act-before10 0)
(define act-before11 0)
(define act-before12 0)

(define wait-for-ingame #f)
(define waiting 0)

(define give-gunred? #f)

;menu funct
(define tutorial-completed? #f)
(define in-menu #f)
(define pause-menu-blocked? #f)
(define camera-locked #f)
(define wait-start #f)
(define waits-frame 0)
(define wait-exit #f)
(define waite-frame 0)
(define waitenter #f)
(define waitenteri 0)
(define quicksave #f)
(define display-run #f)
(define print-stage 0)
(define act-act 0)
(define current-level "")
(define mod-s "")
(define purchase-amount 0)

(define waitdie #f)
(define waitdi 0)

(define temp-skullgemamount 0.0)
(define temp-health 0.0)

(define amountofdeaths 0) ;This is a saved variable inside RLsettings.ini.






;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    (defun runs-every-frame ()

;Checks to see if there's a new game, then sets you to look-around camera with the main menu.
(when ;is new game started?
(and 
*target*
(= tutorial-completed? #f)
(= (pause-allowed?) #t)
(= (-> (level-get-target-inside *level*) name) 'prison)
)
  (set! wait-start #t)
  (set! (-> *target* fact health) 8.0)
  (play-task (game-task fortress-escape) 'debug #f)
  (set! act-before1 0)
  (set! act-before2 0)
  (set! act-before3 0)
  (set! act-before4 0)
  (set! act-before5 0)
  (set! act-before6 0)
  (set! act-before7 0)
  (set! act-before8 0)
  (set! act-before9 0)
  (set! act-before10 0)
  (set! act-before11 0)
  (set! act-before12 0)
  (set! display-run #f)
  (auto-save-user)
)

;Teleports the player to a random stage, and then sets their task.
    (when (= act1-1 #t)
      (let (
        (level-pick (rand-vu-int-range 1 13))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (when (= level-pick act-before1)
            (set! level-pick (rand-vu-int-range 1 13))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(!= act-before1 1))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-tower) 'debug #f)
            (set! act-before1 1)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before1 2))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-start"))
            (play-task (game-task atoll-water) 'debug #f)
            (set! act-before1 2)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before1 3))
            (send-event *target* 'continue (get-continue-by-name *game-info* "fordumpa-start"))
            (play-task (game-task fortress-dump) 'debug #f)
            (set! act-before1 3)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before1 4))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-krew-delivery) 'debug #f)
            (set! act-before1 4)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before1 5))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-start"))
            (play-task (game-task atoll-sig) 'debug #f)
            (set! act-before1 5)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before1 6))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewer-start"))
            (play-task (game-task sewer-enemy) 'debug #f)
            (set! act-before1 6)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before1 7))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-rescue) 'debug #f)
            (set! act-before1 7)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(!= act-before1 8))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-battle"))
            (play-task (game-task atoll-battle) 'debug #f)
            (set! act-before1 8)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(!= act-before1 9))
            (send-event *target* 'continue (get-continue-by-name *game-info* "drill1-warp"))
            (play-task (game-task drill-eggs) 'debug #f)
            (set! act-before1 9)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 10)(!= act-before1 10))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-krew-collection) 'debug #f)
            (set! act-before1 10)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 11)(!= act-before1 11))
            (send-event *target* 'continue (get-continue-by-name *game-info* "vinroom-start"))
            (play-task (game-task city-power) 'debug #f)
            (set! act-before1 11)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 12)(!= act-before1 12))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-keira-delivery) 'debug #f)
            (set! act-before1 12)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 13)(!= act-before1 13))
            (send-event *target* 'continue (get-continue-by-name *game-info* "mountain-start"))
            (play-task (game-task mountain-lens) 'debug #f)
            (set! act-before1 12)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! act-act 1)
        )
    )
    (when (= act1-2 #t)
      (let (
        (level-pick (rand-vu-int-range 1 13))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (when (= level-pick act-before1)
            (set! level-pick (rand-vu-int-range 1 13))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(!= act-before1 1))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-tower) 'debug #f)
            (set! act-before2 1)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before1 2))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-start"))
            (play-task (game-task atoll-water) 'debug #f)
            (set! act-before2 2)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before1 3))
            (send-event *target* 'continue (get-continue-by-name *game-info* "fordumpa-start"))
            (play-task (game-task fortress-dump) 'debug #f)
            (set! act-before2 3)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before1 4))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-krew-delivery) 'debug #f)
            (set! act-before2 4)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before1 5))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-start"))
            (play-task (game-task atoll-sig) 'debug #f)
            (set! act-before2 5)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before1 6))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewer-start"))
            (play-task (game-task sewer-enemy) 'debug #f)
            (set! act-before2 6)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before1 7))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-rescue) 'debug #f)
            (set! act-before2 7)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(!= act-before1 8))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-battle"))
            (play-task (game-task atoll-battle) 'debug #f)
            (set! act-before2 8)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(!= act-before1 9))
            (send-event *target* 'continue (get-continue-by-name *game-info* "drill1-warp"))
            (play-task (game-task drill-eggs) 'debug #f)
            (set! act-before2 9)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 10)(!= act-before1 10))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-krew-collection) 'debug #f)
            (set! act-before2 10)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 11)(!= act-before1 11))
            (send-event *target* 'continue (get-continue-by-name *game-info* "vinroom-start"))
            (play-task (game-task city-power) 'debug #f)
            (set! act-before2 11)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 12)(!= act-before1 12))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-keira-delivery) 'debug #f)
            (set! act-before2 12)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 13)(!= act-before1 13))
            (send-event *target* 'continue (get-continue-by-name *game-info* "mountain-start"))
            (play-task (game-task mountain-lens) 'debug #f)
            (set! act-before2 12)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
        )
    )

    (when (= act1-3 #t)
      (let (
        (level-pick (rand-vu-int-range 1 13))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (when (= level-pick (or act-before1 act-before2))
            (set! level-pick (rand-vu-int-range 1 13))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before1 1)(!= act-before2 1)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-tower) 'debug #f)
            (set! act-before3 1)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(and (!= act-before1 2)(!= act-before2 2)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-start"))
            (play-task (game-task atoll-water) 'debug #f)
            (set! act-before3 2)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(and (!= act-before1 3)(!= act-before2 3)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "fordumpa-start"))
            (play-task (game-task fortress-dump) 'debug #f)
            (set! act-before3 3)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(and (!= act-before1 4)(!= act-before2 4)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-krew-delivery) 'debug #f)
            (set! act-before3 4)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(and (!= act-before1 5)(!= act-before2 5)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-start"))
            (play-task (game-task atoll-sig) 'debug #f)
            (set! act-before3 5)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(and (!= act-before1 6)(!= act-before2 6)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewer-start"))
            (play-task (game-task sewer-enemy) 'debug #f)
            (set! act-before3 6)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(and (!= act-before1 7)(!= act-before2 7)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-rescue) 'debug #f)
            (set! act-before3 7)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(and (!= act-before1 8)(!= act-before2 8)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "atoll-battle"))
            (play-task (game-task atoll-battle) 'debug #f)
            (set! act-before3 8)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(and (!= act-before1 9)(!= act-before2 9)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "drill1-warp"))
            (play-task (game-task drill-eggs) 'debug #f)
            (set! act-before3 9)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 10)(and (!= act-before1 10)(!= act-before2 10)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-krew-collection) 'debug #f)
            (set! act-before3 10)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 11)(and (!= act-before1 11)(!= act-before2 11)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "vinroom-start"))
            (play-task (game-task city-power) 'debug #f)
            (set! act-before3 11)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 12)(and (!= act-before1 12)(!= act-before2 12)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-keira-delivery) 'debug #f)
            (set! act-before3 12)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 13)(and (!= act-before1 13)(!= act-before2 13)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "mountain-start"))
            (play-task (game-task mountain-lens) 'debug #f)
            (set! act-before3 12)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
        )
    )

    (when (= act1-4 #t)
      (let (
        (level-pick 1)
        )
          (when (= level-pick 1)
            (send-event *target* 'continue (get-continue-by-name *game-info* "palcab-start"))
            (play-task (game-task palace-cable) 'debug #f)
          )
        )
        (set! act1-4 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! wait-for-ingame #t)
        
    )    
    (when (= act1-5 #t)
      (let (
        (level-pick 1)
        (gp-0 (-> *game-info* features))
        )
          (when (= level-pick 1)
            (send-event *target* 'continue (get-continue-by-name *game-info* "palroof-boss"))
            (play-task (game-task palace-boss) 'debug #f)
          )
        
        (set! act1-5 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! wait-for-ingame #t)
        (when (and 
        (not (logtest? gp-0 (game-feature gun-red)))
        (not (logtest? gp-0 (game-feature gun-yellow)))
        (not (logtest? gp-0 (game-feature gun-blue)))
        (not (logtest? gp-0 (game-feature gun-dark)))
        )
        (logior! gp-0 (game-feature gun-red))
        (set! give-gunred? #t)
        )
      )
    )    


;-------------------------ACT 2------------------------------
(when (= act2-1 #t)
      (let (
        (level-pick (rand-vu-int-range 1 11))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 11))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (set! act-act 2)
          (when (and (= level-pick 1)(!= act-before4 1))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-enemy) 'debug #f)
            (set! act-before4 1)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before4 2))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forest-start"))
            (play-task (game-task forest-scouts) 'debug #f)
            (set! act-before4 2)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before4 3))
            (send-event *target* 'continue (get-continue-by-name *game-info* "dig1-start"))
            (play-task (game-task dig-knock-down) 'debug #f)
            (set! act-before4 3)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before4 4))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-grenade) 'debug #f)
            (set! act-before4 4)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before4 5))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-start"))
            (play-task (game-task city-port-run) 'debug #f)
            (set! act-before4 5)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before4 6))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-meet-brutter) 'debug #f)
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (set! act-before4 6)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before4 7))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewer-start"))
            (play-task (game-task sewer-board) 'debug #f)
            (set! act-before4 7)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(!= act-before4 8))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctymarkb-tanker"))
            (play-task (game-task city-intercept-tanker) 'debug #f)
            (set! act-before4 8)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(!= act-before4 9))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-shuttle) 'debug #f)
            (set! act-before4 9)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 10)(!= act-before4 10))
            (send-event *target* 'continue (get-continue-by-name *game-info* "dig3-start"))
            (play-task (game-task dig-find-totem) 'debug #f)
            (set! act-before4 10)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 11)(!= act-before4 11))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-destroy-guard-vehicles) 'debug #f)
            (set! act-before4 11)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
        )
    )
  (when (= act2-2 #t)
      (let (
        (level-pick (rand-vu-int-range 1 11))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 11))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before4 1)(!= act-before5 1)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-enemy) 'debug #f)
            (set! act-before5 1)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before4 2))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forest-start"))
            (play-task (game-task forest-scouts) 'debug #f)
            (set! act-before5 2)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before4 3))
            (send-event *target* 'continue (get-continue-by-name *game-info* "dig1-start"))
            (play-task (game-task dig-knock-down) 'debug #f)
            (set! act-before5 3)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before4 4))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-grenade) 'debug #f)
            (set! act-before5 4)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before4 5))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-start"))
            (play-task (game-task city-port-run) 'debug #f)
            (set! act-before5 5)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before4 6))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-meet-brutter) 'debug #f)
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (set! act-before5 6)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before4 7))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewer-start"))
            (play-task (game-task sewer-board) 'debug #f)
            (set! act-before5 7)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(!= act-before4 8))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctymarkb-tanker"))
            (play-task (game-task city-intercept-tanker) 'debug #f)
            (set! act-before5 8)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(!= act-before4 9))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-shuttle) 'debug #f)
            (set! act-before5 9)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 10)(!= act-before4 10))
            (send-event *target* 'continue (get-continue-by-name *game-info* "dig3-start"))
            (play-task (game-task dig-find-totem) 'debug #f)
            (set! act-before5 10)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 11)(!= act-before4 11))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-destroy-guard-vehicles) 'debug #f)
            (set! act-before5 11)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
        )
    )

    (when (= act2-3 #t)
      (let (
        (level-pick (rand-vu-int-range 1 11))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 11))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before4 1)(!= act-before5 1)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-enemy) 'debug #f)
            (set! act-before6 1)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(and (!= act-before4 2)(!= act-before5 2)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forest-start"))
            (play-task (game-task forest-scouts) 'debug #f)
            (set! act-before6 2)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(and (!= act-before4 3)(!= act-before5 3)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "dig1-start"))
            (play-task (game-task dig-knock-down) 'debug #f)
            (set! act-before6 3)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(and (!= act-before4 4)(!= act-before5 4)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-grenade) 'debug #f)
            (set! act-before6 4)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(and (!= act-before4 5)(!= act-before5 5)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-start"))
            (play-task (game-task city-port-run) 'debug #f)
            (set! act-before6 5)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(and (!= act-before4 6)(!= act-before5 6)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
            (play-task (game-task city-meet-brutter) 'debug #f)
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (set! act-before6 6)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(and (!= act-before4 7)(!= act-before5 7)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewer-start"))
            (play-task (game-task sewer-board) 'debug #f)
            (set! act-before6 7)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(and (!= act-before4 8)(!= act-before5 8)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctymarkb-tanker"))
            (play-task (game-task city-intercept-tanker) 'debug #f)
            (set! act-before6 8)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(and (!= act-before4 9)(!= act-before5 9)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-shuttle) 'debug #f)
            (set! act-before6 9)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 10)(and (!= act-before4 10)(!= act-before5 10)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "dig3-start"))
            (play-task (game-task dig-find-totem) 'debug #f)
            (set! act-before6 10)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 11)(and (!= act-before4 11)(!= act-before5 11)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-escort-kid) 'debug #f)
            (set! act-before6 11)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
        )
    )

    (when (= act2-4 #t)
      (let (
        (level-pick 1)
        )
          (when (= level-pick 1)
            (send-event *target* 'continue (get-continue-by-name *game-info* "tomb-boulder-pre"))
            (play-task (game-task tomb-water) 'debug #f)
            (task-node-close! (game-task-node tomb-poles-poles2))
          )
        )
        (set! act2-4 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! wait-for-ingame #t)
        
    )    
    (when (= act2-5 #t)
      (let (
        (level-pick 1)
        (gp-0 (-> *game-info* features))
        )
          (when (= level-pick 1)
            (send-event *target* 'continue (get-continue-by-name *game-info* "tombboss-start"))
            (play-task (game-task tomb-boss) 'debug #f)
          )
        
        (set! act2-5 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! wait-for-ingame #t)
        (when (and 
        (not (logtest? gp-0 (game-feature gun-red)))
        (not (logtest? gp-0 (game-feature gun-yellow)))
        (not (logtest? gp-0 (game-feature gun-blue)))
        (not (logtest? gp-0 (game-feature gun-dark)))
        )
        (logior! gp-0 (game-feature gun-red))
        (set! give-gunred? #t)
        )
      )
    )    

;------------------------------------ACT 3----------------------------------------
(when (= act3-1 #t)
      (let (
        (level-pick (rand-vu-int-range 1 9))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 9))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (set! act-act 3)
          (when (and (= level-pick 1)(and (!= act-before7 1)(!= act-before7 1)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewesc-start"))
            (play-task (game-task sewer-escort) 'debug #f)
            (set! act-before7 1)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before7 2))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-stop-bomb-bots) 'debug #f)
            (set! act-before7 2)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before7 3))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-drop) 'debug #f)
            (set! act-before7 3)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before7 4))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctymarka-brutter"))
            (play-task (game-task city-save-lurkers) 'debug #f)
            (set! act-before7 4)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before7 5))
            (send-event *target* 'continue (get-continue-by-name *game-info* "under-start"))
            (play-task (game-task under-sig) 'debug #f)
            (set! act-before7 5)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before7 6))
            (send-event *target* 'continue (get-continue-by-name *game-info* "stadium-blimp-intro"))
            (play-task (game-task city-defend-stadium) 'debug #f)
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (set! act-before7 6)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before7 7))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forest-tree"))
            (play-task (game-task forest-protect) 'debug #f)
            (set! act-before7 7)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(!= act-before7 8))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
            (play-task (game-task ruins-mech) 'debug #f)
            (set! act-before7 8)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(!= act-before7 9))
            (send-event *target* 'continue (get-continue-by-name *game-info* "drill-start"))
            (play-task (game-task drill-mech) 'debug #f)
            (set! act-before7 9)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
        )
    )


(when (= act3-2 #t)
      (let (
        (level-pick (rand-vu-int-range 1 9))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 9))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before7 1)(!= act-before7 1)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewesc-start"))
            (play-task (game-task sewer-escort) 'debug #f)
            (set! act-before8 1)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before7 2))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-stop-bomb-bots) 'debug #f)
            (set! act-before8 2)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before7 3))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-drop) 'debug #f)
            (set! act-before8 3)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before7 4))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctymarka-brutter"))
            (play-task (game-task city-save-lurkers) 'debug #f)
            (set! act-before8 4)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before7 5))
            (send-event *target* 'continue (get-continue-by-name *game-info* "under-start"))
            (play-task (game-task under-sig) 'debug #f)
            (set! act-before8 5)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before7 6))
            (send-event *target* 'continue (get-continue-by-name *game-info* "stadium-blimp-intro"))
            (play-task (game-task city-defend-stadium) 'debug #f)
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (set! act-before8 6)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before7 7))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forest-tree"))
            (play-task (game-task forest-protect) 'debug #f)
            (set! act-before8 7)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(!= act-before7 8))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctymarkb-tanker"))
            (play-task (game-task city-intercept-tanker) 'debug #f)
            (set! act-before8 8)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(!= act-before7 9))
            (send-event *target* 'continue (get-continue-by-name *game-info* "drill-start"))
            (play-task (game-task drill-mech) 'debug #f)
            (set! act-before8 9)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
        )
    )

    (when (= act3-3 #t)
      (let (
        (level-pick (rand-vu-int-range 1 9))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 9))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before8 1)(!= act-before7 1)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "sewesc-start"))
            (play-task (game-task sewer-escort) 'debug #f)
            (set! act-before8 1)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(and (!= act-before8 2)(!= act-before7 2)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctysluma-alley-no-hideout"))
            (play-task (game-task city-stop-bomb-bots) 'debug #f)
            (set! act-before8 2)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(and (!= act-before8 3)(!= act-before7 3)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "strip-start"))
            (play-task (game-task strip-drop) 'debug #f)
            (set! act-before8 3)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(and (!= act-before8 4)(!= act-before7 4)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctymarka-brutter"))
            (play-task (game-task city-save-lurkers) 'debug #f)
            (set! act-before8 4)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(and (!= act-before8 5)(!= act-before7 5)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "under-start"))
            (play-task (game-task under-sig) 'debug #f)
            (set! act-before8 5)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(and (!= act-before8 6)(!= act-before7 6)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "stadium-blimp-intro"))
            (play-task (game-task city-defend-stadium) 'debug #f)
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (set! act-before8 6)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(and (!= act-before8 7)(!= act-before7 7)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forest-tree"))
            (play-task (game-task forest-protect) 'debug #f)
            (set! act-before8 7)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(and (!= act-before8 8)(!= act-before7 8)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctymarkb-tanker"))
            (play-task (game-task city-intercept-tanker) 'debug #f)
            (set! act-before8 8)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(and (!= act-before8 9)(!= act-before7 9)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "drill-start"))
            (play-task (game-task drill-mech) 'debug #f)
            (set! act-before8 9)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
        )
    )






    (when (= act3-4 #t)
      (let (
        (level-pick 1)
        )
          (when (= level-pick 1)
            (send-event *target* 'continue (get-continue-by-name *game-info* "castle-start"))
            (play-task (game-task castle-break-in) 'debug #f)
            (task-node-close! (game-task-node tomb-poles-poles2))
          )
        )
        (set! act3-4 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! in-game? #t)
        
    )    
    (when (= act3-5 #t)
      (let (
        (level-pick 1)
        (gp-0 (-> *game-info* features))
        )
          (when (= level-pick 1)
            (send-event *target* 'continue (get-continue-by-name *game-info* "casboss-start"))
            (play-task (game-task castle-boss) 'debug #f)
          )
        
        (set! act3-5 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! wait-for-ingame #t)
        (when (and 
        (not (logtest? gp-0 (game-feature gun-red)))
        (not (logtest? gp-0 (game-feature gun-yellow)))
        (not (logtest? gp-0 (game-feature gun-blue)))
        (not (logtest? gp-0 (game-feature gun-dark)))
        )
        (logior! gp-0 (game-feature gun-red))
        (set! give-gunred? #t)
        )
      )
    )    


;(logior! (-> *game-info* secrets) (game-secrets invulnerable))
;Checks to see if task got completed, then processes the next area.

(when (= level-completed? #t)
  (+! act-stage 1)
  (+! print-stage 1)
  (+! (-> *game-info* buzzer-total) 1.0)
  (when (> print-stage 5)
    (set! print-stage 1)
  )
  (set! temp-skullgemamount (-> *game-info* gem))
  (set! temp-health (-> *target* fact health))
    (when (= (-> *game-info* buzzer-total) 1.0)
      (set! act1-1 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 2.0)(= level-completed? #t))
      (set! act1-2 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 3.0)(= level-completed? #t))
      (set! act1-3 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 4.0)(= level-completed? #t))
      (set! act1-4 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 5.0)(= level-completed? #t))
      (set! act1-5 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 6.0)(= level-completed? #t))
      (set! act2-1 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 7.0)(= level-completed? #t))
      (set! act2-2 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 8.0)(= level-completed? #t))
      (set! act2-3 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 9.0)(= level-completed? #t))
      (set! act2-4 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 10.0)(= level-completed? #t))
      (set! act2-5 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 11.0)(= level-completed? #t))
      (set! act3-1 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 12.0)(= level-completed? #t))
      (set! act3-2 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 13.0)(= level-completed? #t))
      (set! act3-3 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 14.0)(= level-completed? #t))
      (set! act3-4 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 15.0)(= level-completed? #t))
      (set! act3-5 #t)
      (set! level-completed? #f)
    )
  (set! level-completed? #f)
  (set! print-stage (the int (-> *game-info* buzzer-total)))
)


(when (= (-> *game-info* buzzer-total) 1.0)

)

(when 
(and 
(= avoidc-waitb #t)
(not *scene-player*)
)
(+! avoidc-wait 1)
  (when (= avoidc-wait 1)
    (send-event *target* 'change-mode 'normal)
    (set! pause-menu-blocked? #t)
  )
  (when (= avoidc-wait 120)
    (set! avoidc-waitb #f)
    (set! avoidc-wait 0)
    (set! level-completed? #t)
    (set! pause-menu-blocked? #f)
  )
)


;camera menu
(when (= camera-locked #t) ;sets camera params
  (send-event *target* 'draw #f)
  (set-setting-by-param *setting-control* 'mode-name 'cam-eye 0 0)
  (persist-with-delay *setting-control* 'gun (seconds 0.5) 'gun #f 0.0 0)
  (process-grab? *target* #f)
)

(when (= wait-exit #t)
  (+! waite-frame 1)
  (when (= waite-frame 1)
    (set! camera-locked #f)
    (remove-setting-by-arg0 *setting-control* 'mode-name)
    (set! in-menu #f)
  )
  (when (= waite-frame 5)
    (set! pause-menu-blocked? #f)
    (send-event *target* 'draw #t)
    (process-release? *target*)
  )
  (when (= waite-frame 10)
    (set! wait-exit #f)
    (set! waite-frame 0)
    (set! act-stage 0)
    (set! (-> *game-info* buzzer-total) 0.0)
    (set! print-stage 0)
    (set! level-completed? #t)
    (set! display-run #t)
  )
)
(when (= wait-start #t)
  (+! waits-frame 1)
  (when (= waits-frame 1)
    (set! tutorial-completed? #t)
  )
  (when (> waits-frame 60)
    (set! in-menu #t)
    (set! wait-start #f)
    (set! waits-frame 0)
    (set! camera-locked #t)
    (set! pause-menu-blocked? #t)
  )
)

(when (= waitenter #t)
  (+! waitenteri 1)
  (when (= waitenteri 60)
    (set! tutorial-completed? #f)
    (set! waitenteri 0)
    (set! waitenter #f)
  )
)

(when 
(and
(= pause-menu-blocked? #t)
(= (pause-allowed?) #t)
(not *scene-player*)
)
  (set-master-mode 'game)
)



;Death params
(when 
(and
(= (pause-allowed?) #t)
(= (-> *target* fact health) 0.0)
*target*
)
  (set! waitdie #t)
  (set! in-game? #f)
  (set! avoidc-waitb #f)
  (set! avoidc-wait 0)
)




(when (and (= waitdie #t)(= (pause-allowed?) #t))
  (+! waitdi 1)
  (when (= waitdi 1)
    (+! (-> *game-info* task-deaths) 1)
    (set! temp-skullgemamount (-> *game-info* gem))
    (+! (-> *game-info* fuel) (-> *game-info* gem))
  )
  (when (= waitdi 30)
    (send-event *target* 'continue (get-continue-by-name *game-info* "prison-start"))
    (set! waitdi 0)
    (set! waitdie #f)
  )
)





(deftype randomizer-settings (basic)
    (
      (version uint64) ;; version of this settings
      (checkpoint-randomizer? symbol) ;; enable Zed's checkpoint randomizer
      (use-random-seed? symbol) ;; boolean (#t = random seed / #f = set seed)
      (current-seed uint) ;; seed used to generate random checkpoint.
      (backup-next-idx int) ;; backup in case of game crash
      (warp-on-cell? symbol) ;; warp on cell
      (warp-on-orb? symbol) ;; warp on orb
      (warp-on-buzzer? symbol) ;; Warp on scoutfly
      (warp-on-green-eco? symbol) ;; Warp on green eco
      (warp-on-blue-eco? symbol) ;; Warp on blue eco
      (warp-on-red-eco? symbol) ;; Warp on red eco
      (warp-on-yellow-eco? symbol) ;; Warp on yellow eco
      (warp-on-eco-vents? symbol) ;; Controls whether eco vents count towards above eco warps
      (warp-on-death? symbol) ;; Warp on death
      (collectables-needed-to-warp float);; number of cells/orbs/flies needed to trigger a random checkpoint warp
      (show-warp-counter? symbol) ;; boolean controlling if warp collectable count displayed
      (rng-lib symbol) ;; the RNG library to use in main game (randomizer itself always uses knuth)
      (checkpoint-logic symbol) ;; the logic used when generating checkpoint lists
    )

    (:methods
      (new (symbol type) _type_)
      (reset (_type_) none)
      (read-from-file (_type_ string) symbol)
      (commit-to-file (_type_) none)
      (write-to-file (_type_ string) symbol)
      (load-settings (_type_) int)
      )
    )

(defmethod reset randomizer-settings ((obj randomizer-settings))
  "Set the default settings for non-vanilla randomizer settings"

  (format 0 "resetting randomizer settings~%")

  (set! (-> obj version) RANDO_SETTINGS_VERSION)
  (set! (-> obj checkpoint-randomizer?) #f)
  (set! (-> obj collectables-needed-to-warp) 1.0)
  (set! (-> obj show-warp-counter?) #f)
  (set! (-> obj use-random-seed?) #t)
  (set! (-> obj current-seed) 42069)
  (set! (-> obj backup-next-idx) 0)
  (set! (-> obj warp-on-cell?) #t)
  (set! (-> obj warp-on-orb?) #f)
  (set! (-> obj warp-on-buzzer?) #f)
  (set! (-> obj warp-on-green-eco?) #f)
  (set! (-> obj warp-on-blue-eco?) #f)
  (set! (-> obj warp-on-red-eco?) #f)
  (set! (-> obj warp-on-yellow-eco?) #f)
  (set! (-> obj warp-on-eco-vents?) #f)
  (set! (-> obj warp-on-death?) #f)
  (set! (-> obj rng-lib) 'rand-vu)
  (set! (-> obj checkpoint-logic) 'logic-random-checkpoint)

  (none))

 (deftype challenges-settings (basic)
    ((version uint64) ;; version of this settings
    (challenges-hardcore? symbol)
    (challenges-orbless? symbol)
    (challenges-damageless? symbol)
    (challenges-pacifist? symbol)
    (challenges-bonkless? symbol)
    (challenges-casual? symbol)
    (challenges-mirrormode? symbol)
    (challenges-smalljak? symbol)
    (challenges-bigjak? symbol)
    (challenges-flatjak? symbol)
    (challenges-paperjak? symbol)
    )

    (:methods
    (new (symbol type) _type_)
    (reset (_type_) none)
    (read-from-file (_type_ string) symbol)
    (commit-to-file (_type_) none)
    (write-to-file (_type_ string) symbol)
    (load-settings (_type_) int)
    )
  )
 

(defmethod write-to-file randomizer-settings ((obj randomizer-settings) (filename string))
  "write settings to a file"

  (if (not filename)
    (return #f))

    (let ((file (new 'stack 'file-stream filename 'write)))
    (if (not (file-stream-valid? file))
      (return #f))

    (format file "(settings #x~X~%" (-> obj version))
    ;; left as "cells-needed-to-warp" in settings for backwards compatibility
    (format file "  (cells-needed-to-warp ~F)~%" (the-as float(-> obj collectables-needed-to-warp)))
    (format file "  (show-warp-counter? ~A)~%" (-> obj show-warp-counter?))
    (format file "  (Randomizer? ~A)~%" (-> obj checkpoint-randomizer?))
    (format file "  (use-random-seed? ~A)~%" (-> obj use-random-seed?))
    (format file "  (Seed ~D)~%" (-> obj current-seed))
    (format file "  (backup-next-idx ~D)~%" (-> obj backup-next-idx))
    (format file "  (WarpOnCell? ~A)~%" (-> obj warp-on-cell?))
    (format file "  (WarpOnOrb? ~A)~%" (-> obj warp-on-orb?))
    (format file "  (WarpOnBuzzer? ~A)~%" (-> obj warp-on-buzzer?))
    (format file "  (WarpOnGreenEco? ~A)~%" (-> obj warp-on-green-eco?))
    (format file "  (WarpOnBlueEco? ~A)~%" (-> obj warp-on-blue-eco?))
    (format file "  (WarpOnRedEco? ~A)~%" (-> obj warp-on-red-eco?))
    (format file "  (WarpOnYellowEco? ~A)~%" (-> obj warp-on-yellow-eco?))
    (format file "  (WarpOnEcoVents? ~A)~%" (-> obj warp-on-eco-vents?))
    (format file "  (WarpOnDeath? ~A)~%" (-> obj warp-on-death?))
    (format file "  (rng-lib ~A)~%" (-> obj rng-lib))
    (format file "  (checkpoint-logic ~A)~%" (-> obj checkpoint-logic))

    (format file "  )~%")
    (file-stream-close file)
    )

  (format 0 "randomizer settings file write: ~A~%" filename)

  #t
  )



;wait for the in-game to not get the infinite complete mission glitch

(when (and (= in-game? #f)(= wait-for-ingame #t))
  (+! waiting 1)
  (when (= waiting 120)
    (set! in-game? #t)
    (auto-save-user)
    (set! waiting 0)
    (set! wait-for-ingame #f)
  )
)


(defmethod commit-to-file randomizer-settings ((obj randomizer-settings))
  "commits the current settings to the file"
  ;; auto load settings if available
  (format (clear *pc-temp-string-1*) "~S/Mods/randomizer-settings.gc" *pc-settings-folder*)
  (pc-mkdir-file-path *pc-temp-string-1*)
  (write-to-file obj *pc-temp-string-1*)
  (none)) 

(defmethod read-from-file randomizer-settings ((obj randomizer-settings) (filename string))
  "read settings from a file"

  (if (not filename)
    (return #f))

  (let ((file (new 'stack 'file-stream filename 'read)))
    (when (not (file-stream-valid? file))
      (return #f))

    ;;Check version
    (let ((version RANDO_SETTINGS_VERSION))
      (with-settings-scope (file)
        (case-str (file-stream-read-word file)
          (("settings")
            (set! version (file-stream-read-int file))
            (cond
              ((= (logand version #xffffffff00000000) (logand RANDO_SETTINGS_VERSION #xffffffff00000000))
                ;; minor difference
                )
              (else
                ;; major difference
                (format 0 "Randomizer settings version mismatch! Got ~D.~D vs ~D.~D~%" RANDO_SETTINGS_VERSION_MAJOR RANDO_SETTINGS_VERSION_MINOR (bit-field int version 32 16) (bit-field int version 48 16))
                (file-stream-close file)
                (return #f)
                )
              )
            ;;read through the file and set fields
            (dosettings (file)
              (case-str *pc-temp-string*
                (("Randomizer?") (set! (-> obj checkpoint-randomizer?) (file-stream-read-symbol file)))
                ;; left as "cells-needed-to-warp" in settings for backwards compatibility
                (("cells-needed-to-warp") (set! (-> obj collectables-needed-to-warp) (file-stream-read-float file)))
                (("show-warp-counter?") (set! (-> obj show-warp-counter?) (file-stream-read-symbol file)))
                (("use-random-seed?") (set! (-> obj use-random-seed?) (file-stream-read-symbol file)))
                (("Seed") (set! (-> obj current-seed) (file-stream-read-uint file)))
                (("backup-next-idx") (set! (-> obj backup-next-idx) (file-stream-read-int file)))
                (("WarpOnCell?") (set! (-> obj warp-on-cell?) (file-stream-read-symbol file)))
                (("WarpOnOrb?") (set! (-> obj warp-on-orb?) (file-stream-read-symbol file)))
                (("WarpOnBuzzer?") (set! (-> obj warp-on-buzzer?) (file-stream-read-symbol file)))
                (("WarpOnGreenEco?") (set! (-> obj warp-on-green-eco?) (file-stream-read-symbol file)))
                (("WarpOnBlueEco?") (set! (-> obj warp-on-blue-eco?) (file-stream-read-symbol file)))
                (("WarpOnRedEco?") (set! (-> obj warp-on-red-eco?) (file-stream-read-symbol file)))
                (("WarpOnYellowEco?") (set! (-> obj warp-on-yellow-eco?) (file-stream-read-symbol file)))
                (("WarpOnEcoVents?") (set! (-> obj warp-on-eco-vents?) (file-stream-read-symbol file)))
                (("WarpOnDeath?") (set! (-> obj warp-on-death?) (file-stream-read-symbol file)))
                (("rng-lib") (set! (-> obj rng-lib) (file-stream-read-symbol file)))
                (("checkpoint-logic") (set! (-> obj checkpoint-logic) (file-stream-read-symbol file)))

                )
              )
            )
          )
        )

      )
      (inspect file)
    (file-stream-close file)
    )

  (format 0 "pc settings file read: ~A~%" filename)

  #t
  )


(defmethod write-to-file randomizer-settings ((obj randomizer-settings) (filename string))
  "write settings to a file"

  (if (not filename)
    (return #f))

    (let ((file (new 'stack 'file-stream filename 'write)))
    (if (not (file-stream-valid? file))
      (return #f))

    (format file "(settings #x~X~%" (-> obj version))
    ;; left as "cells-needed-to-warp" in settings for backwards compatibility
    (format file "  (cells-needed-to-warp ~F)~%" (the-as float(-> obj collectables-needed-to-warp)))
    (format file "  (show-warp-counter? ~A)~%" (-> obj show-warp-counter?))
    (format file "  (Randomizer? ~A)~%" (-> obj checkpoint-randomizer?))
    (format file "  (use-random-seed? ~A)~%" (-> obj use-random-seed?))
    (format file "  (Seed ~D)~%" (-> obj current-seed))
    (format file "  (backup-next-idx ~D)~%" (-> obj backup-next-idx))
    (format file "  (WarpOnCell? ~A)~%" (-> obj warp-on-cell?))
    (format file "  (WarpOnOrb? ~A)~%" (-> obj warp-on-orb?))
    (format file "  (WarpOnBuzzer? ~A)~%" (-> obj warp-on-buzzer?))
    (format file "  (WarpOnGreenEco? ~A)~%" (-> obj warp-on-green-eco?))
    (format file "  (WarpOnBlueEco? ~A)~%" (-> obj warp-on-blue-eco?))
    (format file "  (WarpOnRedEco? ~A)~%" (-> obj warp-on-red-eco?))
    (format file "  (WarpOnYellowEco? ~A)~%" (-> obj warp-on-yellow-eco?))
    (format file "  (WarpOnEcoVents? ~A)~%" (-> obj warp-on-eco-vents?))
    (format file "  (WarpOnDeath? ~A)~%" (-> obj warp-on-death?))
    (format file "  (rng-lib ~A)~%" (-> obj rng-lib))
    (format file "  (checkpoint-logic ~A)~%" (-> obj checkpoint-logic))

    (format file "  )~%")
    (file-stream-close file)
    )

  (format 0 "randomizer settings file write: ~A~%" filename)

  #t
  )

(defmethod commit-to-file randomizer-settings ((obj randomizer-settings))
  "commits the current settings to the file"
  ;; auto load settings if available
  (format (clear *pc-temp-string-1*) "~S/Mods/randomizer-settings.gc" *pc-settings-folder*)
  (pc-mkdir-file-path *pc-temp-string-1*)
  (write-to-file obj *pc-temp-string-1*)
  (none)) 

(defmethod read-from-file randomizer-settings ((obj randomizer-settings) (filename string))
  "read settings from a file"

  (if (not filename)
    (return #f))

  (let ((file (new 'stack 'file-stream filename 'read)))
    (when (not (file-stream-valid? file))
      (return #f))

    ;;Check version
    (let ((version RANDO_SETTINGS_VERSION))
      (with-settings-scope (file)
        (case-str (file-stream-read-word file)
          (("settings")
            (set! version (file-stream-read-int file))
            (cond
              ((= (logand version #xffffffff00000000) (logand RANDO_SETTINGS_VERSION #xffffffff00000000))
                ;; minor difference
                )
              (else
                ;; major difference
                (format 0 "Randomizer settings version mismatch! Got ~D.~D vs ~D.~D~%" RANDO_SETTINGS_VERSION_MAJOR RANDO_SETTINGS_VERSION_MINOR (bit-field int version 32 16) (bit-field int version 48 16))
                (file-stream-close file)
                (return #f)
                )
              )
            ;;read through the file and set fields
            (dosettings (file)
              (case-str *pc-temp-string*
                (("Randomizer?") (set! (-> obj checkpoint-randomizer?) (file-stream-read-symbol file)))
                ;; left as "cells-needed-to-warp" in settings for backwards compatibility
                (("cells-needed-to-warp") (set! (-> obj collectables-needed-to-warp) (file-stream-read-float file)))
                (("show-warp-counter?") (set! (-> obj show-warp-counter?) (file-stream-read-symbol file)))
                (("use-random-seed?") (set! (-> obj use-random-seed?) (file-stream-read-symbol file)))
                (("Seed") (set! (-> obj current-seed) (file-stream-read-uint file)))
                (("backup-next-idx") (set! (-> obj backup-next-idx) (file-stream-read-int file)))
                (("WarpOnCell?") (set! (-> obj warp-on-cell?) (file-stream-read-symbol file)))
                (("WarpOnOrb?") (set! (-> obj warp-on-orb?) (file-stream-read-symbol file)))
                (("WarpOnBuzzer?") (set! (-> obj warp-on-buzzer?) (file-stream-read-symbol file)))
                (("WarpOnGreenEco?") (set! (-> obj warp-on-green-eco?) (file-stream-read-symbol file)))
                (("WarpOnBlueEco?") (set! (-> obj warp-on-blue-eco?) (file-stream-read-symbol file)))
                (("WarpOnRedEco?") (set! (-> obj warp-on-red-eco?) (file-stream-read-symbol file)))
                (("WarpOnYellowEco?") (set! (-> obj warp-on-yellow-eco?) (file-stream-read-symbol file)))
                (("WarpOnEcoVents?") (set! (-> obj warp-on-eco-vents?) (file-stream-read-symbol file)))
                (("WarpOnDeath?") (set! (-> obj warp-on-death?) (file-stream-read-symbol file)))
                (("rng-lib") (set! (-> obj rng-lib) (file-stream-read-symbol file)))
                (("checkpoint-logic") (set! (-> obj checkpoint-logic) (file-stream-read-symbol file)))

                )
              )
            )
          )
        )

      )
      (inspect file)
    (file-stream-close file)
    )

  (format 0 "pc settings file read: ~A~%" filename)

  #t
  )

(defmethod load-settings randomizer-settings ((obj randomizer-settings))
  "load"

  (format (clear *pc-temp-string-1*) "~S/Mods/randomizer-settings.gc" *pc-settings-folder*)
  (if (pc-filepath-exists? *pc-temp-string-1*)
    (begin
      (format 0 "[Randomizer] Randomizer Settings found at '~S'...loading!~%" *pc-temp-string-1*)
      (unless (read-from-file obj *pc-temp-string-1*)
        (format 0 "[Randomizer] Randomizer Settings found at '~S' but could not be loaded, using defaults!~%" *pc-temp-string-1*)
        (reset obj)))
    (format 0 "[Randomizer] Randomizer Settings not found at '~S'...initializing with defaults!~%" *pc-temp-string-1*))
  0)
  
(defmethod new randomizer-settings ((allocation symbol) (type-to-make type))
  "make a new randomizer-settings"
  (let ((obj (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (reset obj)
    ;; auto load settings if available
    ;; if saved settings are corrupted or not found, use defaults
    (load-settings obj)
    obj))


;menu params
(when (and (= in-menu #t)(= (paused?) #f)(= (-> *game-info* task-deaths) 0)(not (cpad-pressed? 0 x)))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
    <COLOR_WHITE>Welcome to<COLOR_RED> Roguelike Jak II (demo)<COLOR_WHITE>!
    ~%<COLOR_BLUE>  Made by Kraken
    ~%<COLOR_WHITE>Project is about 40 percent done, still have lots of crashes. Playable to Krew Boss.
    ~%
    <COLOR_WHITE>~%Continuing from the Easter Egg in HeroMode+:
    ~%The mysterious villain has dominated the world across vast dimensions, and
    ~%the Jak time loop is completely wrecked.
    ~%
    ~%But there is still hope.
    ~%
    ~%When you <COLOR_GREEN>start your run<COLOR_WHITE>, you will be transported to the dimensions where Jak
    ~%no longer exists, and you must take his place by completing the missions, and fulfilling the
    ~%prophecy. Get as powerful as you can! Jak dying means <COLOR_RED>perma-death<COLOR_WHITE>!
    ~%
    ~%
    ~%<COLOR_GREEN>Press <COLOR_BLUE>X<COLOR_GREEN> to start the run!"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 55 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-menu #t)(= (paused?) #f)(= (-> *game-info* task-deaths) 1)(not (cpad-pressed? 0 x)))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
    <COLOR_WHITE>Welcome to<COLOR_RED> Roguelike Jak II<COLOR_WHITE>!
    ~%<COLOR_BLUE>  Made by Kraken
    ~%
    ~%
    <COLOR_RED>~%Wow! You died! How punishing---
    ~%<COLOR_WHITE>The good thing here is that what you do in your run, is saved in this room.
    ~%Like the <COLOR_YELLOW>~d Skull Gems<COLOR_WHITE> you acquired.
    ~%They're all saved in additive to your OTHER currency.
    ~%Your Tokens.
    ~%
    ~%You can use these to purchase items to put in your run!
    ~%These can ALSO be used to purchase mutators (or modifiers) to spice up the gameplay!
    ~%You can press <COLOR_RED>R1<COLOR_WHITE> to purchase your next item to add at 200 Tokens.
    ~%
    ~%<COLOR_GREEN>Press <COLOR_BLUE>X<COLOR_GREEN> to start the run!"
    (the int temp-skullgemamount)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-menu #t)(= (paused?) #f)(>= (-> *game-info* task-deaths) 2)(not (cpad-pressed? 0 x)))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
    <COLOR_WHITE>Welcome to<COLOR_RED> Roguelike Jak II<COLOR_WHITE>!
    ~%<COLOR_BLUE>  Made by Kraken
    ~%
    ~%
    <COLOR_RED>~%You Died!
    ~%<COLOR_WHITE>Skulls Gems turned into Tokens:
    ~%<COLOR_YELLOW>~d
    ~%<COLOR_WHITE>Progress:
    ~%<COLOR_GREEN> Act ~d <COLOR_YELLOW>Stage ~d
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> for <COLOR_YELLOW>~d tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_BLUE>X<COLOR_GREEN> to start the run!"
    (the int temp-skullgemamount)
    act-act
    print-stage
    (the int (-> *game-info* fuel))
    mod-s
    purchase-amount
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-menu #t)(cpad-pressed? 0 x))
  (set! tutorial-completed? #t)
  (set! wait-exit #t)
  (set! in-menu #f)
)

#| shop
(when (and (= in-menu #t)(cpad-hold? 0 r1))

)
|#
(when (and (= act-act 1)(= (-> *game-info* buzzer-total) 1.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN><<COLOR_WHITE>---<---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 1)(= (-> *game-info* buzzer-total) 2.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN><---<<COLOR_WHITE>---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 1)(= (-> *game-info* buzzer-total) 3.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN><---<---<<COLOR_WHITE>---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 1)(= (-> *game-info* buzzer-total) 4.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN><---<---<---<<COLOR_WHITE>---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 1)(= (-> *game-info* buzzer-total) 5.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN><---<---<---<---<COLOR_RED>(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
;----------------------------SECOND ACT-----------------------------
(when (and (= act-act 2)(= (-> *game-info* buzzer-total) 6.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE><<COLOR_WHITE>---<---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 2)(= (-> *game-info* buzzer-total) 7.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE><---<<COLOR_WHITE>---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 2)(= (-> *game-info* buzzer-total) 8.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE><---<---<<COLOR_WHITE>---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 2)(= (-> *game-info* buzzer-total) 9.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE><---<---<---<<COLOR_WHITE>---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 2)(= (-> *game-info* buzzer-total) 10.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE><---<---<---<---<COLOR_RED>(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

;----------------------------THIRD ACT-----------------------------
(when (and (= act-act 3)(= (-> *game-info* buzzer-total) 11.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED><<COLOR_WHITE>---<---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 3)(= (-> *game-info* buzzer-total) 12.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED><---<<COLOR_WHITE>---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 3)(= (-> *game-info* buzzer-total) 13.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED><---<---<<COLOR_WHITE>---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 3)(= (-> *game-info* buzzer-total) 14.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED><---<---<---<<COLOR_WHITE>---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 3)(= (-> *game-info* buzzer-total) 15.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED><---<---<---<---<COLOR_RED>(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

;----------------------------DARK ACT-----------------------------
(when (and (= act-act 4)(= (-> *game-info* buzzer-total) 16.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK><<COLOR_WHITE>---<---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 4)(= (-> *game-info* buzzer-total) 17.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK><---<<COLOR_WHITE>---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 4)(= (-> *game-info* buzzer-total) 18.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK><---<---<<COLOR_WHITE>---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 4)(= (-> *game-info* buzzer-total) 19.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK><---<---<---<<COLOR_WHITE>---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 4)(= (-> *game-info* buzzer-total) 20.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK><---<---<---<---<COLOR_PINK>(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)





;<<<<<<<<<<<<<<<<<<<<<<<<<<<<This area is meant for fixes with specific missions<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
;(send-event proc 'target-turret-get-off 90)

;Immediate mission completion without going back to mission giver.

(when 
(and 
(task-node-closed? (game-task-node sewer-enemy-blow-up-turrets))
(not (task-node-closed? (game-task-node sewer-enemy-resolution)))
)
  (task-node-close! (game-task-node sewer-enemy-resolution))
)

(when 
(and 
(task-node-closed? (game-task-node city-krew-collection-collection))
(not (task-node-closed? (game-task-node city-krew-collection-resolution)))
)
  (task-node-close! (game-task-node city-krew-collection-resolution))
)




#|

    (set! traffic-metalheads? #t) ;turns on traffic lwideb'
    ;^ WHEN THIS IS TRUE ^  v THEN ALL OF THESE PARAMETERS CAN BE SET v
    (send-event *traffic-manager* 'set-target-level 5.0) ;sets guards and metalheads to fight

    (send-event *traffic-manager* 'set-target-level 100.0) ;sets metalheads to overrun everything

    (send-event *traffic-manager* 'set-target-level 10.0) ;sets guards only


|#

    ;(set! (-> (level-get-target-inside *level*) mood-func)update-mood-nest)


      (if *show-input-display* 
        (input-display-on)
        (input-display-off)
        )
      
      (none)
      )

    (defun runs-on-gem-pickup ()
      ;; Code here runs on any scout fly pickup

      (none)
      )

    (defun runs-on-task-close ()
    
      (set! level-completed? #t)
      (none)
      )

    (defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
      (let* ((from-vent? #f))
        ;; Code here runs as soon as you pickup ANY eco

        (case eco-type
          (((pickup-type eco-yellow))      
            ;; Code here runs as soon as you pickup yellow eco

            )
          (((pickup-type eco-red))      
            ;; Code here runs as soon as you pickup red eco

            )
          (((pickup-type eco-blue))      
            ;; Code here runs as soon as you pickup blue eco

            )

          (((pickup-type eco-green))      
            ;; Code here runs as soon as you pickup big green eco 

            )
          )
        
        (when from-vent?
          ;; Code here runs only if the eco was picked up from a vent

          )
        )

      (none)
      )

    (defun runs-on-jak-spawn ()
      ;; Code here runs every time jak spawns (loading a file new game or death)   

      (none)
      )

    (defun runs-on-jak-death ((death-event symbol))
      (case death-event
        (('dying)
          ;; Code here runs immediately every time jak dies, before any death animation or death cutscene
          (set! waitdie #t)
          )
        (('blackout)
          ;; Code here runs after jak dies (and any death cutscene finishes), during the blackout before he spawns

          )
        )
      
      (none)
      )


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; deprecated function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| these are no longer recommended/supported however we include them anyways to not break anyones mods.
    |#
